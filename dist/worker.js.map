{"version":3,"sources":["webpack:///webpack/bootstrap 46836b13926514081190","webpack:///./src/common/geometrics.ts","webpack:///./src/common/v3.ts","webpack:///./src/common/Pool.ts","webpack:///./src/common/BlockTypes.ts","webpack:///./src/client/engine/chunk/EngineChunkVertexArrayPool.ts","webpack:///./src/client/ChunkData.ts","webpack:///./src/client/worker/WorkerManager.ts","webpack:///./src/client/engine/chunk/EngineChunkBuilder.ts","webpack:///./src/client/worker.ts","webpack:///./src/client/worker/WorkerObligation.ts","webpack:///./src/client/worker/TaskDrawInternalVerts.ts","webpack:///./src/common/BlockPos.ts","webpack:///./src/client/engine/chunk/EngineChunkQuadWriter.ts","webpack:///./src/client/worker/TaskGenerateAndMeshChunk.ts","webpack:///./src/client/singleplayer/ChunkGeneration.ts","webpack:///./src/common/noise.ts","webpack:///./src/client/engine/chunk/EngineChunkQuadLookupPool.ts"],"names":["__webpack_require__","moduleId","installedModules","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","CHUNK_SIZE","CHUNK_SIZE_SQUARED","CHUNK_SIZE_CUBED","facesPerCube","maxQuadsPerMesh","quadVertexElementSize","quadVertexByteSize","Uint32Array","BYTES_PER_ELEMENT","T","id","axis","axisDelta","verts","dx","dy","dz","size","deltaIndex","B","N","S","E","W","key","side","deltaV3","__WEBPACK_IMPORTED_MODULE_0_v3__","tangents","opposite","Sides","byName","TOP","BOTTOM","NORTH","SOUTH","EAST","WEST","byId","byAxis","each","callback","sideId","v3","x","y","z","this","a","Float32Array","v","clone","set","setFrom","b","setSum","toString","lengthSqr","ax","ay","az","length","Math","sqrt","ceil","floor","negate","invert","normalize","lenSqr","multiplyScalar","scalar","divideScalar","add","that","subtract","multiply","divide","dot","cross","bx","by","bz","lerp","t","exactEquals","equals","abs","max","Pool","createCallback","releaseCallback","items","acquire","pop","release","item","push","addBlockType","tileIndex","BlockTypes","blockType","BlockType","_this","textureSides","makeTextureSide","setSideTile","__webpack_exports__","createPool","__WEBPACK_IMPORTED_MODULE_1_Pool__","__WEBPACK_IMPORTED_MODULE_0_geometrics__","mainPool","vertexArray","createPrefilledPool","existingItems","pool","ChunkData","pos","__WEBPACK_IMPORTED_MODULE_2_v3__","blocks","Uint8Array","setChunkPos","chunkPos","processQueue","inactiveWorkerControllers","queuedTasks","task","shift","worker","assignedWorkerId","workerId","startWorker","startResponse","onStart","requestPayload","transferableObjects","activeTasksByWorkerId","taskId","start","taskType","responsePayload","cancelled","onCancelled","onComplete","taskIdCounter","taskFromQueue","task_1","splice","workerControllers","cancel","WorkerController","addEventListener","e","data","activeTaskId","onResponse","undefined","activeTaskType","postMessage","cancelTask","calculateVertexColours","airBlockPos","brightnesses","tangentIndex","tangentSide","edgeOccludingBlockPos","setAdjacentToBlockPos","blockDataSource","isTransparent","diagonalTangentSide","cornerOccludingBlockPos","occludedBrightnesses","__WEBPACK_IMPORTED_MODULE_2_BlockPos__","__WEBPACK_IMPORTED_MODULE_5_v3__","ChunkPrewriter","blockData","quadIdsByBlockAndSide","vertexArrayPool","quadCount","vertexArrays","currentVertexArray","addVertexArray","addQuad","blockPos","uvs","quadId","__WEBPACK_IMPORTED_MODULE_3__EngineChunkQuadWriter__","drawInternalChunkQuads","solidBlockPos","eachBlockInChunk","__WEBPACK_IMPORTED_MODULE_1_BlockTypes__","reusableVertexArrays","__WEBPACK_IMPORTED_MODULE_4__EngineChunkVertexArrayPool__","prewriter","unusedVertexArrays","unstitchChunk","chunk","eachBlockOnFace","removeQuad","stitchChunks","newCenterChunk","fixAO","getQuadId","blockTypeId","getBlockData","aoAirBlockPos","engineChunk","updateQuadAO","addFace","nearBlockPos","farBlockPos","axis1","sideIndex1","side1","faceNeighbourChunk","neighboursBySideId","nearIsTransparent","farIsTransparent","axis2","sideIndex2","side2","edgeNeighbourChunk","eachBlockOnEdge","tangentAxis","sideIndex3","side3","cornerNeighbourChunk","setBlockOnCorner","__WEBPACK_IMPORTED_MODULE_0__worker_WorkerObligation__","__WEBPACK_IMPORTED_MODULE_1__worker_TaskDrawInternalVerts__","__WEBPACK_IMPORTED_MODULE_2__worker_TaskGenerateAndMeshChunk__","taskHandlersArray","ctx","self","taskHandlersByType","forEach","taskHandler","event","console","error","work","__WEBPACK_IMPORTED_MODULE_1__WorkerManager__","queue","chunkData","quadIdsByBlockAndSidePool","initialVertexArrays","__WEBPACK_IMPORTED_MODULE_3__engine_chunk_EngineChunkVertexArrayPool__","buffer","map","completePayload","Uint16Array","cancelledPayload","__WEBPACK_IMPORTED_MODULE_0__ChunkData__","cancelledQuadIdsByBlockAndSide","responseCallback","fill","_a","__WEBPACK_IMPORTED_MODULE_2__engine_chunk_EngineChunkBuilder__","arr","BlockPos","blockDataOverride","__WEBPACK_IMPORTED_MODULE_1_v3__","recalculateIndex","getWorldPoint","outV3","worldPos","getBlockType","__WEBPACK_IMPORTED_MODULE_2__BlockTypes__","isOpaque","refBlockPos","newAxisPos","newIndex","neighbourChunk","freeAxis1","freeAxis2","freeAxis","drawQuad","flipQuad","packedInt0","packedInt1","vertexArrayCursor","__WEBPACK_IMPORTED_MODULE_2__WorkerManager__","__WEBPACK_IMPORTED_MODULE_1__ChunkData__","__WEBPACK_IMPORTED_MODULE_6__engine_chunk_EngineChunkQuadLookupPool__","__WEBPACK_IMPORTED_MODULE_5__engine_chunk_EngineChunkVertexArrayPool__","chunkPosRaw","__WEBPACK_IMPORTED_MODULE_3__singleplayer_ChunkGeneration__","generateChunk","__WEBPACK_IMPORTED_MODULE_4__engine_chunk_EngineChunkBuilder__","fbm1","__WEBPACK_IMPORTED_MODULE_3_noise__","Noise3d","setFractal","fbm2","warp1","NoiseWarp3d","cell1","CellNoise","chunkBlocks","sampleVector","chunkBlockIndex","cellNoise","sample2sqr","v_dist","v_closest","__WEBPACK_IMPORTED_MODULE_2_BlockTypes__","air","obsidian","terrainGen","normalized_v_closest","workVector","biomeBlockTypes","stone","dirt","sand","gravel","snow","ice","sandstone","grass","biomeSolidBlock","warp3","sample1","sample2","sample3","pow","seed","perm","gradP","grad3","simplex2","xin","yin","n0","n1","n2","i1","j1","F2","j","G2","x0","y0","x1","y1","x2","y2","gi0","gi1","gi2","t0","dot2","t1","t2","simplex3","zin","n3","k1","i2","j2","k2","F3","k","G3","z0","z1","z2","x3","y3","z3","gi3","dot3","t3","Grad","Array","fbm_counter","scale","offset","__WEBPACK_IMPORTED_MODULE_0__v3__","randomizeOffset","octaves","persistance","lacunarity","obj","amplitude","frequency","sum","noiseSource","noise_x","noise_y","noise_z","warp2","noisex","noisez","noiseq","winningGridCoord","px","pz","fx","fz","smallestD","rx","rz"],"mappings":"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","file":"worker.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 8);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 46836b13926514081190","import v3 from \"v3\"\r\n\r\nexport const CHUNK_SIZE         = 32\r\nexport const CHUNK_SIZE_SQUARED = CHUNK_SIZE * CHUNK_SIZE\r\nexport const CHUNK_SIZE_CUBED   = CHUNK_SIZE * CHUNK_SIZE * CHUNK_SIZE\r\n\t\r\nexport const facesPerCube     = 6\r\nexport const uniqVertsPerFace = 4\r\nexport const indicesPerFace   = 6\r\n\r\nexport const maxVerts         = 64 * 1024 // this should be 64k\r\nexport const maxQuadsPerChunk = maxVerts / uniqVertsPerFace\r\nexport const maxQuadsPerMesh  = 2400\r\n\r\nexport const quadVertexElementSize = 2\r\nexport const quadVertexByteSize = Uint32Array.BYTES_PER_ELEMENT * quadVertexElementSize\r\nexport const quadByteStride = /*geometrics.VertexArrayType*/Uint32Array.BYTES_PER_ELEMENT * 2\r\nexport const bufferByteSize = maxQuadsPerMesh * quadByteStride\r\n\r\nexport type VertexArrayType = Uint32Array\r\n\r\n\r\nexport function worldPosToChunkPos(worldPos: v3) {\r\n\treturn worldPos.clone().divideScalar(CHUNK_SIZE).floor()\r\n}\r\n\r\n\r\n// Sides\r\n\r\nexport interface SideType {\r\n\tname: string,\r\n\tid: number,\r\n\taxis: number,\r\n\taxisDelta: number,\r\n\tverts: Array<number>,\r\n\tdx: number,\r\n\tdy: number,\r\n\tdz: number,\r\n\tsize: number,\r\n\tdeltaIndex: number,\r\n\tdeltaV3?: v3,\r\n\ttangents?: Array<{ side: SideType, tangents: Array<SideType> }>,\r\n\topposite?: SideType,\r\n}\r\n\r\nconst s: { [key: string]: SideType } = {\r\n\tT: { name: \"TOP\", id: 0, axis: 1, axisDelta: 1, verts: [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0,], dx: 0, dy: 1, dz: 0, size: CHUNK_SIZE, deltaIndex: 1, },\r\n\tB: { name: \"BOTTOM\", id: 1, axis: 1, axisDelta: -1, verts: [0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1,], dx: 0, dy: -1, dz: 0, size: CHUNK_SIZE, deltaIndex: -1, },\r\n\tN: { name: \"NORTH\", id: 2, axis: 2, axisDelta: 1, verts: [1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1,], dx: 0, dy: 0, dz: 1, size: CHUNK_SIZE, deltaIndex: CHUNK_SIZE, },\r\n\tS: { name: \"SOUTH\", id: 3, axis: 2, axisDelta: -1, verts: [0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0,], dx: 0, dy: 0, dz: -1, size: CHUNK_SIZE, deltaIndex: -CHUNK_SIZE, },\r\n\tE: { name: \"EAST\", id: 4, axis: 0, axisDelta: 1, verts: [1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1,], dx: 1, dy: 0, dz: 0, size: CHUNK_SIZE, deltaIndex: CHUNK_SIZE_SQUARED, },\r\n\tW: { name: \"WEST\", id: 5, axis: 0, axisDelta: -1, verts: [0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0,], dx: -1, dy: 0, dz: 0, size: CHUNK_SIZE, deltaIndex: -CHUNK_SIZE_SQUARED, },\r\n}\r\n\r\nfor (let key in s) {\r\n\tconst side = s[key]\r\n\tside.deltaV3 = new v3(side.dx, side.dy, side.dz)\r\n}\r\n\r\ns.T.tangents = [{ side: s.N, tangents: [s.E, s.W] }, { side: s.E, tangents: [s.S, s.N] }, { side: s.S, tangents: [s.W, s.E] }, { side: s.W, tangents: [s.N, s.S] }]\r\ns.B.tangents = [{ side: s.S, tangents: [s.W, s.E] }, { side: s.E, tangents: [s.S, s.N] }, { side: s.N, tangents: [s.E, s.W] }, { side: s.W, tangents: [s.N, s.S] }]\r\ns.N.tangents = [{ side: s.E, tangents: [s.T, s.B] }, { side: s.T, tangents: [s.E, s.W] }, { side: s.W, tangents: [s.B, s.T] }, { side: s.B, tangents: [s.W, s.E] }]\r\ns.S.tangents = [{ side: s.W, tangents: [s.B, s.T] }, { side: s.T, tangents: [s.E, s.W] }, { side: s.E, tangents: [s.T, s.B] }, { side: s.B, tangents: [s.W, s.E] }]\r\ns.E.tangents = [{ side: s.S, tangents: [s.T, s.B] }, { side: s.T, tangents: [s.N, s.S] }, { side: s.N, tangents: [s.B, s.T] }, { side: s.B, tangents: [s.S, s.N] }]\r\ns.W.tangents = [{ side: s.N, tangents: [s.B, s.T] }, { side: s.T, tangents: [s.N, s.S] }, { side: s.S, tangents: [s.T, s.B] }, { side: s.B, tangents: [s.S, s.N] }]\r\n\r\ns.T.opposite = s.B\r\ns.B.opposite = s.T\r\ns.N.opposite = s.S\r\ns.S.opposite = s.N\r\ns.E.opposite = s.W\r\ns.W.opposite = s.E\r\n\r\nexport const Sides = {\r\n\tbyName: { TOP: s.T, BOTTOM: s.B, NORTH: s.N, SOUTH: s.S, EAST: s.E, WEST: s.W },\r\n\tbyId: [s.T, s.B, s.N, s.S, s.E, s.W],\r\n\tbyAxis: [[s.E, s.W], [s.T, s.B], [s.N, s.S]],\r\n\teach(callback: (side: SideType) => void) {\r\n\t\tfor (var sideId = 0; sideId < 6; sideId += 1) {\r\n\t\t\tcallback(Sides.byId[sideId])\r\n\t\t}\r\n\t},\r\n\t//findFromNormal(normal: v3) {\r\n\t//\treturn _.minBy(Sides.byId, side => {   // TODO: rewrite without lodash for worker?\r\n\t//\t\treturn Math.abs(side.dx - normal.x) + Math.abs(side.dy - normal.y) + Math.abs(side.dz - normal.z)\r\n\t//\t})\r\n\t//},\r\n}\r\n\r\n\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/common/geometrics.ts","const EPSILON = 0.000001\r\n\r\nexport default class v3 {\r\n\r\n\ta: Float32Array\r\n\r\n\tconstructor(x = 0, y = 0, z = 0) {\r\n\t\tthis.a = new Float32Array([ x, y, z ])\r\n\t}\r\n\tget x() { return this.a[0] }\r\n\tget y() { return this.a[1] }\r\n\tget z() { return this.a[2] }\r\n\tset x(v: number) { this.a[0] = v }\r\n\tset y(v: number) { this.a[1] = v }\r\n\tset z(v: number) { this.a[2] = v }\r\n\tclone() {\r\n\t\treturn new v3(this.a[0], this.a[1], this.a[2])\r\n\t}\r\n\tset(x: number, y: number, z: number) {\r\n\t\tthis.a[0] = x\r\n\t\tthis.a[1] = y\r\n\t\tthis.a[2] = z\r\n\t\treturn this\r\n\t}\r\n\tsetFrom(b: v3) {\r\n\t\tthis.a[0] = b.a[0]\r\n\t\tthis.a[1] = b.a[1]\r\n\t\tthis.a[2] = b.a[2]\r\n\t\treturn this\r\n\t}\r\n\tsetSum(b: v3, c: v3) {\r\n\t\tthis.a[0] = b.a[0] + c.a[0]\r\n\t\tthis.a[1] = b.a[1] + c.a[1]\r\n\t\tthis.a[2] = b.a[2] + c.a[2]\r\n\t\treturn this\r\n\t}\r\n\ttoString() {\r\n\t\treturn this.a[0] + ',' + this.a[1] + ',' + this.a[2]\r\n\t}\r\n\tget id() {\r\n\t\treturn this.a[0] + ',' + this.a[1] + ',' + this.a[2]\r\n\t}\r\n\r\n\t// operations involving no arguments\r\n\tlengthSqr() {\r\n\t\tconst ax = this.a[0], ay = this.a[1], az = this.a[2]\r\n\t\treturn ax * ax + ay * ay + az * az\r\n\t}\r\n\tlength() {\r\n\t\treturn Math.sqrt(this.lengthSqr())\r\n\t}\r\n\tceil() {\r\n\t\tthis.a[0] = Math.ceil(this.a[0])\r\n\t\tthis.a[1] = Math.ceil(this.a[1])\r\n\t\tthis.a[2] = Math.ceil(this.a[2])\r\n\t\treturn this\r\n\t}\r\n\tfloor() {\r\n\t\tthis.a[0] = Math.floor(this.a[0])\r\n\t\tthis.a[1] = Math.floor(this.a[1])\r\n\t\tthis.a[2] = Math.floor(this.a[2])\r\n\t\treturn this\r\n\t}\r\n\tnegate() {\r\n\t\tthis.a[0] = -(this.a[0])\r\n\t\tthis.a[1] = -(this.a[1])\r\n\t\tthis.a[2] = -(this.a[2])\r\n\t\treturn this\r\n\t}\r\n\tinvert() {\r\n\t\tthis.a[0] = 1 / this.a[0]\r\n\t\tthis.a[1] = 1 / this.a[1]\r\n\t\tthis.a[2] = 1 / this.a[2]\r\n\t\treturn this\r\n\t}\r\n\tnormalize() {\r\n\t\tconst lenSqr = this.lengthSqr()\r\n\t\tif (lenSqr > 0) {\r\n\t\t\tthis.multiplyScalar(1 / Math.sqrt(lenSqr))\r\n\t\t}\r\n\t\treturn this\r\n\t}\r\n\r\n\t// operations involving a scalar argument\r\n\tmultiplyScalar(scalar: number) {\r\n\t\tthis.a[0] *= scalar\r\n\t\tthis.a[1] *= scalar\r\n\t\tthis.a[2] *= scalar\r\n\t\treturn this\r\n\t}\r\n\tdivideScalar(scalar: number) {\r\n\t\tthis.a[0] /= scalar\r\n\t\tthis.a[1] /= scalar\r\n\t\tthis.a[2] /= scalar\r\n\t\treturn this\r\n\t}\r\n\r\n\t// operations involving a second vector\r\n\tadd(that: v3) {\r\n\t\tthis.a[0] += that.a[0]\r\n\t\tthis.a[1] += that.a[1]\r\n\t\tthis.a[2] += that.a[2]\r\n\t\treturn this\r\n\t}\r\n\tsubtract(that: v3) {\r\n\t\tthis.a[0] -= that.a[0]\r\n\t\tthis.a[1] -= that.a[1]\r\n\t\tthis.a[2] -= that.a[2]\r\n\t\treturn this\r\n\t}\r\n\tmultiply(that: v3) {\r\n\t\tthis.a[0] *= that.a[0]\r\n\t\tthis.a[1] *= that.a[1]\r\n\t\tthis.a[2] *= that.a[2]\r\n\t\treturn this\r\n\t}\r\n\tdivide(that: v3) {\r\n\t\tthis.a[0] /= that.a[0]\r\n\t\tthis.a[1] /= that.a[1]\r\n\t\tthis.a[2] /= that.a[2]\r\n\t\treturn this\r\n\t}\r\n\tdot(that: v3) {\r\n\t\treturn this.a[0] * that.a[0] + this.a[1] * that.a[1] + this.a[2] * that.a[2]\r\n\t}\r\n\tcross(that: v3) {\r\n\t\tconst ax = this.a[0], ay = this.a[1], az = this.a[2]\r\n\t\tconst bx = that.a[0], by = that.a[1], bz = that.a[2]\r\n\t\tthis.a[0] = ay * bz - az * by\r\n\t\tthis.a[1] = az * bx - ax * bz\r\n\t\tthis.a[2] = ax * by - ay * bx\r\n\t\treturn this\r\n\t}\r\n\tlerp(that: v3, t: number) {\r\n\t\tconst ax = this.a[0], ay = this.a[1], az = this.a[2]\r\n\t\tthis.a[0] = ay + t * (that.a[0] - ax)\r\n\t\tthis.a[1] = az + t * (that.a[1] - ay)\r\n\t\tthis.a[2] = ax + t * (that.a[2] - az)\r\n\t\treturn this\r\n\t}\r\n\texactEquals(that: v3) {\r\n\t\treturn this.a[0] === that.a[0] && this.a[1] === that.a[1] && this.a[2] === that.a[2]\r\n\t}\r\n\tequals(that: v3) {\r\n\t\tconst ax = this.a[0], ay = this.a[1], az = this.a[2]\r\n\t\tconst bx = that.a[0], by = that.a[1], bz = that.a[2]\r\n\t\treturn (Math.abs(ax - bx) <= EPSILON * Math.max(1.0, Math.abs(ax), Math.abs(bx)) &&\r\n\t\t\tMath.abs(ay - by) <= EPSILON * Math.max(1.0, Math.abs(ay), Math.abs(by)) &&\r\n\t\t\tMath.abs(az - bz) <= EPSILON * Math.max(1.0, Math.abs(az), Math.abs(bz)))\r\n\t}\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/common/v3.ts","export default class Pool<T> {\r\n\r\n\titems: Array<T>\r\n\r\n\tconstructor(private createCallback: () => T, private releaseCallback?: (T: T) => void) {\r\n\t\tthis.items = []\r\n\t}\r\n\tacquire(): T {\r\n\t\tif (this.items.length) {\r\n\t\t\treturn this.items.pop()\r\n\t\t}\r\n\t\treturn this.createCallback()\r\n\t}\r\n\trelease(item: T): void {\r\n\t\tif (this.releaseCallback) {\r\n\t\t\tthis.releaseCallback(item)\r\n\t\t}\r\n\t\tthis.items.push(item)\r\n\t}\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/common/Pool.ts","import * as geometrics from \"geometrics\"\r\n\r\nconst Sides = geometrics.Sides\r\n\r\nclass BlockType {\r\n\r\n\tid: number\r\n\tname: string\r\n\ttextureSides: Array<Array<number>>\r\n\r\n\tconstructor(id: number, name: string, tileIndex: number) {\r\n\t\tthis.id = id\r\n\t\tthis.name = name\r\n\t\tthis.textureSides = []\r\n\t\tSides.each(side => {\r\n\t\t\tthis.textureSides[side.id] = this.makeTextureSide(tileIndex)\r\n\t\t})\r\n\t}\r\n\tsetSideTile(side: geometrics.SideType, tileIndex: number) {\r\n\t\tthis.textureSides[side.id] = this.makeTextureSide(tileIndex)\r\n\t\treturn this\r\n\t}\r\n\tmakeTextureSide(tileIndex: number) {\r\n\t\tvar tu = tileIndex % 16\r\n\t\tvar tv = Math.floor(tileIndex / 16)\r\n\t\treturn [ tu, tv ]\r\n\t}\r\n}\r\n\r\ninterface BlockTypesType {\r\n\tbyId: Array<BlockType>,\r\n\tbyName: { [key: string]: BlockType },\r\n}\r\n\r\nconst BlockTypes: BlockTypesType = {\r\n\tbyId: [],\r\n\tbyName: {},\r\n}\r\nexport default BlockTypes\r\n\r\nfunction addBlockType(name: string, tileIndex: number) {\r\n\tvar id = BlockTypes.byId.length\r\n\tvar blockType = new BlockType(id, name, tileIndex)\r\n\tBlockTypes.byId[id] = blockType\r\n\tBlockTypes.byName[name] = blockType\r\n\treturn blockType\r\n}\r\n\r\naddBlockType(\"air\", 0)\r\naddBlockType(\"stone\", 1)\r\naddBlockType(\"dirt\", 2)\r\naddBlockType(\"grass\", 3).setSideTile(Sides.byName.TOP, 0).setSideTile(Sides.byName.BOTTOM, 2)\r\naddBlockType(\"planks\", 4)\r\naddBlockType(\"brick\", 7)\r\naddBlockType(\"cobble\", 16)\r\naddBlockType(\"bedrock\", 17)\r\naddBlockType(\"sand\", 18)\r\naddBlockType(\"gravel\", 19)\r\naddBlockType(\"wood\", 20).setSideTile(Sides.byName.TOP, 21).setSideTile(Sides.byName.BOTTOM, 21)\r\naddBlockType(\"gold_ore\", 32)\r\naddBlockType(\"iron_ore\", 33)\r\naddBlockType(\"coal_ore\", 34)\r\naddBlockType(\"mossy_cobble\", 36)\r\naddBlockType(\"obsidian\", 37)\r\naddBlockType(\"diamond_ore\", 50)\r\naddBlockType(\"redstone_ore\", 51)\r\naddBlockType(\"stone_brick\", 54)\r\naddBlockType(\"snow\", 66)\r\naddBlockType(\"ice\", 67)\r\naddBlockType(\"snowy_grass\", 68).setSideTile(Sides.byName.TOP, 66).setSideTile(Sides.byName.BOTTOM, 2)\r\naddBlockType(\"fungus\", 77).setSideTile(Sides.byName.TOP, 78).setSideTile(Sides.byName.BOTTOM, 2)\r\naddBlockType(\"mossy_stone_brick\", 100)\r\naddBlockType(\"cracked_stone_brick\", 101)\r\naddBlockType(\"sandstone\", 192).setSideTile(Sides.byName.TOP, 176).setSideTile(Sides.byName.BOTTOM, 176)\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/common/BlockTypes.ts","import * as geometrics from \"geometrics\"\r\nimport Pool from \"Pool\"\r\n\r\nfunction createPool(): Pool<geometrics.VertexArrayType> {\r\n\treturn new Pool(() => {\r\n\t\treturn new Uint32Array(geometrics.maxQuadsPerMesh * geometrics.quadVertexByteSize)\r\n\t})\r\n}\r\n\r\nexport default {\r\n\tmainPool: createPool(),\r\n\tacquire(): geometrics.VertexArrayType {\r\n\t\treturn this.mainPool.acquire()\r\n\t},\r\n\trelease(vertexArray: geometrics.VertexArrayType) {\r\n\t\tthis.mainPool.release(vertexArray)\r\n\t},\r\n\tcreatePrefilledPool(existingItems: Array<geometrics.VertexArrayType>): Pool<geometrics.VertexArrayType> {\r\n\t\tconst pool = createPool()\r\n\t\tpool.items = existingItems\r\n\t\treturn pool\r\n\t},\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/client/engine/chunk/EngineChunkVertexArrayPool.ts","import * as geometrics from \"geometrics\"\r\nimport Pool from \"Pool\"\r\nimport v3 from \"v3\"\r\n\r\nexport default class ChunkData {\r\n\r\n\tpos: v3\r\n\tid: string\r\n\tblocks: Uint8Array\r\n\tchunkLoaderTag: number\r\n\tchunkLoaderUnloading: boolean\r\n\r\n\tconstructor() {\r\n\t\tthis.pos = new v3()\r\n\t\tthis.id = \"NaN,NaN,NaN\"\r\n\t\tthis.blocks = new Uint8Array(geometrics.CHUNK_SIZE_CUBED)\r\n\t}\r\n\tsetChunkPos(chunkPos: v3) {\r\n\t\tthis.pos.setFrom(chunkPos)\r\n\t\tthis.id = chunkPos.toString()\r\n\t}\r\n\r\n\tstatic pool: Pool<ChunkData> = new Pool(() => {\r\n\t\treturn new ChunkData()\r\n\t})\r\n}\r\n\r\n//export const pool = new Pool(() => new ChunkData(), () => {})\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/client/ChunkData.ts","import DebugFrameLogger from \"../DebugFrameLogger\"\r\n\r\n\r\n/*\r\n\tUSAGE\r\n\t=====\r\n\r\n\t// main script\r\n\r\n\tconst taskId = WorkerManager.queueTask(\r\n\t\t\"taskType1\",\r\n\t\t() => { // onStart\r\n\t\t\tconst payload: WorkerPayload = { \"foo\": \"bar\", \"array\": myUInt8Array }\r\n\t\t\tconst transferableObjects: Array<any> = [ myUInt8Array ]\r\n\t\t\treturn { payload, transferableObjects }\r\n\t\t},\r\n\t\t(payload: WorkerPayload) => {\r\n\t\t\tconsole.log(payload)\r\n\t\t}\r\n\t)\r\n\r\n\t// worker script\r\n\r\n\tWorkerObligation({\r\n\t\t\"taskType1\": (requestPayload, responseCallback) => {\r\n\t\t\tconst responsePayload: WorkerPayload = { \"foo\": \"bar\", \"array\": myUInt8Array }\r\n\t\t\tconst transferableObjects: Array<any> = [ myUInt8Array ]\r\n\t\t\tresponseCallback(responsePayload, transferableObjects)\r\n\t\t},\r\n\t\t\"taskType1.cancel\": () => {}, // unimplemented\r\n\t})\r\n\r\n*/\r\n\r\nexport type WorkerPayload = { taskId?: number, taskType?: string, [key: string]: any }\r\nexport type WorkerOnStart = () => { requestPayload: WorkerPayload, transferableObjects: Array<any> } | undefined\r\nexport type WorkerOnComplete = (responsePayload: WorkerPayload) => void\r\n\r\nexport class WorkerController {\r\n\r\n\tactiveTaskId: number\r\n\tactiveTaskType: string\r\n\tonResponse: WorkerOnComplete\r\n\r\n\tconstructor(public worker: Worker, public workerId: number) {\r\n\t\tthis.worker.addEventListener('message', (e: MessageEvent) => {\r\n\t\t\tconst responsePayload: WorkerPayload = e.data\r\n\t\t\tif (responsePayload.taskId !== this.activeTaskId) { return } // old job? ignore response\r\n\t\t\tif (!this.onResponse) { return } // already called onResponse once? ignore response\r\n\r\n\t\t\t// clear this.onResponse before calling it, since it may start this worker again\r\n\t\t\tconst onResponse = this.onResponse\r\n\t\t\tthis.onResponse = undefined\r\n\t\t\tonResponse(responsePayload)\r\n\t\t})\r\n\t}\r\n\tstart(taskId: number, taskType: string, requestPayload: WorkerPayload, transferableObjects: Array<any>, onResponse: WorkerOnComplete) {\r\n\t\tthis.onResponse = onResponse\r\n\t\tthis.activeTaskId = taskId\r\n\t\tthis.activeTaskType = taskType\r\n\t\trequestPayload.taskId = taskId\r\n\t\trequestPayload.taskType = taskType\r\n\t\tthis.worker.postMessage(requestPayload, transferableObjects) // transfer with \"Transferable Objects\"\r\n\t}\r\n\tcancel() {\r\n\t\t// this may safely be ignored by the worker\r\n\t\tthis.worker.postMessage({ cancelTask: this.activeTaskId })\r\n\t}\r\n}\r\n\r\n\r\n\r\n// WorkerManager\r\n// =============\r\n\r\ntype Task = {\r\n\ttaskId: number,\r\n\ttaskType: string,\r\n\tassignedWorkerId?: number,\r\n\tcancelled?: boolean,\r\n\tonStart: WorkerOnStart,\r\n\tonComplete: WorkerOnComplete,\r\n\tonCancelled: WorkerOnComplete,\r\n}\r\n\r\nlet taskIdCounter: number = 0\r\nconst activeTasksByWorkerId: { [key: number]: Task } = {}\r\nlet workerControllers: Array<WorkerController> = []\r\nconst inactiveWorkerControllers: Array<WorkerController> = []\r\nconst queuedTasks: Array<Task> = []\r\n\r\n// initialize workers\r\nexport function init(workerControllers_: Array<WorkerController>) {\r\n\tworkerControllers = workerControllers_\r\n\tworkerControllers.forEach(workerController => {\r\n\t\tinactiveWorkerControllers.push(workerController)\r\n\t})\r\n}\r\n\r\nexport function queueTask(taskType: string, onStart: WorkerOnStart, onComplete: WorkerOnComplete, onCancelled: WorkerOnComplete) {\r\n\ttaskIdCounter += 1\r\n\tconst taskId = taskIdCounter // unique taskId\r\n\tconst task: Task = { taskId, taskType, onStart, onComplete, onCancelled }\r\n\tqueuedTasks.push(task)\r\n\tprocessQueue()\r\n\treturn taskId\r\n}\r\n\r\nfunction processQueue() {\r\n\twhile (inactiveWorkerControllers.length > 0 && queuedTasks.length > 0) {\r\n\t\tconst task = queuedTasks.shift()\r\n\t\tconst worker = inactiveWorkerControllers.pop()\r\n\t\ttask.assignedWorkerId = worker.workerId\r\n\t\tstartWorker(worker, task)\r\n\t}\r\n}\r\n\r\nfunction startWorker(worker: WorkerController, task: Task) {\r\n\t//DebugFrameLogger(\"WorkerManager.startWorker\")\r\n\r\n\tconst startResponse = task.onStart()\r\n\tif (!startResponse) { return } // task was cancelled by onStart\r\n\tconst { requestPayload, transferableObjects } = startResponse\r\n\r\n\tactiveTasksByWorkerId[task.taskId] = task\r\n\r\n\tworker.start(task.taskId, task.taskType, requestPayload, transferableObjects, (responsePayload: WorkerPayload) => {\r\n\t\t//DebugFrameLogger(\"WorkerManager worker response\")\r\n\t\tdelete activeTasksByWorkerId[task.taskId]\r\n\t\tinactiveWorkerControllers.push(worker)\r\n\t\tprocessQueue() // now that this worker's free, assign another task to it if one is available!\r\n\t\tif (task.cancelled) {\r\n\t\t\ttask.onCancelled(responsePayload)\r\n\t\t}\r\n\t\telse {\r\n\t\t\ttask.onComplete(responsePayload)\r\n\t\t}\r\n\t})\r\n}\r\n\r\nexport function cancelTask(taskId: number): boolean {\r\n\t// if the task is still in the queue, simply remove it (we never called onStart, so according to our contract, we don't need to call onComplete)\r\n\t// aka: const taskFromQueue = _.remove(queuedTasks, (task: Task) => task.taskId === taskId)\r\n\tlet taskFromQueue\r\n\tfor (let i = 0; i < queuedTasks.length; i += 1) {\r\n\t\tlet task = queuedTasks[i]\r\n\t\tif (task.taskId === taskId) {\r\n\t\t\ttaskFromQueue = task\r\n\t\t\tqueuedTasks.splice(i, 1)\r\n\t\t\tbreak\r\n\t\t}\r\n\t}\r\n\tif (taskFromQueue) {\r\n\t\treturn true\r\n\t}\r\n\t// otherwise, we need to stop an active worker...\r\n\tconst task = activeTasksByWorkerId[taskId]\r\n\tif (task) {\r\n\t\tconst workerController: WorkerController = workerControllers[task.assignedWorkerId]\r\n\t\tworkerController.cancel() // fire off the cancel message and continue waiting for a reply... (since we don't want to overload a worker that's still working)\r\n\t\ttask.cancelled = true // we will ignore the reply\r\n\t}\r\n\telse {\r\n\t\tdebugger\r\n\t}\r\n\treturn false\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/client/worker/WorkerManager.ts","import * as geometrics from \"geometrics\"\r\nimport BlockTypes from \"BlockTypes\"\r\nimport BlockPos from \"BlockPos\"\r\nimport * as EngineChunkQuadWriter from \"./EngineChunkQuadWriter\"\r\nimport EngineChunkVertexArrayPool from \"./EngineChunkVertexArrayPool\"\r\nimport v3 from \"v3\"\r\nimport Pool from \"Pool\"\r\nimport EngineChunk from \"client/engine/chunk/EngineChunk\";\r\n\r\n\r\nconst occludedBrightnesses = [1, 0.7, 0.7, 0.6, 0.5, 0.5]\r\n//const occludedBrightnesses = [1, 0.5, 0.5, 0.2, 0.1, 0.1] // HIGH CONTRAST MODE\r\n\r\nconst edgeOccludingBlockPos = new BlockPos(undefined, new v3(0, 0, 0))\t // optimization: keep these around for repeated calls to calculateVertexColours\r\nconst cornerOccludingBlockPos = new BlockPos(undefined, new v3(0, 0, 0))\t // optimization: keep these around for repeated calls to calculateVertexColours\r\n\r\nfunction calculateVertexColours(airBlockPos: BlockPos, side: geometrics.SideType) {\r\n\r\n\t// determine ambient occlusion\r\n\tconst brightnesses = [0, 0, 0, 0]\r\n\r\n\t// check for occlusion at right angles to the block's normal\r\n\tfor (let tangentIndex = 0; tangentIndex < 4; tangentIndex += 1) {\r\n\t\tconst tangentSide = side.tangents[tangentIndex].side\r\n\r\n\t\tedgeOccludingBlockPos.setAdjacentToBlockPos(airBlockPos, tangentSide)\r\n\t\tif (!edgeOccludingBlockPos.blockDataSource) { continue }\r\n\r\n\t\tif (!edgeOccludingBlockPos.isTransparent()) {\r\n\t\t\tbrightnesses[tangentIndex] += 2\r\n\t\t\tbrightnesses[(tangentIndex + 1) % 4] += 2\r\n\t\t}\r\n\r\n\t\t// right angle again to find the diagonal\r\n\t\t// n.b. anisotropy warning: it's possible that the edge occluding block is unloaded, but the diagonal is loaded, and we are only turning right!\r\n\t\tconst diagonalTangentSide = side.tangents[(tangentIndex + 1) % 4].side\r\n\r\n\t\tcornerOccludingBlockPos.setAdjacentToBlockPos(edgeOccludingBlockPos, diagonalTangentSide)\r\n\t\tif (!cornerOccludingBlockPos.blockDataSource) { continue }\r\n\r\n\t\tif (!cornerOccludingBlockPos.isTransparent()) {\r\n\t\t\tbrightnesses[(tangentIndex + 1) % 4] += 1\r\n\t\t}\r\n\t}\r\n\r\n\tfor (let i = 0; i < 4; i += 1) {\r\n\t\tbrightnesses[i] = occludedBrightnesses[brightnesses[i]]\r\n\t}\r\n\r\n\treturn brightnesses\r\n}\r\n\r\n\r\n\r\nclass ChunkPrewriter {\r\n\r\n\tquadCount: number\r\n\tvertexArrays: Array<geometrics.VertexArrayType>\r\n\tcurrentVertexArray: geometrics.VertexArrayType\r\n\r\n\tconstructor(private blockData: Uint8Array, private quadIdsByBlockAndSide: Uint16Array, private vertexArrayPool: Pool<geometrics.VertexArrayType>) {\r\n\t\tthis.quadCount = 0\r\n\t\tthis.vertexArrays = []\r\n\t\tthis.currentVertexArray = undefined\r\n\t}\r\n\taddVertexArray() {\r\n\t\tvar vertexArray: geometrics.VertexArrayType = new Uint32Array(this.vertexArrayPool.acquire())\r\n\t\tthis.vertexArrays.push(vertexArray)\r\n\t\treturn vertexArray\r\n\t}\r\n\taddQuad(blockPos: BlockPos, side: geometrics.SideType, uvs: Array<number>, brightnesses: Array<number>) {\r\n\t\tvar quadId = this.quadCount\r\n\t\tthis.quadCount += 1\r\n\t\tif (this.quadCount > this.vertexArrays.length * geometrics.maxQuadsPerMesh) {\r\n\t\t\tthis.currentVertexArray = this.addVertexArray()\r\n\t\t}\r\n\t\tEngineChunkQuadWriter.drawQuad(this.currentVertexArray, quadId % geometrics.maxQuadsPerMesh, blockPos, side, uvs, brightnesses)\r\n\t\tthis.quadIdsByBlockAndSide[blockPos.i * 6 + side.id] = quadId + 1 // add one so we can use 0 as an indicator that no quad was written\r\n\t}\r\n\r\n\r\n\tdrawInternalChunkQuads() {\r\n\t\tvar solidBlockPos = new BlockPos(undefined, new v3(0, 0, 0), this.blockData)\r\n\t\tvar airBlockPos = new BlockPos(undefined, new v3(0, 0, 0), this.blockData)\r\n\r\n\t\tsolidBlockPos.eachBlockInChunk(() => {\r\n\t\t\t\r\n\t\t\tif (!solidBlockPos.isTransparent()) {\r\n\r\n\t\t\t\tgeometrics.Sides.each(side => {\r\n\r\n\t\t\t\t\tairBlockPos.setAdjacentToBlockPos(solidBlockPos, side)\r\n\r\n\t\t\t\t\tif (airBlockPos.blockDataSource) { // still within the same chunk\r\n\r\n\t\t\t\t\t\tvar adjacentIsTransparent = airBlockPos.isTransparent()\r\n\t\t\t\t\t\tif (adjacentIsTransparent) {\r\n\r\n\t\t\t\t\t\t\tvar blockType = BlockTypes.byId[this.blockData[solidBlockPos.i]]\r\n\t\t\t\t\t\t\tvar uvs = blockType.textureSides[side.id]\r\n\r\n\t\t\t\t\t\t\t// determine vertex colours (AO)\r\n\t\t\t\t\t\t\tvar brightnesses = calculateVertexColours(airBlockPos, side)\r\n\r\n\t\t\t\t\t\t\tthis.addQuad(solidBlockPos, side, uvs, brightnesses)\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n\r\n}\r\n\r\nexport default {\r\n\tdrawInternalChunkQuads(\r\n\t\tblockData: Uint8Array,\r\n\t\tquadIdsByBlockAndSide: Uint16Array,\r\n\t\treusableVertexArrays: Array<geometrics.VertexArrayType> = []\r\n\t): {\r\n\t\tquadCount: number,\r\n\t\tvertexArrays: Array<geometrics.VertexArrayType>,\r\n\t\tunusedVertexArrays: Array<geometrics.VertexArrayType>,\r\n\t} {\r\n\r\n\t\tconst vertexArrayPool = EngineChunkVertexArrayPool.createPrefilledPool(reusableVertexArrays)\r\n\r\n\t\tconst prewriter = new ChunkPrewriter(blockData, quadIdsByBlockAndSide, vertexArrayPool)\r\n\t\tprewriter.drawInternalChunkQuads()\r\n\t\tconst quadCount = prewriter.quadCount\r\n\t\tconst vertexArrays = prewriter.vertexArrays\r\n\t\tconst unusedVertexArrays = vertexArrayPool.items\r\n\r\n\t\treturn { quadCount, vertexArrays, unusedVertexArrays }\r\n\t},\r\n\r\n\tunstitchChunk(chunk: EngineChunk, side: geometrics.SideType) {\r\n\t\tconst blockPos = new BlockPos()\r\n\t\tblockPos.eachBlockOnFace(chunk, side, () => {\r\n\t\t\tchunk.removeQuad(blockPos, side)\r\n\t\t})\r\n\t},\r\n\r\n\tstitchChunks(newCenterChunk: EngineChunk) {\r\n\t\t// requirements:\r\n\t\t//   - add quads on both sides of the 6 adjacent \"face\" neighbour chunks, if required (i.e. solid and air boundary)\r\n\t\t//   - update AO on both sides of the 6 adjacent \"face\" neighbour chunks, for faces which are perpendicular\r\n\t\t//   (adjacent to the 6 adjacent \"face\" neighbour chunks are the 12 \"edge\" chunks, which share an edge with the center chunk)\r\n\t\t//   - update AO for the \"edge\" chunks for all blocks along the edge which face toward the center chunk on either axis\r\n\t\t//   (adjacent to the 12 \"edge\" chunks are 8 \"corner\" chunks, which share a corner with the center chunk)\r\n\t\t//   - update AO for the \"corner\" chunks's single corner blocks, which face toward the center chunk on any axis\r\n\t\t//   (e.g. consider the grass block at (0, 31, 0) : the air block above it is in chunk (0,1,0), but AO also depends on blocks in chunks (-1,1,0), (0,1,-1) AND (-1,1,-1))\r\n\t\t\r\n\t\t// the following strategy explores all adjacent chunks once in a 3x3x3 cube, but is anisotropic:\r\n\t\t//   - first, xyz explores a \"tie fighter\" shape\r\n\t\t//   - next, yz adds an \"I beam\", leaving an \"upright bagel with cream cheese\" shape\r\n\t\t//   - finally, z fills in the last two spots\r\n\t\t// as more chunks get filled in, these anisotropic AO errors should disappear; with the camera far away from the edges of the loading chunks, this should not affect the player\r\n\r\n\t\tconst aoAirBlockPos = new BlockPos(undefined, new v3(0, 0, 0))\t // optimization\r\n\t\t\r\n\t\tfunction fixAO(solidBlockPos: BlockPos, side: geometrics.SideType) {\r\n\t\t\tconst quadId = solidBlockPos.getQuadId(side)\r\n\t\t\tif (quadId >= 0) {\r\n\t\t\t\tconst blockTypeId = solidBlockPos.getBlockData()\r\n\t\t\t\tconst blockType = BlockTypes.byId[blockTypeId]\r\n\t\t\t\tconst uvs = blockType.textureSides[side.id]\r\n\t\t\t\taoAirBlockPos.setAdjacentToBlockPos(solidBlockPos, side)\r\n\t\t\t\tconst brightnesses = calculateVertexColours(aoAirBlockPos, side)\r\n\t\t\t\tsolidBlockPos.engineChunk.updateQuadAO(solidBlockPos, side, uvs, brightnesses)\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfunction addFace(solidBlockPos: BlockPos, airBlockPos: BlockPos, side: geometrics.SideType) {\r\n\t\t\t//console.log(`addFace for ${solidBlockPos.toString()} (${solidBlockPos.engineChunk.chunkData.pos.toString()}) facing ${side.name}: i.e. ${airBlockPos.toString()} (${airBlockPos.engineChunk.chunkData.pos.toString()})`)\r\n\t\t\tconst blockTypeId = solidBlockPos.getBlockData()\r\n\t\t\tconst blockType = BlockTypes.byId[blockTypeId]\r\n\t\t\tconst uvs = blockType.textureSides[side.id]\r\n\t\t\tconst brightnesses = calculateVertexColours(airBlockPos, side)\r\n\t\t\tsolidBlockPos.engineChunk.addQuad(solidBlockPos, side, uvs, brightnesses)\r\n\t\t}\r\n\t\t\r\n\t\tconst nearBlockPos = new BlockPos()\r\n\t\tconst farBlockPos = new BlockPos()\r\n\r\n\t\t// for each face...\r\n\t\tfor (let axis1 = 0; axis1 < 3; axis1 += 1) {\r\n\t\t\tfor (let sideIndex1 = 0; sideIndex1 < 2; sideIndex1 += 1) {\r\n\t\t\t\tconst side1 = geometrics.Sides.byAxis[axis1][sideIndex1]\r\n\t\t\t\tconst faceNeighbourChunk = newCenterChunk.neighboursBySideId[side1.id]\r\n\t\t\t\tif (faceNeighbourChunk) {\r\n\r\n\t\t\t\t\t//console.log(`stitching ${newCenterChunk.id} on ${side1.name} to ${faceNeighbourChunk.id}`)\r\n\r\n\t\t\t\t\t// add quads and update perpendicular AO\r\n\t\t\t\t\tnearBlockPos.eachBlockOnFace(newCenterChunk, side1, () => {\r\n\t\t\t\t\t\tfarBlockPos.setAdjacentToBlockPos(nearBlockPos, side1)\r\n\r\n\t\t\t\t\t\t// add quads\r\n\t\t\t\t\t\tconst nearIsTransparent = nearBlockPos.isTransparent()\r\n\t\t\t\t\t\tconst farIsTransparent = farBlockPos.isTransparent()\r\n\t\t\t\t\t\tif (!nearIsTransparent && farIsTransparent) {\r\n\t\t\t\t\t\t\t// add quad at nearBlockPos facing side1\r\n\t\t\t\t\t\t\taddFace(nearBlockPos, farBlockPos, side1)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if (!farIsTransparent && nearIsTransparent) {\r\n\t\t\t\t\t\t\t// add quad at farBlockPos facing side1.opposite\r\n\t\t\t\t\t\t\taddFace(farBlockPos, nearBlockPos, side1.opposite) // problem?\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// update AO\r\n\t\t\t\t\t\tfor (let i = 0; i < side1.tangents.length; i += 1) {\r\n\t\t\t\t\t\t\tconst tangentSide = side1.tangents[i].side\r\n\t\t\t\t\t\t\tfixAO(nearBlockPos, tangentSide)\r\n\t\t\t\t\t\t\tfixAO(farBlockPos, tangentSide)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\r\n\t\t\t\t\t// for each edge...\r\n\t\t\t\t\tfor (let axis2 = axis1 + 1; axis2 < 3; axis2 += 1) {\r\n\t\t\t\t\t\tfor (let sideIndex2 = 0; sideIndex2 < 2; sideIndex2 += 1) {\r\n\t\t\t\t\t\t\tconst side2 = geometrics.Sides.byAxis[axis2][sideIndex2]\r\n\t\t\t\t\t\t\tconst edgeNeighbourChunk = faceNeighbourChunk.neighboursBySideId[side2.id]\r\n\t\t\t\t\t\t\tif (edgeNeighbourChunk) {\r\n\r\n\t\t\t\t\t\t\t\t// update AO of blocks along edge of edgeNeighbourChunk\r\n\t\t\t\t\t\t\t\tfarBlockPos.eachBlockOnEdge(edgeNeighbourChunk, side1, side2, () => {\r\n\t\t\t\t\t\t\t\t\tfixAO(farBlockPos, side1.opposite)\r\n\t\t\t\t\t\t\t\t\tfixAO(farBlockPos, side2.opposite)\r\n\t\t\t\t\t\t\t\t\tconst tangentAxis = 3 - side1.axis - side2.axis\r\n\t\t\t\t\t\t\t\t\tfixAO(farBlockPos, geometrics.Sides.byAxis[tangentAxis][0])\r\n\t\t\t\t\t\t\t\t\tfixAO(farBlockPos, geometrics.Sides.byAxis[tangentAxis][1])\r\n\t\t\t\t\t\t\t\t})\r\n\r\n\t\t\t\t\t\t\t\t// for each corner...\r\n\t\t\t\t\t\t\t\tif (axis2 !== 2) {\r\n\t\t\t\t\t\t\t\t\tconst axis3 = 2 // the only remaining axis\r\n\t\t\t\t\t\t\t\t\tfor (let sideIndex3 = 0; sideIndex3 < 2; sideIndex3 += 1) {\r\n\t\t\t\t\t\t\t\t\t\tconst side3 = geometrics.Sides.byAxis[axis3][sideIndex3]\r\n\t\t\t\t\t\t\t\t\t\tconst cornerNeighbourChunk = edgeNeighbourChunk.neighboursBySideId[side3.id]\r\n\t\t\t\t\t\t\t\t\t\tif (cornerNeighbourChunk) {\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t// update AO of single block at corner of cornerNeighbourChunk\r\n\t\t\t\t\t\t\t\t\t\t\tfarBlockPos.setBlockOnCorner(cornerNeighbourChunk, side1, side2, side3)\r\n\t\t\t\t\t\t\t\t\t\t\tfixAO(farBlockPos, side1.opposite)\r\n\t\t\t\t\t\t\t\t\t\t\tfixAO(farBlockPos, side2.opposite)\r\n\t\t\t\t\t\t\t\t\t\t\tfixAO(farBlockPos, side3.opposite)\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/client/engine/chunk/EngineChunkBuilder.ts","import * as WorkerObligation from \"./worker/WorkerObligation\"\r\nimport TaskDrawInternalVerts from \"./worker/TaskDrawInternalVerts\"\r\nimport TaskGenerateAndMeshChunk from \"./worker/TaskGenerateAndMeshChunk\"\r\n\r\n//importScripts('https://unpkg.com/lodash@4.17.4/lodash.js')\r\n\r\nWorkerObligation.registerTaskHandlers([\r\n\tTaskDrawInternalVerts,\r\n\tTaskGenerateAndMeshChunk,\r\n])\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/client/worker.ts","export type WorkerPayload = { taskId?: number, taskType?: string, [key: string]: any }\r\nexport type ResponseCallback = (responsePayload: WorkerPayload, transferableObjects: Array<any>) => void\r\nexport interface TaskHandler { id: string, work: (requestPayload: WorkerPayload, responseCallback: ResponseCallback) => void }\r\n\r\nexport function registerTaskHandlers(taskHandlersArray: Array<TaskHandler>) {\r\n\tconst ctx: Worker = self as any\r\n\tlet activeTaskId: number\r\n\tlet activeTaskType: string\r\n\r\n\tconst taskHandlersByType: { [key: string]: TaskHandler } = {}\r\n\ttaskHandlersArray.forEach(taskHandler => { taskHandlersByType[taskHandler.id] = taskHandler })\r\n\r\n\tctx.addEventListener(\"message\", (event) => {\r\n\t\tconst requestPayload: WorkerPayload = event.data\r\n\r\n\t\tif (requestPayload.cancelTask) {\r\n\t\t\t//console.log(\"worker task cancelled (but unable to stop non-incremental task)\")\r\n\t\t}\r\n\t\telse if (activeTaskId) {\r\n\t\t\tconsole.error(`Worker was messaged to start a new task before finishing the previous task!?`)\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// start a new task!\r\n\t\t\tactiveTaskId = requestPayload.taskId\r\n\t\t\tactiveTaskType = requestPayload.taskType\r\n\r\n\t\t\tconst taskHandler = taskHandlersByType[activeTaskType]\r\n\t\t\ttaskHandler.work(requestPayload, (responsePayload, transferableObjects) => {\r\n\t\t\t\tresponsePayload.taskId = activeTaskId\r\n\t\t\t\tactiveTaskId = undefined\r\n\t\t\t\tactiveTaskType = undefined\r\n\t\t\t\tctx.postMessage(responsePayload, transferableObjects)\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t})\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/client/worker/WorkerObligation.ts","import ChunkData from \"../ChunkData\"\r\nimport * as WorkerManager from \"./WorkerManager\"\r\nimport * as WorkerObligation from \"./WorkerObligation\"\r\nimport * as geometrics from \"geometrics\"\r\nimport v3 from \"v3\"\r\nimport EngineChunkBuilder from \"../engine/chunk/EngineChunkBuilder\"\r\nimport EngineChunkVertexArrayPool from \"../engine/chunk/EngineChunkVertexArrayPool\"\r\nimport Pool from \"Pool\"\r\n\r\nconst TASK_TYPE_ID = \"TaskDrawInternalVerts\"\r\n\r\nexport default {\r\n\tid: TASK_TYPE_ID,\r\n\tcancel(taskId: number) {\r\n\t\tWorkerManager.cancelTask(taskId)\r\n\t},\r\n\tqueue(\r\n\t\tchunkData: ChunkData,\r\n\t\tquadIdsByBlockAndSidePool: Pool<Uint16Array>,\r\n\t\tonComplete: (quadCount: number, vertexArrays: Array<geometrics.VertexArrayType>, quadIdsByBlockAndSide: Uint16Array) => void\r\n\t) {\r\n\t\tconst taskId = WorkerManager.queueTask(\r\n\t\t\tTASK_TYPE_ID,\r\n\t\t\t() => {\r\n\r\n\t\t\t\tconst quadIdsByBlockAndSide = quadIdsByBlockAndSidePool.acquire()\r\n\t\t\t\tconst initialVertexArrays = [ EngineChunkVertexArrayPool.acquire() ]\r\n\r\n\t\t\t\tconst requestPayload = {\r\n\t\t\t\t\tblockData: chunkData.blocks.buffer,\r\n\t\t\t\t\tquadIdsByBlockAndSide: quadIdsByBlockAndSide.buffer,\r\n\t\t\t\t\tinitialVertexArrays: initialVertexArrays.map(a => a.buffer),\r\n\t\t\t\t}\r\n\t\t\t\tconst transferableObjects = [\r\n\t\t\t\t\tchunkData.blocks.buffer,\r\n\t\t\t\t\tquadIdsByBlockAndSide.buffer,\r\n\t\t\t\t\t...(initialVertexArrays.map(a => a.buffer))\r\n\t\t\t\t]\r\n\t\t\t\treturn { requestPayload, transferableObjects }\r\n\t\t\t},\r\n\t\t\t(completePayload: WorkerManager.WorkerPayload) => {\r\n\r\n\t\t\t\tchunkData.blocks = new Uint8Array(completePayload.blockData)\r\n\r\n\t\t\t\tconst unusedVertexArrays = completePayload.unusedVertexArrays.map(buffer => new Uint32Array(buffer))\r\n\t\t\t\tunusedVertexArrays.forEach(vertexArray => {\r\n\t\t\t\t\tEngineChunkVertexArrayPool.release(vertexArray)\r\n\t\t\t\t})\r\n\r\n\t\t\t\tonComplete(\r\n\t\t\t\t\t<number>completePayload.quadCount,\r\n\t\t\t\t\tcompletePayload.vertexArrays.map(buffer => new Uint32Array(buffer)),\r\n\t\t\t\t\tnew Uint16Array(completePayload.quadIdsByBlockAndSide)\r\n\t\t\t\t)\r\n\r\n\t\t\t},\r\n\t\t\t(cancelledPayload: WorkerManager.WorkerPayload) => {\r\n\t\t\t\tchunkData.blocks = new Uint8Array(cancelledPayload.blockData)\r\n\t\t\t\tChunkData.pool.release(chunkData) // the only reason this task is cancelled is if we're unloading the chunk\r\n\r\n\t\t\t\tconst cancelledQuadIdsByBlockAndSide = new Uint16Array(cancelledPayload.quadIdsByBlockAndSide)\r\n\t\t\t\tconst unusedVertexArrays = cancelledPayload.unusedVertexArrays.map(buffer => new Uint32Array(buffer))\r\n\t\t\t\tunusedVertexArrays.forEach(vertexArray => {\r\n\t\t\t\t\tEngineChunkVertexArrayPool.release(vertexArray)\r\n\t\t\t\t})\r\n\t\t\t\tconst vertexArrays = cancelledPayload.vertexArrays.map(buffer => new Uint32Array(buffer))\r\n\t\t\t\tvertexArrays.forEach(vertexArray => {\r\n\t\t\t\t\tEngineChunkVertexArrayPool.release(vertexArray)\r\n\t\t\t\t})\r\n\t\t\t\tquadIdsByBlockAndSidePool.release(cancelledQuadIdsByBlockAndSide)\r\n\t\t\t}\r\n\t\t)\r\n\t\treturn taskId\r\n\t},\r\n\twork(requestPayload, responseCallback) {\r\n\t\t// get request\r\n\t\tconst blockData: Uint8Array = new Uint8Array(requestPayload.blockData)\r\n\t\tconst quadIdsByBlockAndSide: Uint16Array = new Uint16Array(requestPayload.quadIdsByBlockAndSide)\r\n\t\tconst initialVertexArrays: Array<geometrics.VertexArrayType> = requestPayload.initialVertexArrays.map(buffer => new Uint32Array(buffer))\r\n\r\n\t\t// process request\r\n\t\tquadIdsByBlockAndSide.fill(0)\r\n\t\tconst { quadCount, vertexArrays, unusedVertexArrays } = EngineChunkBuilder.drawInternalChunkQuads(blockData, quadIdsByBlockAndSide, initialVertexArrays)\r\n\r\n\t\t// respond\r\n\t\tconst responsePayload: WorkerObligation.WorkerPayload = {\r\n\t\t\tblockData: blockData.buffer,\r\n\t\t\tquadCount,\r\n\t\t\tvertexArrays: vertexArrays.map(arr => arr.buffer),\r\n\t\t\tquadIdsByBlockAndSide: quadIdsByBlockAndSide.buffer,\r\n\t\t\tunusedVertexArrays: unusedVertexArrays.map(arr => arr.buffer),\r\n\t\t}\r\n\t\tconst transferableObjects: Array<any> = [\r\n\t\t\tblockData.buffer,\r\n\t\t\tquadIdsByBlockAndSide.buffer,\r\n\t\t\t...(vertexArrays.map(arr => arr.buffer)),\r\n\t\t\t...(unusedVertexArrays.map(arr => arr.buffer)),\r\n\t\t]\r\n\t\tresponseCallback(responsePayload, transferableObjects)\r\n\t},\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/client/worker/TaskDrawInternalVerts.ts","import * as geometrics from \"geometrics\"\r\nimport v3 from \"v3\"\r\nimport BlockTypes from \"./BlockTypes\"\r\nimport EngineChunk from \"client/engine/chunk/EngineChunk\"\r\n\r\nexport default class BlockPos {\r\n\r\n\tengineChunk: EngineChunk\r\n\tpos: v3\r\n\tblockDataOverride: Uint8Array\r\n\ti: number\r\n\r\n\tconstructor(engineChunk?: EngineChunk, pos?: v3, blockDataOverride?: Uint8Array) {\r\n\t\tthis.engineChunk = engineChunk\r\n\t\tthis.pos = pos ? pos.clone() : new v3()\r\n\t\tthis.blockDataOverride = blockDataOverride\r\n\t\tthis.recalculateIndex()\r\n\t}\r\n\tclone() {\r\n\t\treturn new BlockPos(this.engineChunk, this.pos)\r\n\t}\r\n\trecalculateIndex() {\r\n\t\tconst a = this.pos.a\r\n\t\tthis.i = a[0] * geometrics.CHUNK_SIZE_SQUARED + a[2] * geometrics.CHUNK_SIZE + a[1]\r\n\t}\r\n\tget blockDataSource(): Uint8Array {\r\n\t\treturn this.engineChunk ? this.engineChunk.chunkData.blocks : this.blockDataOverride\r\n\t}\r\n\r\n\tgetQuadId(side: geometrics.SideType) {\r\n\t\treturn (this.engineChunk ? this.engineChunk.quadIdsByBlockAndSide[this.i * 6 + side.id] - 1 : -1)\r\n\t}\r\n\tgetWorldPoint(outV3: v3) {\r\n\t\toutV3.setFrom(this.engineChunk.worldPos).multiplyScalar(geometrics.CHUNK_SIZE).add(this.pos)\r\n\t}\r\n\tgetBlockData() {\r\n\t\tif (this.engineChunk) {\r\n\t\t\treturn this.engineChunk.chunkData.blocks[this.i]\r\n\t\t}\r\n\t\telse if (this.blockDataOverride) {\r\n\t\t\treturn this.blockDataOverride[this.i]\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn 0\r\n\t\t}\r\n\t}\r\n\tgetBlockType() {\r\n\t\treturn BlockTypes.byId[this.getBlockData()]\r\n\t}\r\n\tisOpaque() {\r\n\t\treturn this.getBlockData() !== 0\r\n\t}\r\n\tisTransparent() {\r\n\t\treturn this.getBlockData() === 0\r\n\t}\r\n\t//setBlockData(newBlockData) {\r\n\t//\tthis.chunk.alterOneBlock(this, newBlockData)\r\n\t//}\r\n\tsetAdjacentToBlockPos(refBlockPos: BlockPos, side: geometrics.SideType) {\r\n\t\tthis.pos.setFrom(refBlockPos.pos)\r\n\t\tthis.engineChunk = refBlockPos.engineChunk\r\n\t\tthis.blockDataOverride = refBlockPos.blockDataOverride\r\n\t\tlet newAxisPos = refBlockPos.pos.a[side.axis] + side.axisDelta\r\n\t\tlet newIndex = refBlockPos.i + side.deltaIndex\r\n\t\tif (newAxisPos < 0 || newAxisPos >= geometrics.CHUNK_SIZE) {\r\n\t\t\tif (this.engineChunk) {\r\n\t\t\t\tif (this.engineChunk.neighboursBySideId) {\r\n\t\t\t\t\tconst neighbourChunk = this.engineChunk.neighboursBySideId[side.id]\r\n\t\t\t\t\tthis.engineChunk = neighbourChunk\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.engineChunk = undefined\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.blockDataOverride = undefined\r\n\t\t\t}\r\n\t\t\tnewAxisPos += geometrics.CHUNK_SIZE * -side.axisDelta\r\n\t\t\tnewIndex += geometrics.CHUNK_SIZE * -side.deltaIndex\r\n\t\t}\r\n\t\tthis.pos.a[side.axis] = newAxisPos\r\n\t\tthis.i = newIndex\r\n\t}\r\n\t/*getAdjacentBlockPos(side) {\r\n\t\tvar neighbourChunk = this.chunk.neighboursBySideId[side.id]\r\n\t\tif (side === geometrics.Sides.TOP) {\r\n\t\t\tif (this.pos.a[1] === geometrics.CHUNK_SIZE - 1) {\r\n\t\t\t\treturn neighbourChunk ? new BlockPos( neighbourChunk, this.pos.a[0], 0, this.pos.a[2] ) : BlockPos.badPos\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (side === geometrics.Sides.BOTTOM) {\r\n\t\t\tif (this.pos.a[1] === 0) {\r\n\t\t\t\treturn neighbourChunk ? new BlockPos( neighbourChunk, this.pos.a[0], geometrics.CHUNK_SIZE - 1, this.pos.a[2] ) : BlockPos.badPos\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (side === geometrics.Sides.NORTH) {\r\n\t\t\tif (this.pos.a[2] === geometrics.CHUNK_SIZE - 1) {\r\n\t\t\t\treturn neighbourChunk ? new BlockPos( neighbourChunk, this.pos.a[0], this.pos.a[1], 0 ) : BlockPos.badPos\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (side === geometrics.Sides.SOUTH) {\r\n\t\t\tif (this.pos.a[2] === 0) {\r\n\t\t\t\treturn neighbourChunk ? new BlockPos( neighbourChunk, this.pos.a[0], this.pos.a[1], geometrics.CHUNK_SIZE - 1 ) : BlockPos.badPos\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (side === geometrics.Sides.EAST) {\r\n\t\t\tif (this.pos.a[0] === geometrics.CHUNK_SIZE - 1) {\r\n\t\t\t\treturn neighbourChunk ? new BlockPos( neighbourChunk, 0, this.pos.a[1], this.pos.a[2] ) : BlockPos.badPos\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (side === geometrics.Sides.WEST) {\r\n\t\t\tif (this.pos.a[0] === 0) {\r\n\t\t\t\treturn neighbourChunk ? new BlockPos( neighbourChunk, geometrics.CHUNK_SIZE - 1, this.pos.a[1], this.pos.a[2] ) : BlockPos.badPos\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn new BlockPos(this.chunk, this.pos.a[0] + side.dx, this.pos.a[1] + side.dy, this.pos.a[2] + side.dz)\r\n\t}*/\r\n\tadd(dx: number, dy: number, dz: number) {\r\n\t\tif (dy > 0) {\r\n\t\t\tthis.pos.a[1] += dy\r\n\t\t\twhile (this.pos.a[1] > geometrics.CHUNK_SIZE-1) {\r\n\t\t\t\tthis.engineChunk = this.engineChunk.neighboursBySideId[ geometrics.Sides.byName.TOP.id ]\r\n\t\t\t\tthis.pos.a[1] -= geometrics.CHUNK_SIZE\r\n\t\t\t\tif (!this.engineChunk) { return }\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (dy < 0) {\r\n\t\t\tthis.pos.a[1] += dy\r\n\t\t\twhile (this.pos.a[1] < 0) {\r\n\t\t\t\tthis.engineChunk = this.engineChunk.neighboursBySideId[ geometrics.Sides.byName.BOTTOM.id ]\r\n\t\t\t\tthis.pos.a[1] += geometrics.CHUNK_SIZE\r\n\t\t\t\tif (!this.engineChunk) { return }\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (dz > 0) {\r\n\t\t\tthis.pos.a[2] += dz\r\n\t\t\twhile (this.pos.a[2] > geometrics.CHUNK_SIZE-1) {\r\n\t\t\t\tthis.engineChunk = this.engineChunk.neighboursBySideId[ geometrics.Sides.byName.NORTH.id ]\r\n\t\t\t\tthis.pos.a[2] -= geometrics.CHUNK_SIZE\r\n\t\t\t\tif (!this.engineChunk) { return }\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (dz < 0) {\r\n\t\t\tthis.pos.a[2] += dz\r\n\t\t\twhile (this.pos.a[2] < 0) {\r\n\t\t\t\tthis.engineChunk = this.engineChunk.neighboursBySideId[ geometrics.Sides.byName.SOUTH.id ]\r\n\t\t\t\tthis.pos.a[2] += geometrics.CHUNK_SIZE\r\n\t\t\t\tif (!this.engineChunk) { return }\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (dx > 0) {\r\n\t\t\tthis.pos.a[0] += dx\r\n\t\t\twhile (this.pos.a[0] > geometrics.CHUNK_SIZE-1) {\r\n\t\t\t\tthis.engineChunk = this.engineChunk.neighboursBySideId[ geometrics.Sides.byName.EAST.id ]\r\n\t\t\t\tthis.pos.a[0] -= geometrics.CHUNK_SIZE\r\n\t\t\t\tif (!this.engineChunk) { return }\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (dx < 0) {\r\n\t\t\tthis.pos.a[0] += dx\r\n\t\t\twhile (this.pos.a[0] < 0) {\r\n\t\t\t\tthis.engineChunk = this.engineChunk.neighboursBySideId[ geometrics.Sides.byName.WEST.id ]\r\n\t\t\t\tthis.pos.a[0] += geometrics.CHUNK_SIZE\r\n\t\t\t\tif (!this.engineChunk) { return }\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.recalculateIndex()\r\n\t}\r\n\r\n\teachBlockInChunk(callback: () => void) {\r\n\t\tconst a = this.pos.a\r\n\t\tthis.i = 0\r\n\t\tfor (a[0] = 0; a[0] < geometrics.CHUNK_SIZE; a[0] += 1) {\r\n\t\t\tfor (a[2] = 0; a[2] < geometrics.CHUNK_SIZE; a[2] += 1) {\r\n\t\t\t\tfor (a[1] = 0; a[1] < geometrics.CHUNK_SIZE; a[1] += 1) {\r\n\t\t\t\t\tcallback()\r\n\t\t\t\t\tthis.i += 1\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\teachBlockOnFace(chunk: EngineChunk, side: geometrics.SideType, callback: () => void) {\r\n\t\tthis.engineChunk = chunk\r\n\t\tconst a = this.pos.a\r\n\t\tconst freeAxis1 = side.axis === 0 ? 1 : 0\r\n\t\tconst freeAxis2 = side.axis === 2 ? 1 : 2\r\n\t\ta[side.axis] = side.axisDelta === 1 ? geometrics.CHUNK_SIZE - 1 : 0 // locked axis\r\n\t\tfor (a[freeAxis1] = 0; a[freeAxis1] < geometrics.CHUNK_SIZE; a[freeAxis1] += 1) {\r\n\t\t\tfor (a[freeAxis2] = 0; a[freeAxis2] < geometrics.CHUNK_SIZE; a[freeAxis2] += 1) {\r\n\t\t\t\tthis.recalculateIndex()\r\n\t\t\t\tcallback()\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\teachBlockOnEdge(chunk: EngineChunk, side1: geometrics.SideType, side2: geometrics.SideType, callback: () => void) {\r\n\t\tthis.engineChunk = chunk\r\n\t\tconst a = this.pos.a\r\n\t\tconst freeAxis = side1.axis !== 0 && side2.axis !== 0 ? 0 : side1.axis !== 1 && side2.axis !== 1 ? 1 : 2\r\n\t\ta[side1.axis] = side1.axisDelta === 1 ? geometrics.CHUNK_SIZE - 1 : 0\r\n\t\ta[side2.axis] = side2.axisDelta === 1 ? geometrics.CHUNK_SIZE - 1 : 0\r\n\t\tfor (a[freeAxis] = 0; a[freeAxis] < geometrics.CHUNK_SIZE; a[freeAxis] += 1) {\r\n\t\t\tthis.recalculateIndex()\r\n\t\t\tcallback()\r\n\t\t}\r\n\t}\r\n\tsetBlockOnCorner(chunk: EngineChunk, side1: geometrics.SideType, side2: geometrics.SideType, side3: geometrics.SideType) {\r\n\t\tthis.engineChunk = chunk\r\n\t\tconst a = this.pos.a\r\n\t\ta[side1.axis] = side1.axisDelta === 1 ? geometrics.CHUNK_SIZE - 1 : 0\r\n\t\ta[side2.axis] = side2.axisDelta === 1 ? geometrics.CHUNK_SIZE - 1 : 0\r\n\t\ta[side3.axis] = side3.axisDelta === 1 ? geometrics.CHUNK_SIZE - 1 : 0\r\n\t\tthis.recalculateIndex()\r\n\t}\r\n\r\n\ttoString() {\r\n\t\treturn `BlockPos(${this.pos.toString()} @ ${this.engineChunk ? this.engineChunk.chunkData.pos.toString() : \"no-chunk\"})`\r\n\t}\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/common/BlockPos.ts","import * as geometrics from \"geometrics\"\r\nimport BlockPos from \"BlockPos\"\r\n\r\n\r\nexport function drawQuad(vertexArray: geometrics.VertexArrayType, quadId: number, blockPos: BlockPos, side: geometrics.SideType, uvs: Array<number>, brightnesses: Array<number>) {\r\n\r\n\tconst flipQuad: number = (brightnesses[0] + brightnesses[2] < brightnesses[1] + brightnesses[3]) ? 1 : 0 // 1 bit\r\n\r\n\tconst s: number = side.id // 3 bits because 0..5\r\n\r\n\tconst x: number = blockPos.pos.a[0] // 5 bits because 0..31\r\n\tconst y: number = blockPos.pos.a[1] // 5 bits because 0..31\r\n\tconst z: number = blockPos.pos.a[2] // 5 bits because 0..31\r\n\tconst packedPos: number = (x) | (y << 5) | (z << 10) // 15 bits\r\n\tconst packedTransform: number = packedPos | (s << 15) | (flipQuad << 18) // 19 bits\r\n\r\n\tconst packedInt0: number = packedTransform\r\n\r\n\tconst brightCorner0: number = Math.floor(brightnesses[0] * 15) // 4 bits\r\n\tconst brightCorner1: number = Math.floor(brightnesses[1] * 15) // 4 bits\r\n\tconst brightCorner2: number = Math.floor(brightnesses[2] * 15) // 4 bits\r\n\tconst brightCorner3: number = Math.floor(brightnesses[3] * 15) // 4 bits\r\n\tconst brightCorners: number = (brightCorner0) | (brightCorner1 << 4) | (brightCorner2 << 8) | (brightCorner3 << 12)\r\n\tconst u0: number = uvs[0] // 4 bits because 0..15\r\n\tconst v0: number = uvs[1] // 4 bits because 0..15\r\n\tconst packedInt1: number = (brightCorners) | (u0 << 16) | (v0 << 20) // 24 bits\r\n\r\n\tlet vertexArrayCursor = quadId * geometrics.quadVertexElementSize\r\n\tvertexArray[vertexArrayCursor + 0] = packedInt0\r\n\tvertexArray[vertexArrayCursor + 1] = packedInt1\r\n}\r\n\r\nexport function clearQuad(vertexArray: geometrics.VertexArrayType, quadId: number) {\r\n\tlet vertexArrayCursor = quadId * geometrics.quadVertexElementSize\r\n\r\n\t// TODO: make the quad degenerate\r\n\tconst invalidSideId = 6\r\n\tvertexArray[vertexArrayCursor + 0] = invalidSideId << 15\r\n\tvertexArray[vertexArrayCursor + 1] = 0\r\n}\r\n\r\nexport function updateQuadAO(vertexArray: geometrics.VertexArrayType, quadId: number, blockPos: BlockPos, side: geometrics.SideType, uvs: Array<number>, brightnesses: Array<number>): boolean {\r\n\tlet changed = false\r\n\t// TODO: optimize?\r\n\tchanged = true\r\n\tdrawQuad(vertexArray, quadId, blockPos, side, uvs, brightnesses)\r\n\treturn changed\r\n}\r\n\r\nexport function getVertexOrderAfterQuadFlipping(brightnesses: Array<number>) {\r\n\tif (brightnesses[0] + brightnesses[2] < brightnesses[1] + brightnesses[3]) {\r\n\t\treturn [1, 2, 3, 0]\r\n\t}\r\n\telse {\r\n\t\treturn [0, 1, 2, 3]\r\n\t}\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/client/engine/chunk/EngineChunkQuadWriter.ts","import v3 from \"v3\"\r\nimport ChunkData from \"../ChunkData\"\r\nimport * as WorkerManager from \"./WorkerManager\"\r\nimport * as WorkerObligation from \"./WorkerObligation\"\r\nimport ChunkGeneration from \"../singleplayer/ChunkGeneration\"\r\nimport * as geometrics from \"geometrics\"\r\nimport EngineChunkBuilder from \"../engine/chunk/EngineChunkBuilder\"\r\nimport EngineChunkVertexArrayPool from \"../engine/chunk/EngineChunkVertexArrayPool\"\r\nimport EngineChunkQuadLookupPool from \"../engine/chunk/EngineChunkQuadLookupPool\"\r\nimport Pool from \"Pool\"\r\n\r\nconst TASK_TYPE_ID = \"TaskGenerateAndMeshChunk\"\r\n\r\nexport default {\r\n\tid: TASK_TYPE_ID,\r\n\tcancel(taskId: number) {\r\n\t\tWorkerManager.cancelTask(taskId)\r\n\t},\r\n\tqueue(chunkPos: v3, onComplete: (chunkData: ChunkData, quadCount: number, vertexArrays: Array<geometrics.VertexArrayType>, quadIdsByBlockAndSide: Uint16Array) => void) {\r\n\t\tconst chunkId = chunkPos.toString()\r\n\t\tlet chunkData\r\n\r\n\t\tconst taskId = WorkerManager.queueTask(\r\n\t\t\tTASK_TYPE_ID,\r\n\t\t\t() => {\r\n\t\t\t\t// this allocation is deferred until the task starts, because the onCancelled handler (below) doesn't get called if the task is cancelled before it starts)\r\n\t\t\t\tchunkData = ChunkData.pool.acquire() // n.b. chunkData may contain old data, so make sure to set everything!\r\n\t\t\t\tchunkData.setChunkPos(chunkPos)\r\n\r\n\t\t\t\tconst quadIdsByBlockAndSide = EngineChunkQuadLookupPool.acquire()\r\n\t\t\t\tconst initialVertexArrays = [EngineChunkVertexArrayPool.acquire()]\r\n\r\n\t\t\t\tconst requestPayload = {\r\n\t\t\t\t\tchunkPos: [chunkPos.a[0], chunkPos.a[1], chunkPos.a[2]],\r\n\t\t\t\t\tblockData: chunkData.blocks.buffer,\r\n\t\t\t\t\tquadIdsByBlockAndSide: quadIdsByBlockAndSide.buffer,\r\n\t\t\t\t\tinitialVertexArrays: initialVertexArrays.map(a => a.buffer),\r\n\t\t\t\t}\r\n\t\t\t\tconst transferableObjects = [\r\n\t\t\t\t\tchunkData.blocks.buffer,\r\n\t\t\t\t\tquadIdsByBlockAndSide.buffer,\r\n\t\t\t\t\t...(initialVertexArrays.map(a => a.buffer)),\r\n\t\t\t\t]\r\n\t\t\t\treturn { requestPayload, transferableObjects }\r\n\t\t\t},\r\n\t\t\t(completePayload: WorkerManager.WorkerPayload) => {\r\n\t\t\t\tchunkData.blocks = new Uint8Array(completePayload.blockData)\r\n\r\n\t\t\t\tconst unusedVertexArrays = completePayload.unusedVertexArrays.map(buffer => new Uint32Array(buffer))\r\n\t\t\t\tunusedVertexArrays.forEach(vertexArray => {\r\n\t\t\t\t\tEngineChunkVertexArrayPool.release(vertexArray)\r\n\t\t\t\t})\r\n\r\n\t\t\t\tconst quadCount = <number>completePayload.quadCount\r\n\t\t\t\tconst vertexArrays = completePayload.vertexArrays.map(buffer => new Uint32Array(buffer))\r\n\t\t\t\tconst quadIdsByBlockAndSide = new Uint16Array(completePayload.quadIdsByBlockAndSide)\r\n\r\n\t\t\t\tonComplete(chunkData, quadCount, vertexArrays, quadIdsByBlockAndSide)\r\n\t\t\t},\r\n\t\t\t(cancelledPayload: WorkerManager.WorkerPayload) => {\r\n\t\t\t\tchunkData.blocks = new Uint8Array(cancelledPayload.blockData)\r\n\t\t\t\tChunkData.pool.release(chunkData)\r\n\r\n\t\t\t\tconst cancelledQuadIdsByBlockAndSide = new Uint16Array(cancelledPayload.quadIdsByBlockAndSide)\r\n\t\t\t\tEngineChunkQuadLookupPool.release(cancelledQuadIdsByBlockAndSide)\r\n\r\n\t\t\t\tconst unusedVertexArrays = cancelledPayload.unusedVertexArrays.map(buffer => new Uint32Array(buffer))\r\n\t\t\t\tunusedVertexArrays.forEach(vertexArray => {\r\n\t\t\t\t\tEngineChunkVertexArrayPool.release(vertexArray)\r\n\t\t\t\t})\r\n\r\n\t\t\t\tconst vertexArrays = cancelledPayload.vertexArrays.map(buffer => new Uint32Array(buffer))\r\n\t\t\t\tvertexArrays.forEach(vertexArray => {\r\n\t\t\t\t\tEngineChunkVertexArrayPool.release(vertexArray)\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t)\r\n\t\treturn taskId\r\n\t},\r\n\twork(requestPayload, responseCallback) {\r\n\t\t// get request\r\n\t\tconst chunkPosRaw: Array<number> = requestPayload.chunkPos\r\n\t\tconst chunkPos = new v3(chunkPosRaw[0], chunkPosRaw[1], chunkPosRaw[2])\r\n\t\tconst blockData: Uint8Array = new Uint8Array(requestPayload.blockData)\r\n\t\tconst quadIdsByBlockAndSide: Uint16Array = new Uint16Array(requestPayload.quadIdsByBlockAndSide)\r\n\t\tconst initialVertexArrays: Array<geometrics.VertexArrayType> = requestPayload.initialVertexArrays.map(buffer => new Uint32Array(buffer))\r\n\r\n\t\t// process request\r\n\t\tChunkGeneration.generateChunk(chunkPos, blockData)\r\n\t\tquadIdsByBlockAndSide.fill(0)\r\n\t\tconst { quadCount, vertexArrays, unusedVertexArrays } = EngineChunkBuilder.drawInternalChunkQuads(blockData, quadIdsByBlockAndSide, initialVertexArrays)\r\n\r\n\t\t// respond\r\n\t\tconst responsePayload: WorkerObligation.WorkerPayload = {\r\n\t\t\tblockData: blockData.buffer,\r\n\t\t\tquadCount,\r\n\t\t\tvertexArrays: vertexArrays.map(arr => arr.buffer),\r\n\t\t\tquadIdsByBlockAndSide: quadIdsByBlockAndSide.buffer,\r\n\t\t\tunusedVertexArrays: unusedVertexArrays.map(arr => arr.buffer),\r\n\t\t}\r\n\t\tconst transferableObjects: Array<any> = [\r\n\t\t\tblockData.buffer,\r\n\t\t\tquadIdsByBlockAndSide.buffer,\r\n\t\t\t...(vertexArrays.map(arr => arr.buffer)),\r\n\t\t\t...(unusedVertexArrays.map(arr => arr.buffer)),\r\n\t\t]\r\n\t\tresponseCallback(responsePayload, transferableObjects)\r\n\t},\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/client/worker/TaskGenerateAndMeshChunk.ts","import { CHUNK_SIZE } from \"geometrics\"\r\nimport v3 from \"v3\"\r\nimport BlockTypes from \"BlockTypes\"\r\nimport noise from \"noise\"\r\n\r\nconst fbm1 = new noise.Noise3d(250).setFractal(2, 0.5, 1.1)\r\nconst fbm2 = new noise.Noise3d(80)\r\nconst fbm3 = new noise.Noise3d(250)\r\nconst warp1 = new noise.NoiseWarp3d(1, fbm1)\r\nconst cell1 = new noise.CellNoise(0.02)\r\n\r\nexport default {\r\n\tgenerateChunk(chunkPos: v3, chunkBlocks: Uint8Array) {\r\n\r\n\t\tvar sampleVector = new v3()\r\n\t\tvar chunkBlockIndex = 0\r\n\t\tfor (var x = 0; x < CHUNK_SIZE; x += 1) {\r\n\t\t\tsampleVector.x = x + chunkPos.x * CHUNK_SIZE\r\n\t\t\tfor (var z = 0; z < CHUNK_SIZE; z += 1) {\r\n\t\t\t\tsampleVector.z = z + chunkPos.z * CHUNK_SIZE\r\n\r\n\r\n\t\t\t\tvar cellNoise = cell1.sample2sqr(sampleVector.x / 2, sampleVector.z / 2)\r\n\t\t\t\tvar v_dist = cellNoise[0]\r\n\t\t\t\tvar v_closest = cellNoise[1]\r\n\r\n\r\n\t\t\t\tfor (var y = 0; y < CHUNK_SIZE; y += 1) {\r\n\t\t\t\t\tsampleVector.y = y + chunkPos.y * CHUNK_SIZE + 30\r\n\r\n\r\n\t\t\t\t\tvar blockData = BlockTypes.byName.air.id\r\n\r\n\t\t\t\t\tif (sampleVector.y < -10) {\r\n\t\t\t\t\t\tblockData = BlockTypes.byName.obsidian.id\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (sampleVector.y < 50) {\r\n\t\t\t\t\t\tblockData = this.terrainGen(sampleVector, v_dist, v_closest)\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tchunkBlocks[chunkBlockIndex] = blockData\r\n\t\t\t\t\tchunkBlockIndex += 1\r\n\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\tterrainGen(pos: v3, v_dist: number, v_closest: number) {\r\n\r\n\t\tconst normalized_v_closest = (v_closest + 1.5) % 1\r\n\r\n\t\tvar workVector = new v3()\r\n\t\tvar biomeBlockTypes = [\r\n\t\t\tBlockTypes.byName.stone.id,\r\n\t\t\tBlockTypes.byName.dirt.id,\r\n\t\t\tBlockTypes.byName.sand.id,\r\n\t\t\tBlockTypes.byName.gravel.id,\r\n\t\t\tBlockTypes.byName.snow.id,\r\n\t\t\tBlockTypes.byName.ice.id,\r\n\t\t\tBlockTypes.byName.sandstone.id,\r\n\t\t\tBlockTypes.byName.grass.id,\r\n\t\t]\r\n\r\n\t\tvar biomeSolidBlock = biomeBlockTypes[Math.floor(normalized_v_closest * biomeBlockTypes.length)]\r\n\r\n\t\tworkVector.setFrom(pos)\r\n\r\n\t\tworkVector = warp1.warp3(workVector)\r\n\r\n\t\tvar sample1 = fbm1.sample2(workVector)\r\n\t\tsample1 += fbm2.sample3(workVector) * 0.5\r\n\r\n\t\tsample1 = Math.pow(sample1, 2)\r\n\r\n\t\t//var sample2 = fbm2.sample(workVector)\r\n\t\t//var sample3 = fbm3.sample(workVector)\r\n\r\n\t\t//var lerped = sample1 * (sample3) + sample2 * (1 - sample3)\r\n\r\n\t\tif (sample1 > pos.y / 25) {\r\n\t\t\treturn biomeSolidBlock\r\n\t\t}\r\n\r\n\t\treturn BlockTypes.byName.air.id\r\n\t},\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/client/singleplayer/ChunkGeneration.ts","import v3 from \"./v3\"\r\n\r\n/*\r\n\t* A speed-improved perlin and simplex noise algorithms for 2D.\r\n\t*\r\n\t* Based on example code by Stefan Gustavson (stegu@itn.liu.se).\r\n\t* Optimisations by Peter Eastman (peastman@drizzle.stanford.edu).\r\n\t* Better rank ordering method by Stefan Gustavson in 2012.\r\n\t* Converted to Javascript by Joseph Gentle.\r\n\t*\r\n\t* Version 2012-03-09\r\n\t*\r\n\t* This code was placed in the public domain by its original author,\r\n\t* Stefan Gustavson. You may use it as you see fit, but\r\n\t* attribution is appreciated.\r\n\t*\r\n\t*/\r\n\r\nclass Grad {\r\n\tconstructor(public x: number, public y: number, public z: number) {\r\n\t}\r\n\tdot2(x: number, y: number) {\r\n\t\treturn this.x * x + this.y * y;\r\n\t}\r\n\tdot3(x: number, y: number, z: number) {\r\n\t\treturn this.x * x + this.y * y + this.z * z;\r\n\t}\r\n}\r\n\r\nvar grad3 = [new Grad(1, 1, 0), new Grad(-1, 1, 0), new Grad(1, -1, 0), new Grad(-1, -1, 0),\r\nnew Grad(1, 0, 1), new Grad(-1, 0, 1), new Grad(1, 0, -1), new Grad(-1, 0, -1),\r\nnew Grad(0, 1, 1), new Grad(0, -1, 1), new Grad(0, 1, -1), new Grad(0, -1, -1)];\r\n\r\nvar p = [151, 160, 137, 91, 90, 15,\r\n\t131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23,\r\n\t190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33,\r\n\t88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166,\r\n\t77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244,\r\n\t102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169, 200, 196,\r\n\t135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123,\r\n\t5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42,\r\n\t223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9,\r\n\t129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218, 246, 97, 228,\r\n\t251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107,\r\n\t49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254,\r\n\t138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180];\r\n// To remove the need for index wrapping, double the permutation table length\r\nvar perm = new Array(512);\r\nvar gradP = new Array(512);\r\n\r\n// This isn't a very good seeding function, but it works ok. It supports 2^16\r\n// different seed values. Write something better if you need more seeds.\r\nfunction seed(seed: number) {\r\n\tif (seed > 0 && seed < 1) {\r\n\t\t// Scale the seed out\r\n\t\tseed *= 65536;\r\n\t}\r\n\r\n\tseed = Math.floor(seed);\r\n\tif (seed < 256) {\r\n\t\tseed |= seed << 8;\r\n\t}\r\n\r\n\tfor (var i = 0; i < 256; i++) {\r\n\t\tvar v;\r\n\t\tif (i & 1) {\r\n\t\t\tv = p[i] ^ (seed & 255);\r\n\t\t} else {\r\n\t\t\tv = p[i] ^ ((seed >> 8) & 255);\r\n\t\t}\r\n\r\n\t\tperm[i] = perm[i + 256] = v;\r\n\t\tgradP[i] = gradP[i + 256] = grad3[v % 12];\r\n\t}\r\n};\r\n\r\nseed(0);\r\n\r\n/*\r\nfor(var i=0; i<256; i++) {\r\n\tperm[i] = perm[i + 256] = p[i];\r\n\tgradP[i] = gradP[i + 256] = grad3[perm[i] % 12];\r\n}*/\r\n\r\n// Skewing and unskewing factors for 2, 3, and 4 dimensions\r\nvar F2 = 0.5 * (Math.sqrt(3) - 1);\r\nvar G2 = (3 - Math.sqrt(3)) / 6;\r\n\r\nvar F3 = 1 / 3;\r\nvar G3 = 1 / 6;\r\n\r\n// 2D simplex noise\r\nfunction simplex2(xin: number, yin: number) {\r\n\tvar n0, n1, n2; // Noise contributions from the three corners\r\n\t// Skew the input space to determine which simplex cell we're in\r\n\tvar s = (xin + yin) * F2; // Hairy factor for 2D\r\n\tvar i = Math.floor(xin + s);\r\n\tvar j = Math.floor(yin + s);\r\n\tvar t = (i + j) * G2;\r\n\tvar x0 = xin - i + t; // The x,y distances from the cell origin, unskewed.\r\n\tvar y0 = yin - j + t;\r\n\t// For the 2D case, the simplex shape is an equilateral triangle.\r\n\t// Determine which simplex we are in.\r\n\tvar i1, j1; // Offsets for second (middle) corner of simplex in (i,j) coords\r\n\tif (x0 > y0) { // lower triangle, XY order: (0,0)->(1,0)->(1,1)\r\n\t\ti1 = 1; j1 = 0;\r\n\t} else {    // upper triangle, YX order: (0,0)->(0,1)->(1,1)\r\n\t\ti1 = 0; j1 = 1;\r\n\t}\r\n\t// A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and\r\n\t// a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where\r\n\t// c = (3-sqrt(3))/6\r\n\tvar x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords\r\n\tvar y1 = y0 - j1 + G2;\r\n\tvar x2 = x0 - 1 + 2 * G2; // Offsets for last corner in (x,y) unskewed coords\r\n\tvar y2 = y0 - 1 + 2 * G2;\r\n\t// Work out the hashed gradient indices of the three simplex corners\r\n\ti &= 255;\r\n\tj &= 255;\r\n\tvar gi0 = gradP[i + perm[j]];\r\n\tvar gi1 = gradP[i + i1 + perm[j + j1]];\r\n\tvar gi2 = gradP[i + 1 + perm[j + 1]];\r\n\t// Calculate the contribution from the three corners\r\n\tvar t0 = 0.5 - x0 * x0 - y0 * y0;\r\n\tif (t0 < 0) {\r\n\t\tn0 = 0;\r\n\t} else {\r\n\t\tt0 *= t0;\r\n\t\tn0 = t0 * t0 * gi0.dot2(x0, y0);  // (x,y) of grad3 used for 2D gradient\r\n\t}\r\n\tvar t1 = 0.5 - x1 * x1 - y1 * y1;\r\n\tif (t1 < 0) {\r\n\t\tn1 = 0;\r\n\t} else {\r\n\t\tt1 *= t1;\r\n\t\tn1 = t1 * t1 * gi1.dot2(x1, y1);\r\n\t}\r\n\tvar t2 = 0.5 - x2 * x2 - y2 * y2;\r\n\tif (t2 < 0) {\r\n\t\tn2 = 0;\r\n\t} else {\r\n\t\tt2 *= t2;\r\n\t\tn2 = t2 * t2 * gi2.dot2(x2, y2);\r\n\t}\r\n\t// Add contributions from each corner to get the final noise value.\r\n\t// The result is scaled to return values in the interval [-1,1].\r\n\treturn 70 * (n0 + n1 + n2);\r\n};\r\n\r\n// 3D simplex noise\r\nfunction simplex3(xin: number, yin: number, zin: number) {\r\n\tvar n0, n1, n2, n3; // Noise contributions from the four corners\r\n\r\n\t// Skew the input space to determine which simplex cell we're in\r\n\tvar s = (xin + yin + zin) * F3; // Hairy factor for 2D\r\n\tvar i = Math.floor(xin + s);\r\n\tvar j = Math.floor(yin + s);\r\n\tvar k = Math.floor(zin + s);\r\n\r\n\tvar t = (i + j + k) * G3;\r\n\tvar x0 = xin - i + t; // The x,y distances from the cell origin, unskewed.\r\n\tvar y0 = yin - j + t;\r\n\tvar z0 = zin - k + t;\r\n\r\n\t// For the 3D case, the simplex shape is a slightly irregular tetrahedron.\r\n\t// Determine which simplex we are in.\r\n\tvar i1, j1, k1; // Offsets for second corner of simplex in (i,j,k) coords\r\n\tvar i2, j2, k2; // Offsets for third corner of simplex in (i,j,k) coords\r\n\tif (x0 >= y0) {\r\n\t\tif (y0 >= z0) { i1 = 1; j1 = 0; k1 = 0; i2 = 1; j2 = 1; k2 = 0; }\r\n\t\telse if (x0 >= z0) { i1 = 1; j1 = 0; k1 = 0; i2 = 1; j2 = 0; k2 = 1; }\r\n\t\telse { i1 = 0; j1 = 0; k1 = 1; i2 = 1; j2 = 0; k2 = 1; }\r\n\t} else {\r\n\t\tif (y0 < z0) { i1 = 0; j1 = 0; k1 = 1; i2 = 0; j2 = 1; k2 = 1; }\r\n\t\telse if (x0 < z0) { i1 = 0; j1 = 1; k1 = 0; i2 = 0; j2 = 1; k2 = 1; }\r\n\t\telse { i1 = 0; j1 = 1; k1 = 0; i2 = 1; j2 = 1; k2 = 0; }\r\n\t}\r\n\t// A step of (1,0,0) in (i,j,k) means a step of (1-c,-c,-c) in (x,y,z),\r\n\t// a step of (0,1,0) in (i,j,k) means a step of (-c,1-c,-c) in (x,y,z), and\r\n\t// a step of (0,0,1) in (i,j,k) means a step of (-c,-c,1-c) in (x,y,z), where\r\n\t// c = 1/6.\r\n\tvar x1 = x0 - i1 + G3; // Offsets for second corner\r\n\tvar y1 = y0 - j1 + G3;\r\n\tvar z1 = z0 - k1 + G3;\r\n\r\n\tvar x2 = x0 - i2 + 2 * G3; // Offsets for third corner\r\n\tvar y2 = y0 - j2 + 2 * G3;\r\n\tvar z2 = z0 - k2 + 2 * G3;\r\n\r\n\tvar x3 = x0 - 1 + 3 * G3; // Offsets for fourth corner\r\n\tvar y3 = y0 - 1 + 3 * G3;\r\n\tvar z3 = z0 - 1 + 3 * G3;\r\n\r\n\t// Work out the hashed gradient indices of the four simplex corners\r\n\ti &= 255;\r\n\tj &= 255;\r\n\tk &= 255;\r\n\tvar gi0 = gradP[i + perm[j + perm[k]]];\r\n\tvar gi1 = gradP[i + i1 + perm[j + j1 + perm[k + k1]]];\r\n\tvar gi2 = gradP[i + i2 + perm[j + j2 + perm[k + k2]]];\r\n\tvar gi3 = gradP[i + 1 + perm[j + 1 + perm[k + 1]]];\r\n\r\n\t// Calculate the contribution from the four corners\r\n\tvar t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0;\r\n\tif (t0 < 0) {\r\n\t\tn0 = 0;\r\n\t} else {\r\n\t\tt0 *= t0;\r\n\t\tn0 = t0 * t0 * gi0.dot3(x0, y0, z0);  // (x,y) of grad3 used for 2D gradient\r\n\t}\r\n\tvar t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1;\r\n\tif (t1 < 0) {\r\n\t\tn1 = 0;\r\n\t} else {\r\n\t\tt1 *= t1;\r\n\t\tn1 = t1 * t1 * gi1.dot3(x1, y1, z1);\r\n\t}\r\n\tvar t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2;\r\n\tif (t2 < 0) {\r\n\t\tn2 = 0;\r\n\t} else {\r\n\t\tt2 *= t2;\r\n\t\tn2 = t2 * t2 * gi2.dot3(x2, y2, z2);\r\n\t}\r\n\tvar t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3;\r\n\tif (t3 < 0) {\r\n\t\tn3 = 0;\r\n\t} else {\r\n\t\tt3 *= t3;\r\n\t\tn3 = t3 * t3 * gi3.dot3(x3, y3, z3);\r\n\t}\r\n\t// Add contributions from each corner to get the final noise value.\r\n\t// The result is scaled to return values in the interval [-1,1].\r\n\treturn 32 * (n0 + n1 + n2 + n3);\r\n\r\n};\r\n\r\n// ##### Perlin noise stuff\r\n\r\nfunction fade(t: number) {\r\n\treturn t * t * t * (t * (t * 6 - 15) + 10);\r\n}\r\n\r\nfunction lerp(a: number, b: number, t: number) {\r\n\treturn (1 - t) * a + t * b;\r\n}\r\n\r\n// 2D Perlin Noise\r\nfunction perlin2(x: number, y: number) {\r\n\t// Find unit grid cell containing point\r\n\tvar X = Math.floor(x), Y = Math.floor(y);\r\n\t// Get relative xy coordinates of point within that cell\r\n\tx = x - X; y = y - Y;\r\n\t// Wrap the integer cells at 255 (smaller integer period can be introduced here)\r\n\tX = X & 255; Y = Y & 255;\r\n\r\n\t// Calculate noise contributions from each of the four corners\r\n\tvar n00 = gradP[X + perm[Y]].dot2(x, y);\r\n\tvar n01 = gradP[X + perm[Y + 1]].dot2(x, y - 1);\r\n\tvar n10 = gradP[X + 1 + perm[Y]].dot2(x - 1, y);\r\n\tvar n11 = gradP[X + 1 + perm[Y + 1]].dot2(x - 1, y - 1);\r\n\r\n\t// Compute the fade curve value for x\r\n\tvar u = fade(x);\r\n\r\n\t// Interpolate the four results\r\n\treturn lerp(\r\n\t\tlerp(n00, n10, u),\r\n\t\tlerp(n01, n11, u),\r\n\t\tfade(y));\r\n};\r\n\r\n// 3D Perlin Noise\r\nfunction perlin3(x: number, y: number, z: number) {\r\n\t// Find unit grid cell containing point\r\n\tvar X = Math.floor(x), Y = Math.floor(y), Z = Math.floor(z);\r\n\t// Get relative xyz coordinates of point within that cell\r\n\tx = x - X; y = y - Y; z = z - Z;\r\n\t// Wrap the integer cells at 255 (smaller integer period can be introduced here)\r\n\tX = X & 255; Y = Y & 255; Z = Z & 255;\r\n\r\n\t// Calculate noise contributions from each of the eight corners\r\n\tvar n000 = gradP[X + perm[Y + perm[Z]]].dot3(x, y, z);\r\n\tvar n001 = gradP[X + perm[Y + perm[Z + 1]]].dot3(x, y, z - 1);\r\n\tvar n010 = gradP[X + perm[Y + 1 + perm[Z]]].dot3(x, y - 1, z);\r\n\tvar n011 = gradP[X + perm[Y + 1 + perm[Z + 1]]].dot3(x, y - 1, z - 1);\r\n\tvar n100 = gradP[X + 1 + perm[Y + perm[Z]]].dot3(x - 1, y, z);\r\n\tvar n101 = gradP[X + 1 + perm[Y + perm[Z + 1]]].dot3(x - 1, y, z - 1);\r\n\tvar n110 = gradP[X + 1 + perm[Y + 1 + perm[Z]]].dot3(x - 1, y - 1, z);\r\n\tvar n111 = gradP[X + 1 + perm[Y + 1 + perm[Z + 1]]].dot3(x - 1, y - 1, z - 1);\r\n\r\n\t// Compute the fade curve value for x, y, z\r\n\tvar u = fade(x);\r\n\tvar v = fade(y);\r\n\tvar w = fade(z);\r\n\r\n\t// Interpolate\r\n\treturn lerp(\r\n\t\tlerp(\r\n\t\t\tlerp(n000, n100, u),\r\n\t\t\tlerp(n001, n101, u), w),\r\n\t\tlerp(\r\n\t\t\tlerp(n010, n110, u),\r\n\t\t\tlerp(n011, n111, u), w),\r\n\t\tv);\r\n};\r\n\r\n//// ==================================================================\r\n\r\nlet fbm_counter = 0\r\n\r\nclass Noise3d {\r\n\r\n\tworkVector: v3\r\n\toctaves: number\r\n\tpersistance: number\r\n\tlacunarity: number\r\n\r\n\tconstructor(private scale: number, private offset?: v3) {\r\n\t\tthis.workVector = new v3()\r\n\t\tif (offset) {\r\n\t\t\tthis.offset.setFrom(offset)\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.offset = new v3()\r\n\t\t\tthis.randomizeOffset()\r\n\t\t}\r\n\t\tthis.setFractal(1, 0.5, 2)\r\n\t}\r\n\trandomizeOffset() {\r\n\t\tfbm_counter += 123.45\r\n\t\tthis.offset.x = simplex3(fbm_counter, 0, 0) * 1000\r\n\t\tthis.offset.y = simplex3(0, fbm_counter, 0) * 1000\r\n\t\tthis.offset.z = simplex3(0, 0, fbm_counter) * 1000\r\n\t\treturn this\r\n\t}\r\n\tsetFractal(octaves: number, persistance: number, lacunarity: number) {\r\n\t\tthis.octaves = octaves\r\n\t\tthis.persistance = persistance\r\n\t\tthis.lacunarity = lacunarity\r\n\t\treturn this\r\n\t}\r\n\tclone() {\r\n\t\tvar obj = new Noise3d(this.scale, this.offset)\r\n\t\tobj.setFractal(this.octaves, this.persistance, this.lacunarity)\r\n\t\treturn obj\r\n\t}\r\n\tsample3(sampleVector: v3) {\r\n\t\tvar amplitude = 1\r\n\t\tvar frequency = 1\r\n\t\tvar sum = 0\r\n\t\tvar work = this.workVector\r\n\t\twork.setFrom(sampleVector).add(this.offset).divideScalar(this.scale)\r\n\t\tfor (var i = 0; i < this.octaves; i += 1) {\r\n\t\t\twork.multiplyScalar(frequency)\r\n\t\t\tsum += amplitude * simplex3(work.x, work.y, work.z)\r\n\t\t\tamplitude *= this.persistance\r\n\t\t\tfrequency *= this.lacunarity\r\n\t\t}\r\n\t\treturn sum\r\n\t}\r\n\tsample2(sampleVector: v3) {\r\n\t\tvar amplitude = 1\r\n\t\tvar frequency = 1\r\n\t\tvar sum = 0\r\n\t\tvar work = this.workVector\r\n\t\twork.setFrom(sampleVector).add(this.offset).divideScalar(this.scale)\r\n\t\tfor (var i = 0; i < this.octaves; i += 1) {\r\n\t\t\twork.multiplyScalar(frequency)\r\n\t\t\tsum += amplitude * simplex2(work.x, work.z)\r\n\t\t\tamplitude *= this.persistance\r\n\t\t\tfrequency *= this.lacunarity\r\n\t\t}\r\n\t\treturn sum\r\n\t}\r\n}\r\n\r\nclass NoiseWarp3d {\r\n\tscale: number\r\n\tnoise_x: Noise3d\r\n\tnoise_y: Noise3d\r\n\tnoise_z: Noise3d\r\n\tworkVector: v3\r\n\tconstructor(scale: number, noiseSource: Noise3d) {\r\n\t\tthis.scale = scale\r\n\t\tthis.noise_x = noiseSource.clone().randomizeOffset()\r\n\t\tthis.noise_y = noiseSource.clone().randomizeOffset()\r\n\t\tthis.noise_z = noiseSource.clone().randomizeOffset()\r\n\t\tthis.workVector = new v3()\r\n\t}\r\n\twarp3(pos: v3) {\r\n\t\tthis.workVector.x = pos.x + this.scale * this.noise_x.sample3(pos)\r\n\t\tthis.workVector.y = pos.y + this.scale * this.noise_y.sample3(pos)\r\n\t\tthis.workVector.z = pos.z + this.scale * this.noise_z.sample3(pos)\r\n\t\tpos.setFrom(this.workVector)\r\n\t\treturn pos\r\n\t}\r\n\twarp2(pos: v3) {\r\n\t\tthis.workVector.x = pos.x + this.scale * this.noise_x.sample2(pos)\r\n\t\tthis.workVector.y = pos.y + this.scale * this.noise_y.sample2(pos)\r\n\t\tthis.workVector.z = pos.z + this.scale * this.noise_z.sample2(pos)\r\n\t\tpos.setFrom(this.workVector)\r\n\t\treturn pos\r\n\t}\r\n}\r\n\r\n\r\n\r\nclass CellNoise {\r\n\tscale: number\r\n\tnoisex: Noise3d\r\n\tnoisez: Noise3d\r\n\tnoiseq: Noise3d\r\n\tworkVector: v3\r\n\twinningGridCoord: v3\r\n\tconstructor(scale: number) {\r\n\t\tthis.scale = scale\r\n\t\tthis.noisex = new Noise3d(1)\r\n\t\tthis.noisez = new Noise3d(1)\r\n\t\tthis.noiseq = new Noise3d(1)\r\n\t\tthis.workVector = new v3()\r\n\t\tthis.winningGridCoord = new v3()\r\n\t}\r\n\tsample2sqr(x: number, z: number) {\r\n\t\t// http://www.iquilezles.org/www/articles/voronoilines/voronoilines.htm\r\n\t\tx *= this.scale\r\n\t\tz *= this.scale\r\n\t\tvar px = Math.floor(x)\r\n\t\tvar pz = Math.floor(z)\r\n\t\tvar fx = x - px\r\n\t\tvar fz = z - pz\r\n\t\tvar smallestD = 100\r\n\t\tfor (var bz = -1; bz <= 1; bz += 1) {\r\n\t\t\tfor (var bx = -1; bx <= 1; bx += 1) {\r\n\t\t\t\tthis.workVector.set(px + bx, 0, pz + bz)\r\n\t\t\t\tvar rx = bx + 0.5 * this.noisex.sample2(this.workVector) - fx\r\n\t\t\t\tvar rz = bz + 0.5 * this.noisez.sample2(this.workVector) - fz\r\n\t\t\t\tvar d = rx * rx + rz * rz\r\n\t\t\t\tif (d < smallestD) {\r\n\t\t\t\t\tsmallestD = d\r\n\t\t\t\t\tthis.winningGridCoord.setFrom(this.workVector)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tvar closestNoise = this.noiseq.sample2(this.winningGridCoord)\r\n\t\treturn [smallestD, closestNoise]\r\n\t}\r\n}\r\n\r\n\r\nexport default {\r\n\tNoise3d,\r\n\tNoiseWarp3d,\r\n\tCellNoise,\r\n\tseed: seed,\r\n\tsimplex3: simplex3,\r\n\tsimplex2: simplex2,\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/common/noise.ts","import * as geometrics from \"geometrics\"\r\nimport Pool from \"Pool\"\r\n\r\nconst pool: Pool<Uint16Array> = new Pool(() => { return new Uint16Array(geometrics.CHUNK_SIZE_CUBED * geometrics.facesPerCube) })\r\n\r\nexport default pool\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/client/engine/chunk/EngineChunkQuadLookupPool.ts"],"sourceRoot":""}