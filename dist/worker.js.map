{"version":3,"sources":["webpack:///webpack/bootstrap 9c27db698bd0745f6b33","webpack:///./src/common/geometrics.ts","webpack:///./src/common/v3.ts","webpack:///./src/common/Pool.ts","webpack:///./src/common/BlockTypes.ts","webpack:///./src/client/engine/chunk/EngineChunkVertexArrayPool.ts","webpack:///./src/client/ChunkData.ts","webpack:///./src/client/worker/WorkerManager.ts","webpack:///./src/client/engine/chunk/EngineChunkBuilder.ts","webpack:///./src/client/worker.ts","webpack:///./src/client/worker/WorkerObligation.ts","webpack:///./src/client/worker/TaskDrawInternalVerts.ts","webpack:///./src/common/BlockPos.ts","webpack:///./src/client/engine/chunk/EngineChunkQuadWriter.ts","webpack:///./src/client/worker/TaskGenerateAndMeshChunk.ts","webpack:///./src/client/singleplayer/ChunkGeneration.ts","webpack:///./node_modules/libnoise/artifacts/js/libnoise.js","webpack:///./src/client/engine/chunk/EngineChunkQuadLookupPool.ts"],"names":["__webpack_require__","moduleId","installedModules","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","CHUNK_SIZE","CHUNK_SIZE_SQUARED","CHUNK_SIZE_CUBED","facesPerCube","maxQuadsPerMesh","quadVertexElementSize","quadVertexByteSize","Uint32Array","BYTES_PER_ELEMENT","T","id","axis","axisDelta","verts","dx","dy","dz","size","deltaIndex","B","N","S","E","W","key","side","deltaV3","__WEBPACK_IMPORTED_MODULE_0_v3__","tangents","opposite","Sides","byName","TOP","BOTTOM","NORTH","SOUTH","EAST","WEST","byId","byAxis","each","callback","sideId","v3","x","y","z","this","a","Float32Array","v","clone","set","setFrom","b","setSum","toString","lengthSqr","ax","ay","az","length","Math","sqrt","ceil","floor","negate","invert","normalize","lenSqr","multiplyScalar","scalar","divideScalar","add","that","subtract","multiply","divide","dot","cross","bx","by","bz","lerp","t","exactEquals","equals","abs","max","Pool","createCallback","releaseCallback","items","acquire","pop","release","item","push","addBlockType","tileIndex","BlockTypes","blockType","BlockType","_this","textureSides","makeTextureSide","setSideTile","__webpack_exports__","createPool","__WEBPACK_IMPORTED_MODULE_1_Pool__","__WEBPACK_IMPORTED_MODULE_0_geometrics__","mainPool","vertexArray","createPrefilledPool","existingItems","pool","ChunkData","pos","__WEBPACK_IMPORTED_MODULE_2_v3__","blocks","Uint8Array","setChunkPos","chunkPos","processQueue","inactiveWorkerControllers","queuedTasks","task","shift","worker","assignedWorkerId","workerId","startWorker","startResponse","onStart","requestPayload","transferableObjects","activeTasksByWorkerId","taskId","start","taskType","responsePayload","cancelled","onCancelled","onComplete","taskIdCounter","taskFromQueue","task_1","splice","workerControllers","cancel","WorkerController","addEventListener","e","data","activeTaskId","onResponse","undefined","activeTaskType","postMessage","cancelTask","calculateVertexColours","airBlockPos","brightnesses","tangentIndex","tangentSide","edgeOccludingBlockPos","setAdjacentToBlockPos","blockDataSource","isTransparent","diagonalTangentSide","cornerOccludingBlockPos","occludedBrightnesses","__WEBPACK_IMPORTED_MODULE_2_BlockPos__","__WEBPACK_IMPORTED_MODULE_5_v3__","ChunkPrewriter","blockData","quadIdsByBlockAndSide","vertexArrayPool","quadCount","vertexArrays","currentVertexArray","addVertexArray","addQuad","blockPos","uvs","quadId","__WEBPACK_IMPORTED_MODULE_3__EngineChunkQuadWriter__","drawInternalChunkQuads","solidBlockPos","eachBlockInChunk","__WEBPACK_IMPORTED_MODULE_1_BlockTypes__","reusableVertexArrays","__WEBPACK_IMPORTED_MODULE_4__EngineChunkVertexArrayPool__","prewriter","unusedVertexArrays","unstitchChunk","chunk","eachBlockOnFace","removeQuad","stitchChunks","newCenterChunk","fixAO","getQuadId","blockTypeId","getBlockData","aoAirBlockPos","engineChunk","updateQuadAO","addFace","nearBlockPos","farBlockPos","axis1","sideIndex1","side1","faceNeighbourChunk","neighboursBySideId","nearIsTransparent","farIsTransparent","axis2","sideIndex2","side2","edgeNeighbourChunk","eachBlockOnEdge","tangentAxis","sideIndex3","side3","cornerNeighbourChunk","setBlockOnCorner","__WEBPACK_IMPORTED_MODULE_0__worker_WorkerObligation__","__WEBPACK_IMPORTED_MODULE_1__worker_TaskDrawInternalVerts__","__WEBPACK_IMPORTED_MODULE_2__worker_TaskGenerateAndMeshChunk__","taskHandlersArray","ctx","self","taskHandlersByType","forEach","taskHandler","event","console","error","work","__WEBPACK_IMPORTED_MODULE_1__WorkerManager__","queue","chunkData","quadIdsByBlockAndSidePool","initialVertexArrays","__WEBPACK_IMPORTED_MODULE_3__engine_chunk_EngineChunkVertexArrayPool__","buffer","map","completePayload","Uint16Array","cancelledPayload","__WEBPACK_IMPORTED_MODULE_0__ChunkData__","cancelledQuadIdsByBlockAndSide","responseCallback","fill","_a","__WEBPACK_IMPORTED_MODULE_2__engine_chunk_EngineChunkBuilder__","arr","BlockPos","blockDataOverride","__WEBPACK_IMPORTED_MODULE_1_v3__","recalculateIndex","getWorldPoint","outV3","worldPos","getBlockType","__WEBPACK_IMPORTED_MODULE_2__BlockTypes__","isOpaque","refBlockPos","newAxisPos","newIndex","neighbourChunk","freeAxis1","freeAxis2","freeAxis","drawQuad","flipQuad","packedInt0","packedInt1","vertexArrayCursor","__WEBPACK_IMPORTED_MODULE_2__WorkerManager__","__WEBPACK_IMPORTED_MODULE_1__ChunkData__","__WEBPACK_IMPORTED_MODULE_6__engine_chunk_EngineChunkQuadLookupPool__","__WEBPACK_IMPORTED_MODULE_5__engine_chunk_EngineChunkVertexArrayPool__","chunkPosRaw","__WEBPACK_IMPORTED_MODULE_3__singleplayer_ChunkGeneration__","__WEBPACK_IMPORTED_MODULE_4__engine_chunk_EngineChunkBuilder__","chunkBlocks","chunkBlockIndex","sampleVector","groundHeight","ridged0","getValue","depth","__WEBPACK_IMPORTED_MODULE_2_BlockTypes__","air","snow","stone","dirt","grass","quality","__WEBPACK_IMPORTED_MODULE_3_libnoise__","QualityMode","MEDIUM","generator","Perlin","RidgedMultifractal","$hx_exports","$extend","from","fields","Inherit","proto","__name__","haxe_ds_ArraySort","sort","cmp","rec","to","middle","_g1","_g","j","swap","doMerge","pivot","len1","len2","first_cut","second_cut","len11","len22","lower","upper","rotate","new_mid","mid","gcd","val","p1","p2","half","len","tmp","js__$Boot_HaxeError","Error","message","String","captureStackTrace","wrap","__super__","js_Boot","__string_rec","__ename__","Array","__enum__","str","str1","_g11","_g2","i2","tostr","s2","k","str2","hasp","substring","libnoise_ModuleBase","count","this1","index","value","libnoise_QualityMode","__constructs__","LOW","HIGH","libnoise_E_$QualityMode","libnoise_Utils","GradientCoherentNoise3D","seed","x0","x1","y0","y1","z0","z1","xs","ys","zs","value1","value2","MapQuinticSCurve","n0","GradientNoise3D","n1","ix0","InterpolateLinear","ix1","iy0","iy1","fx","fy","fz","ix","iy","iz","GeneratorNoiseX","GeneratorNoiseY","GeneratorNoiseZ","GeneratorSeed","GeneratorShift","Randoms","InterpolateCubic","position","fmod","MakeInt32Range","MapCubicSCurve","a3","a4","ValueNoise3D","ValueNoise3DInt","Clamp","min","libnoise_generator_Billow","frequency","lacunarity","persistence","octaves","curp","nx","ny","nz","_seed","signal","libnoise_generator_Checker","libnoise_generator_Const","libnoise_generator_Cylinder","dfc","dfss","dfls","libnoise_generator_Perlin","cp","libnoise_generator_RidgedMultifractal","weights","updateWeights","weight","f","pow","libnoise_generator_Sphere","libnoise_generator_Voronoi","displacement","distance","xi","md","xc","yc","zc","zcu","_g3","ycu","_g5","_g4","xcu","xp","yp","zp","xd","yd","zd","xd1","yd1","zd1","libnoise_operator_Abs","input","libnoise_operator_Add","lhs","rhs","libnoise_operator_Blend","controller","set_controller","get_controller","libnoise_operator_Cache","cached","cx","cy","cz","libnoise_operator_Clamp","libnoise_operator_Curve","controlPointCount","output","vec","clear","smv","ip","i0","max1","i1","max2","max3","i3","ip0","libnoise_operator_Displace","exponent","set_X","get_X","set_Y","get_Y","set_Z","get_Z","libnoise_operator_Exponent","libnoise_operator_Invert","libnoise_operator_Max","libnoise_operator_Min","libnoise_operator_Multiply","libnoise_operator_Power","libnoise_operator_Rotate","rx","ry","rz","setAngles","_rx","_ry","_rz","cos","sin","x1Matrix","y1Matrix","z1Matrix","x2Matrix","y2Matrix","z2Matrix","x3Matrix","y3Matrix","z3Matrix","libnoise_operator_Scale","sx","sy","sz","libnoise_operator_ScaleBias","scale","bias","libnoise_operator_Select","fallOff","inputA","inputB","cv","lc","lc1","libnoise_operator_Subtract","libnoise_operator_Terrace","inverted","generate","steps","ts","v0","v1","libnoise_operator_Translate","libnoise_operator_Turbulence","power","distortX","distortY","distortZ","xDistort","yDistort","zDistort","setFrequency","setRoughness","roughness","setSeed","SQRT3","OctavesMaximum","Deg2Rad","X0","Y0","Z0","X1","Y1","Z1","X2","Y2","Z2"],"mappings":"aAIA,SAAAA,EAAAC,GAGA,GAAAC,EAAAD,GACA,OAAAC,EAAAD,GAAAE,QAGA,IAAAC,EAAAF,EAAAD,IACAI,EAAAJ,EACAK,GAAA,EACAH,YAUA,OANAI,EAAAN,GAAAO,KAAAJ,EAAAD,QAAAC,IAAAD,QAAAH,GAGAI,EAAAE,GAAA,EAGAF,EAAAD,QAvBA,IAAAD,KA4BAF,EAAAS,EAAAF,EAGAP,EAAAU,EAAAR,EAGAF,EAAAW,EAAA,SAAAR,EAAAS,EAAAC,GACAb,EAAAc,EAAAX,EAAAS,IACAG,OAAAC,eAAAb,EAAAS,GACAK,cAAA,EACAC,YAAA,EACAC,IAAAN,KAMAb,EAAAoB,EAAA,SAAAhB,GACA,IAAAS,EAAAT,KAAAiB,WACA,WAA2B,OAAAjB,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAJ,EAAAW,EAAAE,EAAA,IAAAA,GACAA,GAIAb,EAAAc,EAAA,SAAAQ,EAAAC,GAAsD,OAAAR,OAAAS,UAAAC,eAAAjB,KAAAc,EAAAC,IAGtDvB,EAAA0B,EAAA,GAGA1B,IAAA2B,EAAA,6SC3DaC,EAAqB,GACrBC,EAAqBD,EAAaA,EAClCE,EAAqBF,EAAaA,EAAaA,EAE/CG,EAAmB,EAMnBC,EAAmB,KAEnBC,EAAwB,EACxBC,EAAqBC,YAAYC,kBAAoBH,EA8B5DN,GA7BsDQ,YAAYC,mBA8BvEC,GAAKzB,KAAM,MAAO0B,GAAI,EAAGC,KAAM,EAAGC,UAAW,EAAGC,OAAQ,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAKC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,KAAMjB,EAAYkB,WAAY,GACjJC,GAAKnC,KAAM,SAAU0B,GAAI,EAAGC,KAAM,EAAGC,WAAY,EAAGC,OAAQ,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAKC,GAAI,EAAGC,IAAK,EAAGC,GAAI,EAAGC,KAAMjB,EAAYkB,YAAa,GACvJE,GAAKpC,KAAM,QAAS0B,GAAI,EAAGC,KAAM,EAAGC,UAAW,EAAGC,OAAQ,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAKC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,KAAMjB,EAAYkB,WAAYlB,GACnJqB,GAAKrC,KAAM,QAAS0B,GAAI,EAAGC,KAAM,EAAGC,WAAY,EAAGC,OAAQ,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAKC,GAAI,EAAGC,GAAI,EAAGC,IAAK,EAAGC,KAAMjB,EAAYkB,YAAalB,GACtJsB,GAAKtC,KAAM,OAAQ0B,GAAI,EAAGC,KAAM,EAAGC,UAAW,EAAGC,OAAQ,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAKC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,KAAMjB,EAAYkB,WAAYjB,GAClJsB,GAAKvC,KAAM,OAAQ0B,GAAI,EAAGC,KAAM,EAAGC,WAAY,EAAGC,OAAQ,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAKC,IAAK,EAAGC,GAAI,EAAGC,GAAI,EAAGC,KAAMjB,EAAYkB,YAAajB,KAGtJ,IAAK,IAAIuB,KAAOzB,EAAG,CAClB,IAAM0B,EAAO1B,EAAEyB,GACfC,EAAKC,QAAU,IAAIC,EAAA,EAAGF,EAAKX,GAAIW,EAAKV,GAAIU,EAAKT,IAG9CjB,EAAEU,EAAEmB,WAAcH,KAAM1B,EAAEqB,EAAGQ,UAAW7B,EAAEuB,EAAGvB,EAAEwB,KAAQE,KAAM1B,EAAEuB,EAAGM,UAAW7B,EAAEsB,EAAGtB,EAAEqB,KAAQK,KAAM1B,EAAEsB,EAAGO,UAAW7B,EAAEwB,EAAGxB,EAAEuB,KAAQG,KAAM1B,EAAEwB,EAAGK,UAAW7B,EAAEqB,EAAGrB,EAAEsB,KAC9JtB,EAAEoB,EAAES,WAAcH,KAAM1B,EAAEsB,EAAGO,UAAW7B,EAAEwB,EAAGxB,EAAEuB,KAAQG,KAAM1B,EAAEuB,EAAGM,UAAW7B,EAAEsB,EAAGtB,EAAEqB,KAAQK,KAAM1B,EAAEqB,EAAGQ,UAAW7B,EAAEuB,EAAGvB,EAAEwB,KAAQE,KAAM1B,EAAEwB,EAAGK,UAAW7B,EAAEqB,EAAGrB,EAAEsB,KAC9JtB,EAAEqB,EAAEQ,WAAcH,KAAM1B,EAAEuB,EAAGM,UAAW7B,EAAEU,EAAGV,EAAEoB,KAAQM,KAAM1B,EAAEU,EAAGmB,UAAW7B,EAAEuB,EAAGvB,EAAEwB,KAAQE,KAAM1B,EAAEwB,EAAGK,UAAW7B,EAAEoB,EAAGpB,EAAEU,KAAQgB,KAAM1B,EAAEoB,EAAGS,UAAW7B,EAAEwB,EAAGxB,EAAEuB,KAC9JvB,EAAEsB,EAAEO,WAAcH,KAAM1B,EAAEwB,EAAGK,UAAW7B,EAAEoB,EAAGpB,EAAEU,KAAQgB,KAAM1B,EAAEU,EAAGmB,UAAW7B,EAAEuB,EAAGvB,EAAEwB,KAAQE,KAAM1B,EAAEuB,EAAGM,UAAW7B,EAAEU,EAAGV,EAAEoB,KAAQM,KAAM1B,EAAEoB,EAAGS,UAAW7B,EAAEwB,EAAGxB,EAAEuB,KAC9JvB,EAAEuB,EAAEM,WAAcH,KAAM1B,EAAEsB,EAAGO,UAAW7B,EAAEU,EAAGV,EAAEoB,KAAQM,KAAM1B,EAAEU,EAAGmB,UAAW7B,EAAEqB,EAAGrB,EAAEsB,KAAQI,KAAM1B,EAAEqB,EAAGQ,UAAW7B,EAAEoB,EAAGpB,EAAEU,KAAQgB,KAAM1B,EAAEoB,EAAGS,UAAW7B,EAAEsB,EAAGtB,EAAEqB,KAC9JrB,EAAEwB,EAAEK,WAAcH,KAAM1B,EAAEqB,EAAGQ,UAAW7B,EAAEoB,EAAGpB,EAAEU,KAAQgB,KAAM1B,EAAEU,EAAGmB,UAAW7B,EAAEqB,EAAGrB,EAAEsB,KAAQI,KAAM1B,EAAEsB,EAAGO,UAAW7B,EAAEU,EAAGV,EAAEoB,KAAQM,KAAM1B,EAAEoB,EAAGS,UAAW7B,EAAEsB,EAAGtB,EAAEqB,KAE9JrB,EAAEU,EAAEoB,SAAW9B,EAAEoB,EACjBpB,EAAEoB,EAAEU,SAAW9B,EAAEU,EACjBV,EAAEqB,EAAES,SAAW9B,EAAEsB,EACjBtB,EAAEsB,EAAEQ,SAAW9B,EAAEqB,EACjBrB,EAAEuB,EAAEO,SAAW9B,EAAEwB,EACjBxB,EAAEwB,EAAEM,SAAW9B,EAAEuB,EAEV,IAAMQ,GACZC,QAAUC,IAAKjC,EAAEU,EAAGwB,OAAQlC,EAAEoB,EAAGe,MAAOnC,EAAEqB,EAAGe,MAAOpC,EAAEsB,EAAGe,KAAMrC,EAAEuB,EAAGe,KAAMtC,EAAEwB,GAC5Ee,MAAOvC,EAAEU,EAAGV,EAAEoB,EAAGpB,EAAEqB,EAAGrB,EAAEsB,EAAGtB,EAAEuB,EAAGvB,EAAEwB,GAClCgB,SAAUxC,EAAEuB,EAAGvB,EAAEwB,IAAKxB,EAAEU,EAAGV,EAAEoB,IAAKpB,EAAEqB,EAAGrB,EAAEsB,IACzCmB,KAAI,SAACC,GACJ,IAAK,IAAIC,EAAS,EAAGA,EAAS,EAAGA,GAAU,EAC1CD,EAASX,EAAMQ,KAAKI,oCC/EvB,IAEAC,EAAA,WAIC,SAAAA,EAAYC,EAAOC,EAAOC,QAAd,IAAAF,MAAA,QAAO,IAAAC,MAAA,QAAO,IAAAC,MAAA,GACzBC,KAAKC,EAAI,IAAIC,cAAeL,EAAGC,EAAGC,IA+IpC,OA7IC3D,OAAAC,eAAIuD,EAAA/C,UAAA,SAAJ,WAAU,OAAOmD,KAAKC,EAAE,QAGxB,SAAME,GAAaH,KAAKC,EAAE,GAAKE,mCAF/B/D,OAAAC,eAAIuD,EAAA/C,UAAA,SAAJ,WAAU,OAAOmD,KAAKC,EAAE,QAGxB,SAAME,GAAaH,KAAKC,EAAE,GAAKE,mCAF/B/D,OAAAC,eAAIuD,EAAA/C,UAAA,SAAJ,WAAU,OAAOmD,KAAKC,EAAE,QAGxB,SAAME,GAAaH,KAAKC,EAAE,GAAKE,mCAC/BP,EAAA/C,UAAAuD,MAAA,WACC,OAAO,IAAIR,EAAGI,KAAKC,EAAE,GAAID,KAAKC,EAAE,GAAID,KAAKC,EAAE,KAE5CL,EAAA/C,UAAAwD,IAAA,SAAIR,EAAWC,EAAWC,GAIzB,OAHAC,KAAKC,EAAE,GAAKJ,EACZG,KAAKC,EAAE,GAAKH,EACZE,KAAKC,EAAE,GAAKF,EACLC,MAERJ,EAAA/C,UAAAyD,QAAA,SAAQC,GAIP,OAHAP,KAAKC,EAAE,GAAKM,EAAEN,EAAE,GAChBD,KAAKC,EAAE,GAAKM,EAAEN,EAAE,GAChBD,KAAKC,EAAE,GAAKM,EAAEN,EAAE,GACTD,MAERJ,EAAA/C,UAAA2D,OAAA,SAAOD,EAAOxE,GAIb,OAHAiE,KAAKC,EAAE,GAAKM,EAAEN,EAAE,GAAKlE,EAAEkE,EAAE,GACzBD,KAAKC,EAAE,GAAKM,EAAEN,EAAE,GAAKlE,EAAEkE,EAAE,GACzBD,KAAKC,EAAE,GAAKM,EAAEN,EAAE,GAAKlE,EAAEkE,EAAE,GAClBD,MAERJ,EAAA/C,UAAA4D,SAAA,WACC,OAAOT,KAAKC,EAAE,GAAK,IAAMD,KAAKC,EAAE,GAAK,IAAMD,KAAKC,EAAE,IAEnD7D,OAAAC,eAAIuD,EAAA/C,UAAA,UAAJ,WACC,OAAOmD,KAAKC,EAAE,GAAK,IAAMD,KAAKC,EAAE,GAAK,IAAMD,KAAKC,EAAE,oCAInDL,EAAA/C,UAAA6D,UAAA,WACC,IAAMC,EAAKX,KAAKC,EAAE,GAAIW,EAAKZ,KAAKC,EAAE,GAAIY,EAAKb,KAAKC,EAAE,GAClD,OAAOU,EAAKA,EAAKC,EAAKA,EAAKC,EAAKA,GAEjCjB,EAAA/C,UAAAiE,OAAA,WACC,OAAOC,KAAKC,KAAKhB,KAAKU,cAEvBd,EAAA/C,UAAAoE,KAAA,WAIC,OAHAjB,KAAKC,EAAE,GAAKc,KAAKE,KAAKjB,KAAKC,EAAE,IAC7BD,KAAKC,EAAE,GAAKc,KAAKE,KAAKjB,KAAKC,EAAE,IAC7BD,KAAKC,EAAE,GAAKc,KAAKE,KAAKjB,KAAKC,EAAE,IACtBD,MAERJ,EAAA/C,UAAAqE,MAAA,WAIC,OAHAlB,KAAKC,EAAE,GAAKc,KAAKG,MAAMlB,KAAKC,EAAE,IAC9BD,KAAKC,EAAE,GAAKc,KAAKG,MAAMlB,KAAKC,EAAE,IAC9BD,KAAKC,EAAE,GAAKc,KAAKG,MAAMlB,KAAKC,EAAE,IACvBD,MAERJ,EAAA/C,UAAAsE,OAAA,WAIC,OAHAnB,KAAKC,EAAE,IAAOD,KAAKC,EAAE,GACrBD,KAAKC,EAAE,IAAOD,KAAKC,EAAE,GACrBD,KAAKC,EAAE,IAAOD,KAAKC,EAAE,GACdD,MAERJ,EAAA/C,UAAAuE,OAAA,WAIC,OAHApB,KAAKC,EAAE,GAAK,EAAID,KAAKC,EAAE,GACvBD,KAAKC,EAAE,GAAK,EAAID,KAAKC,EAAE,GACvBD,KAAKC,EAAE,GAAK,EAAID,KAAKC,EAAE,GAChBD,MAERJ,EAAA/C,UAAAwE,UAAA,WACC,IAAMC,EAAStB,KAAKU,YAIpB,OAHIY,EAAS,GACZtB,KAAKuB,eAAe,EAAIR,KAAKC,KAAKM,IAE5BtB,MAIRJ,EAAA/C,UAAA0E,eAAA,SAAeC,GAId,OAHAxB,KAAKC,EAAE,IAAMuB,EACbxB,KAAKC,EAAE,IAAMuB,EACbxB,KAAKC,EAAE,IAAMuB,EACNxB,MAERJ,EAAA/C,UAAA4E,aAAA,SAAaD,GAIZ,OAHAxB,KAAKC,EAAE,IAAMuB,EACbxB,KAAKC,EAAE,IAAMuB,EACbxB,KAAKC,EAAE,IAAMuB,EACNxB,MAIRJ,EAAA/C,UAAA6E,IAAA,SAAIC,GAIH,OAHA3B,KAAKC,EAAE,IAAM0B,EAAK1B,EAAE,GACpBD,KAAKC,EAAE,IAAM0B,EAAK1B,EAAE,GACpBD,KAAKC,EAAE,IAAM0B,EAAK1B,EAAE,GACbD,MAERJ,EAAA/C,UAAA+E,SAAA,SAASD,GAIR,OAHA3B,KAAKC,EAAE,IAAM0B,EAAK1B,EAAE,GACpBD,KAAKC,EAAE,IAAM0B,EAAK1B,EAAE,GACpBD,KAAKC,EAAE,IAAM0B,EAAK1B,EAAE,GACbD,MAERJ,EAAA/C,UAAAgF,SAAA,SAASF,GAIR,OAHA3B,KAAKC,EAAE,IAAM0B,EAAK1B,EAAE,GACpBD,KAAKC,EAAE,IAAM0B,EAAK1B,EAAE,GACpBD,KAAKC,EAAE,IAAM0B,EAAK1B,EAAE,GACbD,MAERJ,EAAA/C,UAAAiF,OAAA,SAAOH,GAIN,OAHA3B,KAAKC,EAAE,IAAM0B,EAAK1B,EAAE,GACpBD,KAAKC,EAAE,IAAM0B,EAAK1B,EAAE,GACpBD,KAAKC,EAAE,IAAM0B,EAAK1B,EAAE,GACbD,MAERJ,EAAA/C,UAAAkF,IAAA,SAAIJ,GACH,OAAO3B,KAAKC,EAAE,GAAK0B,EAAK1B,EAAE,GAAKD,KAAKC,EAAE,GAAK0B,EAAK1B,EAAE,GAAKD,KAAKC,EAAE,GAAK0B,EAAK1B,EAAE,IAE3EL,EAAA/C,UAAAmF,MAAA,SAAML,GACL,IAAMhB,EAAKX,KAAKC,EAAE,GAAIW,EAAKZ,KAAKC,EAAE,GAAIY,EAAKb,KAAKC,EAAE,GAC5CgC,EAAKN,EAAK1B,EAAE,GAAIiC,EAAKP,EAAK1B,EAAE,GAAIkC,EAAKR,EAAK1B,EAAE,GAIlD,OAHAD,KAAKC,EAAE,GAAKW,EAAKuB,EAAKtB,EAAKqB,EAC3BlC,KAAKC,EAAE,GAAKY,EAAKoB,EAAKtB,EAAKwB,EAC3BnC,KAAKC,EAAE,GAAKU,EAAKuB,EAAKtB,EAAKqB,EACpBjC,MAERJ,EAAA/C,UAAAuF,KAAA,SAAKT,EAAUU,GACd,IAAM1B,EAAKX,KAAKC,EAAE,GAAIW,EAAKZ,KAAKC,EAAE,GAAIY,EAAKb,KAAKC,EAAE,GAIlD,OAHAD,KAAKC,EAAE,GAAKW,EAAKyB,GAAKV,EAAK1B,EAAE,GAAKU,GAClCX,KAAKC,EAAE,GAAKY,EAAKwB,GAAKV,EAAK1B,EAAE,GAAKW,GAClCZ,KAAKC,EAAE,GAAKU,EAAK0B,GAAKV,EAAK1B,EAAE,GAAKY,GAC3Bb,MAERJ,EAAA/C,UAAAyF,YAAA,SAAYX,GACX,OAAO3B,KAAKC,EAAE,KAAO0B,EAAK1B,EAAE,IAAMD,KAAKC,EAAE,KAAO0B,EAAK1B,EAAE,IAAMD,KAAKC,EAAE,KAAO0B,EAAK1B,EAAE,IAEnFL,EAAA/C,UAAA0F,OAAA,SAAOZ,GACN,IAAMhB,EAAKX,KAAKC,EAAE,GAAIW,EAAKZ,KAAKC,EAAE,GAAIY,EAAKb,KAAKC,EAAE,GAC5CgC,EAAKN,EAAK1B,EAAE,GAAIiC,EAAKP,EAAK1B,EAAE,GAAIkC,EAAKR,EAAK1B,EAAE,GAClD,OAAQc,KAAKyB,IAAI7B,EAAKsB,IAlJR,KAkJyBlB,KAAK0B,IAAI,EAAK1B,KAAKyB,IAAI7B,GAAKI,KAAKyB,IAAIP,KAC3ElB,KAAKyB,IAAI5B,EAAKsB,IAnJD,KAmJkBnB,KAAK0B,IAAI,EAAK1B,KAAKyB,IAAI5B,GAAKG,KAAKyB,IAAIN,KACpEnB,KAAKyB,IAAI3B,EAAKsB,IApJD,KAoJkBpB,KAAK0B,IAAI,EAAK1B,KAAKyB,IAAI3B,GAAKE,KAAKyB,IAAIL,KAEvEvC,EApJA,uCCFA,IAAA8C,EAAA,WAIC,SAAAA,EAAoBC,EAAiCC,GAAjC5C,KAAA2C,iBAAiC3C,KAAA4C,kBACpD5C,KAAK6C,SAcP,OAZCH,EAAA7F,UAAAiG,QAAA,WACC,OAAI9C,KAAK6C,MAAM/B,OACPd,KAAK6C,MAAME,MAEZ/C,KAAK2C,kBAEbD,EAAA7F,UAAAmG,QAAA,SAAQC,GACHjD,KAAK4C,iBACR5C,KAAK4C,gBAAgBK,GAEtBjD,KAAK6C,MAAMK,KAAKD,IAElBP,EAnBA,uCCwCA,SAAAS,EAAsBlH,EAAcmH,GACnC,IAAIzF,EAAK0F,EAAW9D,KAAKuB,OACrBwC,EAAY,IAAIC,EAAU5F,EAAI1B,EAAMmH,GAGxC,OAFAC,EAAW9D,KAAK5B,GAAM2F,EACtBD,EAAWrE,OAAO/C,GAAQqH,EACnBA,MA3CFvE,OAAQ,EAEdwE,EAAA,WAMC,SAAAA,EAAY5F,EAAY1B,EAAcmH,GAAtC,IAAAI,EAAAxD,KACCA,KAAKrC,GAAKA,EACVqC,KAAK/D,KAAOA,EACZ+D,KAAKyD,gBACL1E,EAAMU,KAAK,SAAAf,GACV8E,EAAKC,aAAa/E,EAAKf,IAAM6F,EAAKE,gBAAgBN,KAYrD,OATCG,EAAA1G,UAAA8G,YAAA,SAAYjF,EAA2B0E,GAEtC,OADApD,KAAKyD,aAAa/E,EAAKf,IAAMqC,KAAK0D,gBAAgBN,GAC3CpD,MAERuD,EAAA1G,UAAA6G,gBAAA,SAAgBN,GAGf,OAFSA,EAAY,GACZrC,KAAKG,MAAMkC,EAAY,MAGlCG,EAvBA,GA8BMF,GACL9D,QACAP,WAED4E,EAAA,IAUAT,EAAa,MAAO,GACpBA,EAAa,QAAS,GACtBA,EAAa,OAAQ,GACrBA,EAAa,QAAS,GAAGQ,YAAY5E,EAAMC,OAAOC,IAAK,GAAG0E,YAAY5E,EAAMC,OAAOE,OAAQ,GAC3FiE,EAAa,SAAU,GACvBA,EAAa,QAAS,GACtBA,EAAa,SAAU,IACvBA,EAAa,UAAW,IACxBA,EAAa,OAAQ,IACrBA,EAAa,SAAU,IACvBA,EAAa,OAAQ,IAAIQ,YAAY5E,EAAMC,OAAOC,IAAK,IAAI0E,YAAY5E,EAAMC,OAAOE,OAAQ,IAC5FiE,EAAa,WAAY,IACzBA,EAAa,WAAY,IACzBA,EAAa,WAAY,IACzBA,EAAa,eAAgB,IAC7BA,EAAa,WAAY,IACzBA,EAAa,cAAe,IAC5BA,EAAa,eAAgB,IAC7BA,EAAa,cAAe,IAC5BA,EAAa,OAAQ,IACrBA,EAAa,MAAO,IACpBA,EAAa,cAAe,IAAIQ,YAAY5E,EAAMC,OAAOC,IAAK,IAAI0E,YAAY5E,EAAMC,OAAOE,OAAQ,GACnGiE,EAAa,SAAU,IAAIQ,YAAY5E,EAAMC,OAAOC,IAAK,IAAI0E,YAAY5E,EAAMC,OAAOE,OAAQ,GAC9FiE,EAAa,oBAAqB,KAClCA,EAAa,sBAAuB,KACpCA,EAAa,YAAa,KAAKQ,YAAY5E,EAAMC,OAAOC,IAAK,KAAK0E,YAAY5E,EAAMC,OAAOE,OAAQ,mCCtEnG,SAAA2E,IACC,OAAO,IAAIC,EAAA,EAAK,WACf,OAAO,IAAItG,YAAYuG,EAAA,EAA6BA,EAAA,uBAItDH,EAAA,GACCI,SAAUH,IACVf,QAAA,WACC,OAAO9C,KAAKgE,SAASlB,WAEtBE,QAAO,SAACiB,GACPjE,KAAKgE,SAAShB,QAAQiB,IAEvBC,oBAAA,SAAoBC,GACnB,IAAMC,EAAOP,IAEb,OADAO,EAAKvB,MAAQsB,EACNC,2DChBTC,EAAA,WAQC,SAAAA,IACCrE,KAAKsE,IAAM,IAAIC,EAAA,EACfvE,KAAKrC,GAAK,cACVqC,KAAKwE,OAAS,IAAIC,WAAWV,EAAA,GAU/B,OARCM,EAAAxH,UAAA6H,YAAA,SAAYC,GACX3E,KAAKsE,IAAIhE,QAAQqE,GACjB3E,KAAKrC,GAAKgH,EAASlE,YAGb4D,EAAAD,KAAwB,IAAIN,EAAA,EAAK,WACvC,OAAO,IAAIO,IAEbA,EArBA,uCCwGA,SAAAO,IACC,KAAOC,EAA0B/D,OAAS,GAAKgE,EAAYhE,OAAS,GAAG,CACtE,IAAMiE,EAAOD,EAAYE,QACnBC,EAASJ,EAA0B9B,MACzCgC,EAAKG,iBAAmBD,EAAOE,SAC/BC,EAAYH,EAAQF,IAItB,SAAAK,EAAqBH,EAA0BF,GAG9C,IAAMM,EAAgBN,EAAKO,UAC3B,GAAKD,EAAL,CACQ,IAAAE,EAAAF,EAAAE,eAAgBC,EAAAH,EAAAG,oBAExBC,EAAsBV,EAAKW,QAAUX,EAErCE,EAAOU,MAAMZ,EAAKW,OAAQX,EAAKa,SAAUL,EAAgBC,EAAqB,SAACK,UAEvEJ,EAAsBV,EAAKW,QAClCb,EAA0B3B,KAAK+B,GAC/BL,IACIG,EAAKe,UACRf,EAAKgB,YAAYF,GAGjBd,EAAKiB,WAAWH,UApCb,SAAoBD,EAAkBN,EAAwBU,EAA8BD,GAEjG,IAAML,EADNO,GAAiB,EAEXlB,GAAeW,OAAMA,EAAEE,SAAQA,EAAEN,QAAOA,EAAEU,WAAUA,EAAED,YAAWA,GAGvE,OAFAjB,EAAY5B,KAAK6B,GACjBH,IACOc,GAnER9B,EAAA,EAsGM,SAAqB8B,GAI1B,IAAK,IADDQ,EACKxK,EAAI,EAAGA,EAAIoJ,EAAYhE,OAAQpF,GAAK,EAAG,CAC/C,IAAIyK,EAAOrB,EAAYpJ,GACvB,GAAIyK,EAAKT,SAAWA,EAAQ,CAC3BQ,EAAgBC,EAChBrB,EAAYsB,OAAO1K,EAAG,GACtB,OAGF,GAAIwK,EACH,OAAO,EAGR,IAAMnB,EAAOU,EAAsBC,GASnC,OARIX,IACwCsB,EAAkBtB,EAAKG,kBACjDoB,SACjBvB,EAAKe,WAAY,IAKX,IA/HR,WAMC,SAAAS,EAAmBtB,EAAuBE,GAA1C,IAAA3B,EAAAxD,KAAmBA,KAAAiF,SAAuBjF,KAAAmF,WACzCnF,KAAKiF,OAAOuB,iBAAiB,UAAW,SAACC,GACxC,IAAMZ,EAAiCY,EAAEC,KACzC,GAAIb,EAAgBH,SAAWlC,EAAKmD,cAC/BnD,EAAKoD,WAAV,CAGA,IAAMA,EAAapD,EAAKoD,WACxBpD,EAAKoD,gBAAaC,EAClBD,EAAWf,MAGbU,EAAA1J,UAAA8I,MAAA,SAAMD,EAAgBE,EAAkBL,EAA+BC,EAAiCoB,GACvG5G,KAAK4G,WAAaA,EAClB5G,KAAK2G,aAAejB,EACpB1F,KAAK8G,eAAiBlB,EACtBL,EAAeG,OAASA,EACxBH,EAAeK,SAAWA,EAC1B5F,KAAKiF,OAAO8B,YAAYxB,EAAgBC,IAEzCe,EAAA1J,UAAAyJ,OAAA,WAECtG,KAAKiF,OAAO8B,aAAcC,WAAYhH,KAAK2G,gBA5B7C,OA+CIV,EAAwB,EACtBR,KACFY,KACExB,KACAC,mCCzEN,SAAAmC,EAAgCC,EAAuBxI,GAMtD,IAAK,IAHCyI,GAAgB,EAAG,EAAG,EAAG,GAGtBC,EAAe,EAAGA,EAAe,EAAGA,GAAgB,EAAG,CAC/D,IAAMC,EAAc3I,EAAKG,SAASuI,GAAc1I,KAGhD,GADA4I,EAAsBC,sBAAsBL,EAAaG,GACpDC,EAAsBE,gBAA3B,CAEKF,EAAsBG,kBAC1BN,EAAaC,IAAiB,EAC9BD,GAAcC,EAAe,GAAK,IAAM,GAKzC,IAAMM,EAAsBhJ,EAAKG,UAAUuI,EAAe,GAAK,GAAG1I,KAElEiJ,EAAwBJ,sBAAsBD,EAAuBI,GAChEC,EAAwBH,kBAExBG,EAAwBF,kBAC5BN,GAAcC,EAAe,GAAK,IAAM,KAI1C,IAAK,IAAI1L,EAAI,EAAGA,EAAI,EAAGA,GAAK,EAC3ByL,EAAazL,GAAKkM,EAAqBT,EAAazL,IAGrD,OAAOyL,kDAvCFS,GAAwB,EAAG,GAAK,GAAK,GAAK,GAAK,IAG/CN,EAAwB,IAAIO,EAAA,OAAShB,EAAW,IAAIiB,EAAA,EAAG,EAAG,EAAG,IAC7DH,EAA0B,IAAIE,EAAA,OAAShB,EAAW,IAAIiB,EAAA,EAAG,EAAG,EAAG,IAwCrEC,EAAA,WAMC,SAAAA,EAAoBC,EAA+BC,EAA4CC,GAA3ElI,KAAAgI,YAA+BhI,KAAAiI,wBAA4CjI,KAAAkI,kBAC9FlI,KAAKmI,UAAY,EACjBnI,KAAKoI,gBACLpI,KAAKqI,wBAAqBxB,EAmD5B,OAjDCkB,EAAAlL,UAAAyL,eAAA,WACC,IAAIrE,EAA0C,IAAIzG,YAAYwC,KAAKkI,gBAAgBpF,WAEnF,OADA9C,KAAKoI,aAAalF,KAAKe,GAChBA,GAER8D,EAAAlL,UAAA0L,QAAA,SAAQC,EAAoB9J,EAA2B+J,EAAoBtB,GAC1E,IAAIuB,EAAS1I,KAAKmI,UAClBnI,KAAKmI,WAAa,EACdnI,KAAKmI,UAAYnI,KAAKoI,aAAatH,OAASiD,EAAA,IAC/C/D,KAAKqI,mBAAqBrI,KAAKsI,kBAEhCK,EAAA,EAA+B3I,KAAKqI,mBAAoBK,EAAS3E,EAAA,EAA4ByE,EAAU9J,EAAM+J,EAAKtB,GAClHnH,KAAKiI,sBAAmC,EAAbO,EAAS9M,EAAQgD,EAAKf,IAAM+K,EAAS,GAIjEX,EAAAlL,UAAA+L,uBAAA,eAAApF,EAAAxD,KACK6I,EAAgB,IAAIhB,EAAA,OAAShB,EAAW,IAAIiB,EAAA,EAAG,EAAG,EAAG,GAAI9H,KAAKgI,WAC9Dd,EAAc,IAAIW,EAAA,OAAShB,EAAW,IAAIiB,EAAA,EAAG,EAAG,EAAG,GAAI9H,KAAKgI,WAEhEa,EAAcC,iBAAiB,WAEzBD,EAAcpB,iBAElB1D,EAAA,EAAiBtE,KAAK,SAAAf,GAIrB,GAFAwI,EAAYK,sBAAsBsB,EAAenK,GAE7CwI,EAAYM,iBAEaN,EAAYO,gBACb,CAE1B,IACIgB,EADYM,EAAA,EAAWxJ,KAAKiE,EAAKwE,UAAUa,EAAcnN,IACzC+H,aAAa/E,EAAKf,IAGlCwJ,EAAeF,EAAuBC,EAAaxI,GAEvD8E,EAAK+E,QAAQM,EAAenK,EAAM+J,EAAKtB,SAU9CY,EA5DA,GA8DAnE,EAAA,GACCgF,uBAAA,SACCZ,EACAC,EACAe,QAAA,IAAAA,UAOA,IAAMd,EAAkBe,EAAA,EAA2B/E,oBAAoB8E,GAEjEE,EAAY,IAAInB,EAAeC,EAAWC,EAAuBC,GAMvE,OALAgB,EAAUN,0BAKDT,UAJSe,EAAUf,UAIRC,aAHCc,EAAUd,aAGGe,mBAFPjB,EAAgBrF,QAK5CuG,cAAa,SAACC,EAAoB3K,GACjC,IAAM8J,EAAW,IAAIX,EAAA,EACrBW,EAASc,gBAAgBD,EAAO3K,EAAM,WACrC2K,EAAME,WAAWf,EAAU9J,MAI7B8K,aAAY,SAACC,GAkBZ,SAAAC,EAAeb,EAAyBnK,GAEvC,GADemK,EAAcc,UAAUjL,IACzB,EAAG,CAChB,IAAMkL,EAAcf,EAAcgB,eAE5BpB,EADYM,EAAA,EAAWxJ,KAAKqK,GACZnG,aAAa/E,EAAKf,IACxCmM,EAAcvC,sBAAsBsB,EAAenK,GACnD,IAAMyI,EAAeF,EAAuB6C,EAAepL,GAC3DmK,EAAckB,YAAYC,aAAanB,EAAenK,EAAM+J,EAAKtB,IAInE,SAAA8C,EAAiBpB,EAAyB3B,EAAuBxI,GAEhE,IAAMkL,EAAcf,EAAcgB,eAE5BpB,EADYM,EAAA,EAAWxJ,KAAKqK,GACZnG,aAAa/E,EAAKf,IAClCwJ,EAAeF,EAAuBC,EAAaxI,GACzDmK,EAAckB,YAAYxB,QAAQM,EAAenK,EAAM+J,EAAKtB,GAO7D,IAAK,IA3BC2C,EAAgB,IAAIjC,EAAA,OAAShB,EAAW,IAAIiB,EAAA,EAAG,EAAG,EAAG,IAuBrDoC,EAAe,IAAIrC,EAAA,EACnBsC,EAAc,IAAItC,EAAA,EAGfuC,EAAQ,EAAGA,EAAQ,EAAGA,GAAS,EACvC,IAAK,eAAIC,GACR,IAAMC,EAAQvG,EAAA,EAAiBvE,OAAO4K,GAAOC,GACvCE,EAAqBd,EAAee,mBAAmBF,EAAM3M,IACnE,GAAI4M,EAAoB,CAKvBL,EAAaZ,gBAAgBG,EAAgBa,EAAO,WACnDH,EAAY5C,sBAAsB2C,EAAcI,GAGhD,IAAMG,EAAoBP,EAAazC,gBACjCiD,EAAmBP,EAAY1C,iBAChCgD,GAAqBC,EAEzBT,EAAQC,EAAcC,EAAaG,IAE1BI,GAAoBD,GAE7BR,EAAQE,EAAaD,EAAcI,EAAMxL,UAI1C,IAAK,IAAIpD,EAAI,EAAGA,EAAI4O,EAAMzL,SAASiC,OAAQpF,GAAK,EAAG,CAClD,IAAM2L,EAAciD,EAAMzL,SAASnD,GAAGgD,KACtCgL,EAAMQ,EAAc7C,GACpBqC,EAAMS,EAAa9C,MAKrB,IAAK,IAAIsD,EAAQP,EAAQ,EAAGO,EAAQ,EAAGA,GAAS,EAC/C,IAAK,eAAIC,GACR,IAAMC,EAAQ9G,EAAA,EAAiBvE,OAAOmL,GAAOC,GACvCE,EAAqBP,EAAmBC,mBAAmBK,EAAMlN,IACvE,GAAImN,IAGHX,EAAYY,gBAAgBD,EAAoBR,EAAOO,EAAO,WAC7DnB,EAAMS,EAAaG,EAAMxL,UACzB4K,EAAMS,EAAaU,EAAM/L,UACzB,IAAMkM,EAAc,EAAIV,EAAM1M,KAAOiN,EAAMjN,KAC3C8L,EAAMS,EAAapG,EAAA,EAAiBvE,OAAOwL,GAAa,IACxDtB,EAAMS,EAAapG,EAAA,EAAiBvE,OAAOwL,GAAa,MAI3C,IAAVL,GAEH,IAAK,IAAIM,EAAa,EAAGA,EAAa,EAAGA,GAAc,EAAG,CACzD,IAAMC,EAAQnH,EAAA,EAAiBvE,OAFlB,GAEgCyL,GACvCE,EAAuBL,EAAmBN,mBAAmBU,EAAMvN,IACrEwN,IAGHhB,EAAYiB,iBAAiBD,EAAsBb,EAAOO,EAAOK,GACjExB,EAAMS,EAAaG,EAAMxL,UACzB4K,EAAMS,EAAaU,EAAM/L,UACzB4K,EAAMS,EAAae,EAAMpM,aA1BrB8L,EAAa,EAAGA,EAAa,EAAGA,GAAc,IAA9CA,KAjCHP,EAAa,EAAGA,EAAa,EAAGA,GAAc,IAA9CA,+GCvLZgB,EAAA,GACCC,EAAA,EACAC,EAAA,sCCJK,SAA+BC,GACpC,IACI7E,EACAG,EAFE2E,EAAcC,KAIdC,KACNH,EAAkBI,QAAQ,SAAAC,GAAiBF,EAAmBE,EAAYlO,IAAMkO,IAEhFJ,EAAIjF,iBAAiB,UAAW,SAACsF,GAChC,IAAMvG,EAAgCuG,EAAMpF,KAExCnB,EAAeyB,aAGVL,EACRoF,QAAQC,MAAM,iFAIdrF,EAAepB,EAAeG,OAC9BoB,EAAiBvB,EAAeK,SAEZ+F,EAAmB7E,GAC3BmF,KAAK1G,EAAgB,SAACM,EAAiBL,GAClDK,EAAgBH,OAASiB,EACzBA,OAAeE,EACfC,OAAiBD,EACjB4E,EAAI1E,YAAYlB,EAAiBL,wECpBrC5B,EAAA,GACCjG,GAHoB,wBAIpB2I,OAAM,SAACZ,GACNwG,EAAA,EAAyBxG,IAE1ByG,MAAK,SACJC,EACAC,EACArG,GAqDA,OAnDekG,EAAA,EAZI,wBAclB,WAEC,IAAMjE,EAAwBoE,EAA0BvJ,UAClDwJ,GAAwBC,EAAA,EAA2BzJ,WAYzD,OAASyC,gBATRyC,UAAWoE,EAAU5H,OAAOgI,OAC5BvE,sBAAuBA,EAAsBuE,OAC7CF,oBAAqBA,EAAoBG,IAAI,SAAAxM,GAAK,OAAAA,EAAEuM,UAO5BhH,qBAJxB4G,EAAU5H,OAAOgI,OACjBvE,EAAsBuE,eAClBF,EAAoBG,IAAI,SAAAxM,GAAK,OAAAA,EAAEuM,YAIrC,SAACE,GAEAN,EAAU5H,OAAS,IAAIC,WAAWiI,EAAgB1E,WAEvB0E,EAAgBvD,mBAAmBsD,IAAI,SAAAD,GAAU,WAAIhP,YAAYgP,KACzEZ,QAAQ,SAAA3H,GAC1BsI,EAAA,EAA2BvJ,QAAQiB,KAGpC+B,EACS0G,EAAgBvE,UACxBuE,EAAgBtE,aAAaqE,IAAI,SAAAD,GAAU,WAAIhP,YAAYgP,KAC3D,IAAIG,YAAYD,EAAgBzE,yBAIlC,SAAC2E,GACAR,EAAU5H,OAAS,IAAIC,WAAWmI,EAAiB5E,WACnD6E,EAAA,EAAUzI,KAAKpB,QAAQoJ,GAEvB,IAAMU,EAAiC,IAAIH,YAAYC,EAAiB3E,uBAC7C2E,EAAiBzD,mBAAmBsD,IAAI,SAAAD,GAAU,WAAIhP,YAAYgP,KAC1EZ,QAAQ,SAAA3H,GAC1BsI,EAAA,EAA2BvJ,QAAQiB,KAEf2I,EAAiBxE,aAAaqE,IAAI,SAAAD,GAAU,WAAIhP,YAAYgP,KACpEZ,QAAQ,SAAA3H,GACpBsI,EAAA,EAA2BvJ,QAAQiB,KAEpCoI,EAA0BrJ,QAAQ8J,MAKrCb,KAAI,SAAC1G,EAAgBwH,GAEpB,IAAM/E,EAAwB,IAAIvD,WAAWc,EAAeyC,WACtDC,EAAqC,IAAI0E,YAAYpH,EAAe0C,uBACpEqE,EAAyD/G,EAAe+G,oBAAoBG,IAAI,SAAAD,GAAU,WAAIhP,YAAYgP,KAGhIvE,EAAsB+E,KAAK,GACrB,IAAAC,EAAAC,EAAA,EAAAtE,uBAAAZ,EAAAC,EAAAqE,GAAEnE,EAAA8E,EAAA9E,UAAWC,EAAA6E,EAAA7E,aAAce,EAAA8D,EAAA9D,mBAgBjC4D,GAZC/E,UAAWA,EAAUwE,OACrBrE,UAASA,EACTC,aAAcA,EAAaqE,IAAI,SAAAU,GAAO,OAAAA,EAAIX,SAC1CvE,sBAAuBA,EAAsBuE,OAC7CrD,mBAAoBA,EAAmBsD,IAAI,SAAAU,GAAO,OAAAA,EAAIX,WAGtDxE,EAAUwE,OACVvE,EAAsBuE,eAClBpE,EAAaqE,IAAI,SAAAU,GAAO,OAAAA,EAAIX,SAC5BrD,EAAmBsD,IAAI,SAAAU,GAAO,OAAAA,EAAIX,oEC3FzCY,EAAA,WAOC,SAAAA,EAAYrD,EAA2BzF,EAAU+I,GAChDrN,KAAK+J,YAAcA,EACnB/J,KAAKsE,IAAMA,EAAMA,EAAIlE,QAAU,IAAIkN,EAAA,EACnCtN,KAAKqN,kBAAoBA,EACzBrN,KAAKuN,mBA0MP,OAxMCH,EAAAvQ,UAAAuD,MAAA,WACC,OAAO,IAAIgN,EAASpN,KAAK+J,YAAa/J,KAAKsE,MAE5C8I,EAAAvQ,UAAA0Q,iBAAA,WACC,IAAMtN,EAAID,KAAKsE,IAAIrE,EACnBD,KAAKtE,EAAIuE,EAAE,GAAK8D,EAAA,EAAgC9D,EAAE,GAAK8D,EAAA,EAAwB9D,EAAE,IAElF7D,OAAAC,eAAI+Q,EAAAvQ,UAAA,uBAAJ,WACC,OAAOmD,KAAK+J,YAAc/J,KAAK+J,YAAYqC,UAAU5H,OAASxE,KAAKqN,mDAGpED,EAAAvQ,UAAA8M,UAAA,SAAUjL,GACT,OAAQsB,KAAK+J,YAAc/J,KAAK+J,YAAY9B,sBAA+B,EAATjI,KAAKtE,EAAQgD,EAAKf,IAAM,GAAK,GAEhGyP,EAAAvQ,UAAA2Q,cAAA,SAAcC,GACbA,EAAMnN,QAAQN,KAAK+J,YAAY2D,UAAUnM,eAAewC,EAAA,GAAuBrC,IAAI1B,KAAKsE,MAEzF8I,EAAAvQ,UAAAgN,aAAA,WACC,OAAI7J,KAAK+J,YACD/J,KAAK+J,YAAYqC,UAAU5H,OAAOxE,KAAKtE,GAEtCsE,KAAKqN,kBACNrN,KAAKqN,kBAAkBrN,KAAKtE,GAG5B,GAGT0R,EAAAvQ,UAAA8Q,aAAA,WACC,OAAOC,EAAA,EAAWrO,KAAKS,KAAK6J,iBAE7BuD,EAAAvQ,UAAAgR,SAAA,WACC,OAA+B,IAAxB7N,KAAK6J,gBAEbuD,EAAAvQ,UAAA4K,cAAA,WACC,OAA+B,IAAxBzH,KAAK6J,gBAKbuD,EAAAvQ,UAAA0K,sBAAA,SAAsBuG,EAAuBpP,GAC5CsB,KAAKsE,IAAIhE,QAAQwN,EAAYxJ,KAC7BtE,KAAK+J,YAAc+D,EAAY/D,YAC/B/J,KAAKqN,kBAAoBS,EAAYT,kBACrC,IAAIU,EAAaD,EAAYxJ,IAAIrE,EAAEvB,EAAKd,MAAQc,EAAKb,UACjDmQ,EAAWF,EAAYpS,EAAIgD,EAAKP,WACpC,GAAI4P,EAAa,GAAKA,GAAchK,EAAA,EAAuB,CAC1D,GAAI/D,KAAK+J,YACR,GAAI/J,KAAK+J,YAAYS,mBAAoB,CACxC,IAAMyD,EAAiBjO,KAAK+J,YAAYS,mBAAmB9L,EAAKf,IAChEqC,KAAK+J,YAAckE,OAGnBjO,KAAK+J,iBAAclD,OAIpB7G,KAAKqN,uBAAoBxG,EAE1BkH,GAAchK,EAAA,GAAyBrF,EAAKb,UAC5CmQ,GAAYjK,EAAA,GAAyBrF,EAAKP,WAE3C6B,KAAKsE,IAAIrE,EAAEvB,EAAKd,MAAQmQ,EACxB/N,KAAKtE,EAAIsS,GAoCVZ,EAAAvQ,UAAA6E,IAAA,SAAI3D,EAAYC,EAAYC,GAC3B,GAAID,EAAK,EAER,IADAgC,KAAKsE,IAAIrE,EAAE,IAAMjC,EACVgC,KAAKsE,IAAIrE,EAAE,GAAK8D,EAAA,EAAsB,GAG5C,GAFA/D,KAAK+J,YAAc/J,KAAK+J,YAAYS,mBAAoBzG,EAAA,EAAiB/E,OAAOC,IAAItB,IACpFqC,KAAKsE,IAAIrE,EAAE,IAAM8D,EAAA,GACZ/D,KAAK+J,YAAe,OAG3B,GAAI/L,EAAK,EAER,IADAgC,KAAKsE,IAAIrE,EAAE,IAAMjC,EACVgC,KAAKsE,IAAIrE,EAAE,GAAK,GAGtB,GAFAD,KAAK+J,YAAc/J,KAAK+J,YAAYS,mBAAoBzG,EAAA,EAAiB/E,OAAOE,OAAOvB,IACvFqC,KAAKsE,IAAIrE,EAAE,IAAM8D,EAAA,GACZ/D,KAAK+J,YAAe,OAG3B,GAAI9L,EAAK,EAER,IADA+B,KAAKsE,IAAIrE,EAAE,IAAMhC,EACV+B,KAAKsE,IAAIrE,EAAE,GAAK8D,EAAA,EAAsB,GAG5C,GAFA/D,KAAK+J,YAAc/J,KAAK+J,YAAYS,mBAAoBzG,EAAA,EAAiB/E,OAAOG,MAAMxB,IACtFqC,KAAKsE,IAAIrE,EAAE,IAAM8D,EAAA,GACZ/D,KAAK+J,YAAe,OAG3B,GAAI9L,EAAK,EAER,IADA+B,KAAKsE,IAAIrE,EAAE,IAAMhC,EACV+B,KAAKsE,IAAIrE,EAAE,GAAK,GAGtB,GAFAD,KAAK+J,YAAc/J,KAAK+J,YAAYS,mBAAoBzG,EAAA,EAAiB/E,OAAOI,MAAMzB,IACtFqC,KAAKsE,IAAIrE,EAAE,IAAM8D,EAAA,GACZ/D,KAAK+J,YAAe,OAG3B,GAAIhM,EAAK,EAER,IADAiC,KAAKsE,IAAIrE,EAAE,IAAMlC,EACViC,KAAKsE,IAAIrE,EAAE,GAAK8D,EAAA,EAAsB,GAG5C,GAFA/D,KAAK+J,YAAc/J,KAAK+J,YAAYS,mBAAoBzG,EAAA,EAAiB/E,OAAOK,KAAK1B,IACrFqC,KAAKsE,IAAIrE,EAAE,IAAM8D,EAAA,GACZ/D,KAAK+J,YAAe,OAG3B,GAAIhM,EAAK,EAER,IADAiC,KAAKsE,IAAIrE,EAAE,IAAMlC,EACViC,KAAKsE,IAAIrE,EAAE,GAAK,GAGtB,GAFAD,KAAK+J,YAAc/J,KAAK+J,YAAYS,mBAAoBzG,EAAA,EAAiB/E,OAAOM,KAAK3B,IACrFqC,KAAKsE,IAAIrE,EAAE,IAAM8D,EAAA,GACZ/D,KAAK+J,YAAe,OAG3B/J,KAAKuN,oBAGNH,EAAAvQ,UAAAiM,iBAAA,SAAiBpJ,GAChB,IAAMO,EAAID,KAAKsE,IAAIrE,EAEnB,IADAD,KAAKtE,EAAI,EACJuE,EAAE,GAAK,EAAGA,EAAE,GAAK8D,EAAA,EAAuB9D,EAAE,IAAM,EACpD,IAAKA,EAAE,GAAK,EAAGA,EAAE,GAAK8D,EAAA,EAAuB9D,EAAE,IAAM,EACpD,IAAKA,EAAE,GAAK,EAAGA,EAAE,GAAK8D,EAAA,EAAuB9D,EAAE,IAAM,EACpDP,IACAM,KAAKtE,GAAK,GAMd0R,EAAAvQ,UAAAyM,gBAAA,SAAgBD,EAAoB3K,EAA2BgB,GAC9DM,KAAK+J,YAAcV,EACnB,IAAMpJ,EAAID,KAAKsE,IAAIrE,EACbiO,EAA0B,IAAdxP,EAAKd,KAAa,EAAI,EAClCuQ,EAA0B,IAAdzP,EAAKd,KAAa,EAAI,EAExC,IADAqC,EAAEvB,EAAKd,MAA2B,IAAnBc,EAAKb,UAAkBkG,EAAA,EAAwB,EAAI,EAC7D9D,EAAEiO,GAAa,EAAGjO,EAAEiO,GAAanK,EAAA,EAAuB9D,EAAEiO,IAAc,EAC5E,IAAKjO,EAAEkO,GAAa,EAAGlO,EAAEkO,GAAapK,EAAA,EAAuB9D,EAAEkO,IAAc,EAC5EnO,KAAKuN,mBACL7N,KAIH0N,EAAAvQ,UAAAkO,gBAAA,SAAgB1B,EAAoBiB,EAA4BO,EAA4BnL,GAC3FM,KAAK+J,YAAcV,EACnB,IAAMpJ,EAAID,KAAKsE,IAAIrE,EACbmO,EAA0B,IAAf9D,EAAM1M,MAA6B,IAAfiN,EAAMjN,KAAa,EAAmB,IAAf0M,EAAM1M,MAA6B,IAAfiN,EAAMjN,KAAa,EAAI,EAGvG,IAFAqC,EAAEqK,EAAM1M,MAA4B,IAApB0M,EAAMzM,UAAkBkG,EAAA,EAAwB,EAAI,EACpE9D,EAAE4K,EAAMjN,MAA4B,IAApBiN,EAAMhN,UAAkBkG,EAAA,EAAwB,EAAI,EAC/D9D,EAAEmO,GAAY,EAAGnO,EAAEmO,GAAYrK,EAAA,EAAuB9D,EAAEmO,IAAa,EACzEpO,KAAKuN,mBACL7N,KAGF0N,EAAAvQ,UAAAuO,iBAAA,SAAiB/B,EAAoBiB,EAA4BO,EAA4BK,GAC5FlL,KAAK+J,YAAcV,EACnB,IAAMpJ,EAAID,KAAKsE,IAAIrE,EACnBA,EAAEqK,EAAM1M,MAA4B,IAApB0M,EAAMzM,UAAkBkG,EAAA,EAAwB,EAAI,EACpE9D,EAAE4K,EAAMjN,MAA4B,IAApBiN,EAAMhN,UAAkBkG,EAAA,EAAwB,EAAI,EACpE9D,EAAEiL,EAAMtN,MAA4B,IAApBsN,EAAMrN,UAAkBkG,EAAA,EAAwB,EAAI,EACpE/D,KAAKuN,oBAGNH,EAAAvQ,UAAA4D,SAAA,WACC,MAAO,YAAYT,KAAKsE,IAAI7D,WAAU,OAAMT,KAAK+J,YAAc/J,KAAK+J,YAAYqC,UAAU9H,IAAI7D,WAAa,YAAU,KAEvH2M,EArNA,uCCDM,SAAAiB,EAAmBpK,EAAyCyE,EAAgBF,EAAoB9J,EAA2B+J,EAAoBtB,GAEpJ,IAAMmH,EAAoBnH,EAAa,GAAKA,EAAa,GAAKA,EAAa,GAAKA,EAAa,GAAM,EAAI,EAEjGnK,EAAY0B,EAAKf,GAQjB4Q,EANY/F,EAASlE,IAAIrE,EAAE,GACfuI,EAASlE,IAAIrE,EAAE,IAEK,EADpBuI,EAASlE,IAAIrE,EAAE,IACgB,GACJjD,GAAK,GAAOsR,GAAY,GAW/DE,EAPwBzN,KAAKG,MAAwB,GAAlBiG,EAAa,IACxBpG,KAAKG,MAAwB,GAAlBiG,EAAa,KAGY,EAFpCpG,KAAKG,MAAwB,GAAlBiG,EAAa,KAEmC,EAD3DpG,KAAKG,MAAwB,GAAlBiG,EAAa,KAC0D,GAC7FsB,EAAI,IAE6B,GADjCA,EAAI,IAC0C,GAE7DgG,EAAoB/F,EAAS3E,EAAA,EACjCE,EAAYwK,EAAoB,GAAKF,EACrCtK,EAAYwK,EAAoB,GAAKD,wGChBtC5K,EAAA,GACCjG,GAHoB,2BAIpB2I,OAAM,SAACZ,GACNgJ,EAAA,EAAyBhJ,IAE1ByG,MAAK,SAACxH,EAAcqB,GACnB,IACIoG,EADYzH,EAASlE,WA0DzB,OAvDeiO,EAAA,EAXI,2BAalB,YAECtC,EAAYuC,EAAA,EAAUvK,KAAKtB,WACjB4B,YAAYC,GAEtB,IAAMsD,EAAwB2G,EAAA,EAA0B9L,UAClDwJ,GAAuBuC,EAAA,EAA2B/L,WAaxD,OAASyC,gBAVRZ,UAAWA,EAAS1E,EAAE,GAAI0E,EAAS1E,EAAE,GAAI0E,EAAS1E,EAAE,IACpD+H,UAAWoE,EAAU5H,OAAOgI,OAC5BvE,sBAAuBA,EAAsBuE,OAC7CF,oBAAqBA,EAAoBG,IAAI,SAAAxM,GAAK,OAAAA,EAAEuM,UAO5BhH,qBAJxB4G,EAAU5H,OAAOgI,OACjBvE,EAAsBuE,eAClBF,EAAoBG,IAAI,SAAAxM,GAAK,OAAAA,EAAEuM,YAIrC,SAACE,GACAN,EAAU5H,OAAS,IAAIC,WAAWiI,EAAgB1E,WAEvB0E,EAAgBvD,mBAAmBsD,IAAI,SAAAD,GAAU,WAAIhP,YAAYgP,KACzEZ,QAAQ,SAAA3H,GAC1B4K,EAAA,EAA2B7L,QAAQiB,KAGpC,IAAMkE,EAAoBuE,EAAgBvE,UACpCC,EAAesE,EAAgBtE,aAAaqE,IAAI,SAAAD,GAAU,WAAIhP,YAAYgP,KAC1EvE,EAAwB,IAAI0E,YAAYD,EAAgBzE,uBAE9DjC,EAAWoG,EAAWjE,EAAWC,EAAcH,IAEhD,SAAC2E,GACAR,EAAU5H,OAAS,IAAIC,WAAWmI,EAAiB5E,WACnD2G,EAAA,EAAUvK,KAAKpB,QAAQoJ,GAEvB,IAAMU,EAAiC,IAAIH,YAAYC,EAAiB3E,uBACxE2G,EAAA,EAA0B5L,QAAQ8J,GAEPF,EAAiBzD,mBAAmBsD,IAAI,SAAAD,GAAU,WAAIhP,YAAYgP,KAC1EZ,QAAQ,SAAA3H,GAC1B4K,EAAA,EAA2B7L,QAAQiB,KAGf2I,EAAiBxE,aAAaqE,IAAI,SAAAD,GAAU,WAAIhP,YAAYgP,KACpEZ,QAAQ,SAAA3H,GACpB4K,EAAA,EAA2B7L,QAAQiB,QAMvCgI,KAAI,SAAC1G,EAAgBwH,GAEpB,IAAM+B,EAA6BvJ,EAAeZ,SAC5CA,EAAW,IAAI/F,EAAA,EAAGkQ,EAAY,GAAIA,EAAY,GAAIA,EAAY,IAC9D9G,EAAwB,IAAIvD,WAAWc,EAAeyC,WACtDC,EAAqC,IAAI0E,YAAYpH,EAAe0C,uBACpEqE,EAAyD/G,EAAe+G,oBAAoBG,IAAI,SAAAD,GAAU,WAAIhP,YAAYgP,KAGhIuC,EAAA,EAA8BpK,EAAUqD,GACxCC,EAAsB+E,KAAK,GACrB,IAAAC,EAAA+B,EAAA,EAAApG,uBAAAZ,EAAAC,EAAAqE,GAAEnE,EAAA8E,EAAA9E,UAAWC,EAAA6E,EAAA7E,aAAce,EAAA8D,EAAA9D,mBAgBjC4D,GAZC/E,UAAWA,EAAUwE,OACrBrE,UAASA,EACTC,aAAcA,EAAaqE,IAAI,SAAAU,GAAO,OAAAA,EAAIX,SAC1CvE,sBAAuBA,EAAsBuE,OAC7CrD,mBAAoBA,EAAmBsD,IAAI,SAAAU,GAAO,OAAAA,EAAIX,WAGtDxE,EAAUwE,OACVvE,EAAsBuE,eAClBpE,EAAaqE,IAAI,SAAAU,GAAO,OAAAA,EAAIX,SAC5BrD,EAAmBsD,IAAI,SAAAU,GAAO,OAAAA,EAAIX,+CC1FnC,SAAwB7H,EAAcsK,GAE3C,IAAK,IADDC,EAAkB,EACbrP,EAAI,EAAGA,EAAIkE,EAAA,EAAYlE,GAAK,EACpC,IAAK,IAAIE,EAAI,EAAGA,EAAIgE,EAAA,EAAYhE,GAAK,EAAG,CACvCoP,EAAarP,EAAI,EACjBqP,EAAatP,EAAIA,EAAI8E,EAAS9E,EAAIkE,EAAA,EAClCoL,EAAapP,EAAIA,EAAI4E,EAAS5E,EAAIgE,EAAA,EAKlC,IAAK,IAFCqL,EAAerO,KAAKG,MAA6G,GAAvGmO,EAAQC,SAAeH,EAAatP,EADtD,EACoC,GAAmCsP,EAAarP,EADpF,EACkE,GAA6BqP,EAAapP,EAD5G,GAC8H,IAEnID,EAAI,EAAGA,EAAIiE,EAAA,EAAYjE,GAAK,EAAG,CACvCqP,EAAarP,EAAIA,EAAI6E,EAAS7E,EAAIiE,EAAA,EAElC,IAAMwL,EAAQH,EAAeD,EAAarP,EAEtCkI,OAAS,EAGZA,EADGuH,EAAQ,EACCC,EAAA,EAAWxQ,OAAOyQ,IAAI9R,GAE1B4R,EAAQ,EACZJ,EAAarP,EAAI,EACR0P,EAAA,EAAWxQ,OAAO0Q,KAAK/R,GAE3BwR,EAAarP,GAAK,GACd0P,EAAA,EAAWxQ,OAAO2Q,MAAMhS,GAE5BwR,EAAarP,GAAK,GACd0P,EAAA,EAAWxQ,OAAO4Q,KAAKjS,GAGvB6R,EAAA,EAAWxQ,OAAO6Q,MAAMlS,GAG7B4R,EAAQ,EACZJ,EAAarP,EAAI,EACR0P,EAAA,EAAWxQ,OAAO0Q,KAAK/R,GAE3BwR,EAAarP,GAAK,GACd0P,EAAA,EAAWxQ,OAAO2Q,MAAMhS,IAE5BwR,EAAarP,EACT0P,EAAA,EAAWxQ,OAAO4Q,KAAKjS,IAOxB6R,EAAA,EAAWxQ,OAAO2Q,MAAMhS,GAGrCsR,EAAYC,GAAmBlH,EAC/BkH,GAAmB,sCA9DjBY,UAAUC,EAAA,SAASC,YAAYC,QAI/BZ,GAFU,IAAIU,EAAA,SAASG,UAAUC,OAAO,IAAK,EAAK,GAAK,EAAG,IAAKL,GAErD,IAAIC,EAAA,SAASG,UAAUE,mBAAmB,IAAK,EAAK,EAAG,IAAKN,IAEtEX,EAAe,IAAI7B,EAAA,kBCXzB,SAAA+C,GAAyB,aAIzB,SAAAC,EAAAC,EAAAC,GACA,SAAAC,KAAsBA,EAAA5T,UAAA0T,EAA0B,IAAAG,EAAA,IAAAD,EAChD,QAAAxU,KAAAuU,EAAAE,EAAAzU,GAAAuU,EAAAvU,GAEA,OADAuU,EAAA/P,WAAArE,OAAAS,UAAA4D,WAAAiQ,EAAAjQ,SAAA+P,EAAA/P,UACAiQ,EAPAL,EAAA,SAAAA,EAAA,aACAA,EAAA,kBAAAA,EAAA,sBACCA,EAAA,mBAAAA,EAAA,uBAODtP,KAAA4P,UAAA,EACA,IAAAC,EAAA,aACAA,EAAAD,UAAA,EACAC,EAAAC,KAAA,SAAA5Q,EAAA6Q,GACAF,EAAAG,IAAA9Q,EAAA6Q,EAAA,EAAA7Q,EAAAa,SAEA8P,EAAAG,IAAA,SAAA9Q,EAAA6Q,EAAAP,EAAAS,GACA,IAAAC,EAAAV,EAAAS,GAAA,EACA,GAAAA,EAAAT,EAAA,IACA,GAAAS,GAAAT,EACA,OAIA,IAFA,IAAAW,EAAAX,EAAA,EACAY,EAAAH,EACAE,EAAAC,GAGA,IAFA,IACAC,EADAF,IAEAE,EAAAb,GACAO,EAAA7Q,EAAAmR,GAAAnR,EAAAmR,EAAA,OACAR,EAAAS,KAAApR,EAAAmR,EAAA,EAAAA,KAIAA,OAKAR,EAAAG,IAAA9Q,EAAA6Q,EAAAP,EAAAU,GACAL,EAAAG,IAAA9Q,EAAA6Q,EAAAG,EAAAD,GACAJ,EAAAU,QAAArR,EAAA6Q,EAAAP,EAAAU,EAAAD,EAAAC,EAAAV,EAAAS,EAAAC,IAEAL,EAAAU,QAAA,SAAArR,EAAA6Q,EAAAP,EAAAgB,EAAAP,EAAAQ,EAAAC,GACA,IAAAC,EACAC,EACAC,EACAC,EACA,MAAAL,GAAA,GAAAC,EAGA,GAAAD,EAAAC,GAAA,GAMAD,EAAAC,GAEAC,EAAAnB,GADAqB,EAAAJ,GAAA,GAGAK,GADAF,EAAAf,EAAAkB,MAAA7R,EAAA6Q,EAAAS,EAAAP,EAAAU,IACAH,IAGAI,EAAAJ,GADAM,EAAAJ,GAAA,GAGAG,GADAF,EAAAd,EAAAmB,MAAA9R,EAAA6Q,EAAAP,EAAAgB,EAAAI,IACApB,GAEAK,EAAAoB,OAAA/R,EAAA6Q,EAAAY,EAAAH,EAAAI,GACA,IAAAM,EAAAP,EAAAG,EACAjB,EAAAU,QAAArR,EAAA6Q,EAAAP,EAAAmB,EAAAO,EAAAL,EAAAC,GACAjB,EAAAU,QAAArR,EAAA6Q,EAAAmB,EAAAN,EAAAX,EAAAQ,EAAAI,EAAAH,EAAAI,QAnBAf,EAAA7Q,EAAAsR,GAAAtR,EAAAsQ,IAAA,GACAK,EAAAS,KAAApR,EAAAsR,EAAAhB,IAoBAK,EAAAoB,OAAA,SAAA/R,EAAA6Q,EAAAP,EAAA2B,EAAAlB,GACA,GAAAT,GAAA2B,MAAAlB,EAIA,IADA,IAAAvU,EAAAmU,EAAAuB,IAAAnB,EAAAT,EAAA2B,EAAA3B,GACA,GAAA9T,KAAA,CAKA,IAJA,IAAA2V,EAAAnS,EAAAsQ,EAAA9T,GACAuI,EAAAkN,EAAA3B,EACA8B,EAAA9B,EAAA9T,EACA6V,EAAA/B,EAAA9T,EAAAuI,EACAsN,GAAA/B,EAAA9T,GACAwD,EAAAoS,GAAApS,EAAAqS,GACAD,EAAAC,EACAtB,EAAAsB,EAAAtN,EACAsN,GAAAtN,EAEAsN,EAAA/B,GAAAvL,GAAAgM,EAAAsB,IAGArS,EAAAoS,GAAAD,IAGAxB,EAAAuB,IAAA,SAAArW,EAAAW,GACA,QAAAA,GAAA,CACA,IAAA4F,EAAAvG,EAAAW,EACAX,EAAAW,EACAA,EAAA4F,EAEA,OAAAvG,GAEA8U,EAAAmB,MAAA,SAAA9R,EAAA6Q,EAAAP,EAAAS,EAAAoB,GAIA,IAHA,IACAG,EACAL,EAFAM,EAAAxB,EAAAT,EAGAiC,EAAA,GAEAN,EAAA3B,GADAgC,EAAAC,GAAA,GAEA1B,EAAA7Q,EAAAmS,GAAAnS,EAAAiS,IAAA,EACAM,EAAAD,GAEAhC,EAAA2B,EAAA,EACAM,IAAAD,EAAA,GAGA,OAAAhC,GAEAK,EAAAkB,MAAA,SAAA7R,EAAA6Q,EAAAP,EAAAS,EAAAoB,GAIA,IAHA,IACAG,EACAL,EAFAM,EAAAxB,EAAAT,EAGAiC,EAAA,GAGA1B,EAAA7Q,EADAiS,EAAA3B,GADAgC,EAAAC,GAAA,IAEAvS,EAAAmS,IAAA,GACA7B,EAAA2B,EAAA,EACAM,IAAAD,EAAA,GAEAC,EAAAD,EAGA,OAAAhC,GAEAK,EAAAS,KAAA,SAAApR,EAAAvE,EAAA0V,GACA,IAAAqB,EAAAxS,EAAAvE,GACAuE,EAAAvE,GAAAuE,EAAAmR,GACAnR,EAAAmR,GAAAqB,GAEA,IAAAC,EAAA,SAAAN,GACAO,MAAA9W,KAAAmE,MACAA,KAAAoS,MACApS,KAAA4S,QAAAC,OAAAT,GACAO,MAAAG,mBACAH,MAAAG,kBAAA9S,KAAA0S,IAGAA,EAAA/B,UAAA,EACA+B,EAAAK,KAAA,SAAAX,GACA,OAAAA,aAAAO,MACAP,EAEA,IAAAM,EAAAN,IAGAM,EAAAM,UAAAL,MACAD,EAAA7V,UAAAyT,EAAAqC,MAAA9V,cAEA,IAAAoW,EAAA,aACAA,EAAAtC,UAAA,EACAsC,EAAAC,aAAA,SAAA/W,EAAAa,GACA,SAAAb,EACA,aAEA,GAAAa,EAAA8D,QAAA,EACA,cAEA,IAAAuB,SAAA,EAIA,OAHA,YAAAA,IAAAlG,EAAAwU,UAAAxU,EAAAgX,aACA9Q,EAAA,UAEAA,GACA,eACA,mBACA,aACA,GAAAlG,aAAAiX,MAAA,CACA,GAAAjX,EAAAkX,SAAA,CACA,MAAAlX,EAAA2E,OACA,OAAA3E,EAAA,GAEA,IAAAmX,EAAAnX,EAAA,OACAa,GAAA,KAGA,IAFA,IAAAkU,EAAA,EACAC,EAAAhV,EAAA2E,OACAoQ,EAAAC,GAAA,CACA,IAAAzV,EAAAwV,IAEAoC,GADA,GAAA5X,EACA,IAAAuX,EAAAC,aAAA/W,EAAAT,GAAAsB,GAEAiW,EAAAC,aAAA/W,EAAAT,GAAAsB,GAGA,OAAAsW,EAAA,IAEA,IAEAC,EAAA,IACAvW,GAAA,KAGA,IAFA,IAAAwW,EAAA,EACAC,EALAtX,EAAA2E,OAMA0S,EAAAC,GAAA,CACA,IAAAC,EAAAF,IACAD,IAAAG,EAAA,UAAAT,EAAAC,aAAA/W,EAAAuX,GAAA1W,GAGA,OADAuW,GAAA,IAGA,IAAAI,EACA,IACAA,EAAAxX,EAAAsE,SACG,MAAAgG,GACH,YAEA,SAAAkN,MAAAvX,OAAAqE,UAAA,sBACA,IAAAmT,EAAAzX,EAAAsE,WACA,sBAAAmT,EACA,OAAAA,EAGA,IAAAC,EAAA,KACAC,EAAA,MACA9W,GAAA,KACA,IAAA+W,EAAA,MAAA5X,EAAAW,eACA,QAAA+W,KAAA1X,EACA4X,IAAA5X,EAAAW,eAAA+W,IAGA,aAAAA,GAAA,aAAAA,GAAA,aAAAA,GAAA,kBAAAA,GAAA,kBAAAA,IAGA,GAAAC,EAAAhT,SACAgT,GAAA,QAEAA,GAAA9W,EAAA6W,EAAA,MAAAZ,EAAAC,aAAA/W,EAAA0X,GAAA7W,IAIA,OAFAA,IAAAgX,UAAA,GACAF,GAAA,KAAA9W,EAAA,IAEA,aACA,OAAAb,EACA,QACA,OAAA0W,OAAA1W,KAGA,IAAA8X,EAAA5D,EAAA,6BAAA6D,GACA,GAAAA,EAAA,GACA,IAAAC,EAAA,IAAAf,MAAAc,GACAlU,KAAApE,QAAAuY,IAGAF,EAAAtD,UAAA,EACAsD,EAAApX,WACAL,IAAA,SAAA4X,GACA,OAAApU,KAAApE,QAAAwY,IAEA/T,IAAA,SAAA+T,EAAAC,GACA,OAAArU,KAAApE,QAAAwY,GAAAC,GAEAvT,OAAA,WACA,OAAAd,KAAApE,QAAAkF,QAEAwO,SAAA,SAAAzP,EAAAC,EAAAC,GACA,UAAA2S,EAAA,+CAGA,IAAA4B,GAA4BnB,WAAA,EAAAoB,gBAAA,wBAC5BD,EAAAE,KAAA,SACAF,EAAAE,IAAAnB,SAAAiB,EACAA,EAAArE,QAAA,YACAqE,EAAArE,OAAAoD,SAAAiB,EACAA,EAAAG,MAAA,UACAH,EAAAG,KAAApB,SAAAiB,EACA,IAAAI,EAAArE,EAAA,kCACAqE,EAAA/D,UAAA,EACA,IAAAgE,EAAAtE,EAAA,4BACAsE,EAAAhE,UAAA,EACAgE,EAAAC,wBAAA,SAAA/U,EAAAC,EAAAC,EAAA8U,EAAA/E,GACA,IAAAgF,EAAAjV,EAAA,IAAAA,GAAA,EAAAA,GAAA,EACAkV,EAAAD,EAAA,EACAE,EAAAlV,EAAA,IAAAA,GAAA,EAAAA,GAAA,EACAmV,EAAAD,EAAA,EACAE,EAAAnV,EAAA,IAAAA,GAAA,EAAAA,GAAA,EACAoV,EAAAD,EAAA,EACAE,EAAA,EACAC,EAAA,EACAC,EAAA,EACA,OAAAxF,EAAA,IACA,OACAsF,EAAAvV,EAAAiV,EACAO,EAAAvV,EAAAkV,EACAM,EAAAvV,EAAAmV,EACA,MACA,OACA,IAAAb,EAAAxU,EAAAiV,EACAM,EAAAf,KAAA,IAAAA,GACA,IAAAkB,EAAAzV,EAAAkV,EACAK,EAAAE,KAAA,IAAAA,GACA,IAAAC,EAAAzV,EAAAmV,EACAI,EAAAE,KAAA,IAAAA,GACA,MACA,OACAJ,EAAAT,EAAAc,iBAAA5V,EAAAiV,GACAO,EAAAV,EAAAc,iBAAA3V,EAAAkV,GACAM,EAAAX,EAAAc,iBAAA1V,EAAAmV,GAGA,IAAAQ,EAAAf,EAAAgB,gBAAA9V,EAAAC,EAAAC,EAAA+U,EAAAE,EAAAE,EAAAL,GACAe,EAAAjB,EAAAgB,gBAAA9V,EAAAC,EAAAC,EAAAgV,EAAAC,EAAAE,EAAAL,GACAgB,EAAAlB,EAAAmB,kBAAAJ,EAAAE,EAAAR,GACAM,EAAAf,EAAAgB,gBAAA9V,EAAAC,EAAAC,EAAA+U,EAAAG,EAAAC,EAAAL,GACAe,EAAAjB,EAAAgB,gBAAA9V,EAAAC,EAAAC,EAAAgV,EAAAE,EAAAC,EAAAL,GACA,IAAAkB,EAAApB,EAAAmB,kBAAAJ,EAAAE,EAAAR,GACAY,EAAArB,EAAAmB,kBAAAD,EAAAE,EAAAV,GACAK,EAAAf,EAAAgB,gBAAA9V,EAAAC,EAAAC,EAAA+U,EAAAE,EAAAG,EAAAN,GACAe,EAAAjB,EAAAgB,gBAAA9V,EAAAC,EAAAC,EAAAgV,EAAAC,EAAAG,EAAAN,GACAgB,EAAAlB,EAAAmB,kBAAAJ,EAAAE,EAAAR,GACAM,EAAAf,EAAAgB,gBAAA9V,EAAAC,EAAAC,EAAA+U,EAAAG,EAAAE,EAAAN,GACAe,EAAAjB,EAAAgB,gBAAA9V,EAAAC,EAAAC,EAAAgV,EAAAE,EAAAE,EAAAN,GACAkB,EAAApB,EAAAmB,kBAAAJ,EAAAE,EAAAR,GACA,IAAAa,EAAAtB,EAAAmB,kBAAAD,EAAAE,EAAAV,GACA,OAAAV,EAAAmB,kBAAAE,EAAAC,EAAAX,IAEAX,EAAAgB,gBAAA,SAAAO,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA1B,GACA,IAAAnZ,EAAAiZ,EAAA6B,gBAAAH,EAAA1B,EAAA8B,gBAAAH,EAAA3B,EAAA+B,gBAAAH,EAAA5B,EAAAgC,cAAA9B,GAAA,EASA,OARAnZ,MAAAiZ,EAAAiC,eACAlb,GAAA,IAOA,MANAiZ,EAAAkC,QAAAnb,GAAA,IAGAwa,EAAAG,GAFA1B,EAAAkC,QAAA,GAAAnb,GAAA,KAGAya,EAAAG,GAFA3B,EAAAkC,QAAA,GAAAnb,GAAA,KAGA0a,EAAAG,KAGA5B,EAAAmC,iBAAA,SAAA7W,EAAAM,EAAAxE,EAAAC,EAAA+a,GACA,IAAAha,EAAAf,EAAAD,GAAAkE,EAAAM,GAIA,OAAAxD,EAAAga,OAHA9W,EAAAM,EAAAxD,GAGAga,KAFAhb,EAAAkE,GAEA8W,EADAxW,GAGAoU,EAAAmB,kBAAA,SAAA7V,EAAAM,EAAAwW,GACA,SAAAA,GAAA9W,EAAA8W,EAAAxW,GAEAoU,EAAAqC,KAAA,SAAA/W,EAAAM,GACA,OAAAN,KAAAM,EAAA,GAAAA,GAEAoU,EAAAsC,eAAA,SAAA5C,GACA,OAAAA,GAAA,WACA,GAAAA,EAAA,YAAAA,EAAA,0BAEAA,IAAA,WACA,GAAAA,EAAA,YAAAA,EAAA,0BAEAA,GAEAM,EAAAuC,eAAA,SAAA7C,GACA,OAAAA,KAAA,IAAAA,IAEAM,EAAAc,iBAAA,SAAApB,GACA,IAAA8C,EAAA9C,MACA+C,EAAAD,EAAA9C,EAEA,UADA+C,EAAA/C,GACA,GAAA+C,EAAA,GAAAD,GAEAxC,EAAA0C,aAAA,SAAAxX,EAAAC,EAAAC,EAAA8U,GACA,SAAAF,EAAA2C,gBAAAzX,EAAAC,EAAAC,EAAA8U,GAAA,YAEAF,EAAA2C,gBAAA,SAAAzX,EAAAC,EAAAC,EAAA8U,GACA,IAAApY,EAAAkY,EAAA6B,gBAAA3W,EAAA8U,EAAA8B,gBAAA3W,EAAA6U,EAAA+B,gBAAA3W,EAAA4U,EAAAgC,cAAA9B,EAAA,WAEA,OADApY,MAAA,KACAA,IAAA,uCAEAkY,EAAA4C,MAAA,SAAAlD,EAAAmD,EAAA/U,GACA,OAAA4R,EAAAmD,EACAA,EACEnD,EAAA5R,EACFA,EAEA4R,GAGA,IAAAoD,EAAApH,EAAA,mCAAAqH,EAAAC,EAAAC,EAAAC,EAAAhD,EAAA/E,GACA9P,KAAA0X,YACA1X,KAAA2X,aACA3X,KAAA4X,cACA5X,KAAA6X,UACA7X,KAAA6U,OACA7U,KAAA8P,UACAmE,EAAApY,KAAAmE,KAAA,IAEAyX,EAAA9G,UAAA,EACA8G,EAAAzE,UAAAiB,EACAwD,EAAA5a,UAAAyT,EAAA2D,EAAApX,WACAyS,SAAA,SAAAzP,EAAAC,EAAAC,GACA,IAAAsU,EAAA,EACAyD,EAAA,EACAjY,GAAAG,KAAA0X,UACA5X,GAAAE,KAAA0X,UACA3X,GAAAC,KAAA0X,UAGA,IAFA,IAAAxG,EAAA,EACAC,EAAAnR,KAAA6X,QACA3G,EAAAC,GAAA,CACA,IAAAzV,EAAAwV,IACA6G,EAAApD,EAAAsC,eAAApX,GACAmY,EAAArD,EAAAsC,eAAAnX,GACAmY,EAAAtD,EAAAsC,eAAAlX,GACAmY,EAAAlY,KAAA6U,KAAAnZ,GAAA,EACAyc,EAAAxD,EAAAC,wBAAAmD,EAAAC,EAAAC,EAAAC,EAAAlY,KAAA8P,SAEAuE,IADA8D,EAAA,EAAApX,KAAAyB,IAAA2V,GAAA,GACAL,EACAjY,GAAAG,KAAA2X,WACA7X,GAAAE,KAAA2X,WACA5X,GAAAC,KAAA2X,WACAG,GAAA9X,KAAA4X,YAEA,OAAAvD,EAAA,MAGA,IAAA+D,EAAA/H,EAAA,sCACA4D,EAAApY,KAAAmE,KAAA,IAEAoY,EAAAzH,UAAA,EACAyH,EAAApF,UAAAiB,EACAmE,EAAAvb,UAAAyT,EAAA2D,EAAApX,WACAyS,SAAA,SAAAzP,EAAAC,EAAAC,GAIA,oBAHA,EAAAgB,KAAAG,MAAAyT,EAAAsC,eAAApX,MACA,EAAAkB,KAAAG,MAAAyT,EAAAsC,eAAAnX,OACA,EAAAiB,KAAAG,MAAAyT,EAAAsC,eAAAlX,QAEA,EAEA,KAIA,IAAAsY,EAAAhI,EAAA,kCAAAgE,GACAJ,EAAApY,KAAAmE,KAAA,GACAA,KAAAqU,SAEAgE,EAAA1H,UAAA,EACA0H,EAAArF,UAAAiB,EACAoE,EAAAxb,UAAAyT,EAAA2D,EAAApX,WACAyS,SAAA,SAAAzP,EAAAC,EAAAC,GACA,OAAAC,KAAAqU,SAGA,IAAAiE,EAAAjI,EAAA,qCAAAqH,GACA1X,KAAA0X,UAAA,EACAzD,EAAApY,KAAAmE,KAAA,GACAA,KAAA0X,aAEAY,EAAA3H,UAAA,EACA2H,EAAAtF,UAAAiB,EACAqE,EAAAzb,UAAAyT,EAAA2D,EAAApX,WACAyS,SAAA,SAAAzP,EAAAC,EAAAC,GACAF,GAAAG,KAAA0X,UACA3X,GAAAC,KAAA0X,UACA,IAAAa,EAAAxX,KAAAC,KAAAnB,IAAAE,KACAyY,EAAAD,EAAAxX,KAAAG,MAAAqX,GACAE,EAAA,EAAAD,EAEA,WADAzX,KAAAyW,IAAAgB,EAAAC,MAIA,IAAAC,EAAArI,EAAA,mCAAAqH,EAAAC,EAAAC,EAAAC,EAAAhD,EAAA/E,GACA9P,KAAA0X,YACA1X,KAAA2X,aACA3X,KAAA4X,cACA5X,KAAA6X,UACA7X,KAAA6U,OACA7U,KAAA8P,UACAmE,EAAApY,KAAAmE,KAAA,IAEA0Y,EAAA/H,UAAA,EACA+H,EAAA1F,UAAAiB,EACAyE,EAAA7b,UAAAyT,EAAA2D,EAAApX,WACAyS,SAAA,SAAAzP,EAAAC,EAAAC,GACA,IAAAsU,EAAA,EACAsE,EAAA,EACA9Y,GAAAG,KAAA0X,UACA5X,GAAAE,KAAA0X,UACA3X,GAAAC,KAAA0X,UAGA,IAFA,IAAAxG,EAAA,EACAC,EAAAnR,KAAA6X,QACA3G,EAAAC,GAAA,CACA,IAAAzV,EAAAwV,IACA6G,EAAApD,EAAAsC,eAAApX,GACAmY,EAAArD,EAAAsC,eAAAnX,GACAmY,EAAAtD,EAAAsC,eAAAlX,GACAmY,EAAAlY,KAAA6U,KAAAnZ,GAAA,EAEA2Y,GADAM,EAAAC,wBAAAmD,EAAAC,EAAAC,EAAAC,EAAAlY,KAAA8P,SACA6I,EACA9Y,GAAAG,KAAA2X,WACA7X,GAAAE,KAAA2X,WACA5X,GAAAC,KAAA2X,WACAgB,GAAA3Y,KAAA4X,YAEA,OAAAvD,KAGA,IAAAuE,EAAAvI,EAAA,+CAAAqH,EAAAC,EAAAE,EAAAhD,EAAA/E,GACA,IAAAqE,EAAA,IAAAf,MAAA,IACApT,KAAA6Y,QAAA1E,EACAnU,KAAA0X,YACA1X,KAAA2X,aACA3X,KAAA6X,UACA7X,KAAA6U,OACA7U,KAAA8P,UACA9P,KAAA8Y,gBACA7E,EAAApY,KAAAmE,KAAA,IAEA4Y,EAAAjI,UAAA,EACAiI,EAAA5F,UAAAiB,EACA2E,EAAA/b,UAAAyT,EAAA2D,EAAApX,WACAyS,SAAA,SAAAzP,EAAAC,EAAAC,GACAF,GAAAG,KAAA0X,UACA5X,GAAAE,KAAA0X,UACA3X,GAAAC,KAAA0X,UAOA,IANA,IAAArD,EAAA,EACA0E,EAAA,EAGA7H,EAAA,EACAC,EAAAnR,KAAA6X,QACA3G,EAAAC,GAAA,CACA,IAAAzV,EAAAwV,IACA6G,EAAApD,EAAAsC,eAAApX,GACAmY,EAAArD,EAAAsC,eAAAnX,GACAmY,EAAAtD,EAAAsC,eAAAlX,GACAmY,EAAAlY,KAAA6U,KAAAnZ,EAAA,WACAyc,EAAAxD,EAAAC,wBAAAmD,EAAAC,EAAAC,EAAAC,EAAAlY,KAAA8P,SAEAqI,EAZA,GAWAA,EAAApX,KAAAyB,IAAA2V,IAEAA,KAIAY,GAFAA,EAdA,GAaAZ,GAAAY,IAEA,EACA,EACIA,EAAA,EACJ,EAEAA,EAEA1E,GAAA8D,EAAAnY,KAAA6Y,QAAAnd,GACAmE,GAAAG,KAAA2X,WACA7X,GAAAE,KAAA2X,WACA5X,GAAAC,KAAA2X,WAEA,YAAAtD,EAAA,GAEAyE,cAAA,WAIA,IAHA,IAAAE,EAAA,EACA9H,EAAA,EACAC,EAAAnR,KAAA6Y,QAAA/X,OACAoQ,EAAAC,GAAA,CACA,IAAAzV,EAAAwV,IACAlR,KAAA6Y,QAAAnd,GAAAqF,KAAAkY,IAAAD,GAAA,GACAA,GAAAhZ,KAAA2X,eAIA,IAAAuB,EAAA7I,EAAA,mCAAAqH,GACA1X,KAAA0X,UAAA,EACAzD,EAAApY,KAAAmE,KAAA,GACAA,KAAA0X,aAEAwB,EAAAvI,UAAA,EACAuI,EAAAlG,UAAAiB,EACAiF,EAAArc,UAAAyT,EAAA2D,EAAApX,WACAyS,SAAA,SAAAzP,EAAAC,EAAAC,GACAF,GAAAG,KAAA0X,UACA5X,GAAAE,KAAA0X,UACA3X,GAAAC,KAAA0X,UACA,IAAAa,EAAAxX,KAAAC,KAAAnB,IAAAC,IAAAC,KACAyY,EAAAD,EAAAxX,KAAAG,MAAAqX,GACAE,EAAA,EAAAD,EAEA,WADAzX,KAAAyW,IAAAgB,EAAAC,MAIA,IAAAU,EAAA9I,EAAA,oCAAAqH,EAAA0B,EAAAvE,EAAAwE,GACArZ,KAAA0X,YACA1X,KAAAoZ,eACApZ,KAAA6U,OACA7U,KAAAqZ,WACApF,EAAApY,KAAAmE,KAAA,IAEAmZ,EAAAxI,UAAA,EACAwI,EAAAnG,UAAAiB,EACAkF,EAAAtc,UAAAyT,EAAA2D,EAAApX,WACAyS,SAAA,SAAAzP,EAAAC,EAAAC,GACAF,GAAAG,KAAA0X,UACA5X,GAAAE,KAAA0X,UACA3X,GAAAC,KAAA0X,UAUA,IATA,IAAA4B,EAAAzZ,EAAA,IAAAA,IAAA,IACAyW,EAAAxW,EAAA,IAAAA,IAAA,IACAyW,EAAAxW,EAAA,IAAAA,IAAA,IACAwZ,EAAA,WACAC,EAAA,EACAC,EAAA,EACAC,EAAA,EACAxI,EAAAqF,EAAA,EACApF,EAAAoF,EAAA,EACArF,EAAAC,GAIA,IAHA,IAAAwI,EAAAzI,IACA0I,EAAAtD,EAAA,EACA7C,EAAA6C,EAAA,EACAsD,EAAAnG,GAIA,IAHA,IAAAoG,EAAAD,IACAE,EAAAR,EAAA,EACAS,EAAAT,EAAA,EACAQ,EAAAC,GAAA,CACA,IAAAC,EAAAF,IACAG,EAAAD,GAAA,EAAArF,EAAA2C,gBAAA0C,EAAAH,EAAAF,EAAA3Z,KAAA6U,MAAA,YACAqF,EAAAL,GAAA,EAAAlF,EAAA2C,gBAAA0C,EAAAH,EAAAF,EAAA3Z,KAAA6U,KAAA,eACAsF,EAAAR,GAAA,EAAAhF,EAAA2C,gBAAA0C,EAAAH,EAAAF,EAAA3Z,KAAA6U,KAAA,eACAuF,EAAAH,EAAApa,EACAwa,EAAAH,EAAApa,EACAwa,EAAAH,EAAApa,EACA/D,EAAAoe,IAAAC,IAAAC,IACAte,EAAAud,IACAA,EAAAvd,EACAwd,EAAAS,EACAR,EAAAS,EACAR,EAAAS,GAKA,IAAAha,EACA,GAAAH,KAAAqZ,SAAA,CACA,IAAAkB,EAAAf,EAAA3Z,EACA2a,EAAAf,EAAA3Z,EACA2a,EAAAf,EAAA3Z,EACAI,EAAA,mBAAAY,KAAAC,KAAAuZ,IAAAC,IAAAC,KAAA,OAEAta,EAAA,EAEA,OAAAA,EAAAH,KAAAoZ,cAAA,EAAAzE,EAAA2C,gBAAA,EAAAvW,KAAAG,MAAAsY,GAAA,EAAAzY,KAAAG,MAAAuY,GAAA,EAAA1Y,KAAAG,MAAAwY,GAAA,kBAGA,IAAAgB,EAAArK,EAAA,+BAAAsK,GACA1G,EAAApY,KAAAmE,KAAA,GACAA,KAAApE,QAAA,GAAA+e,GAEAD,EAAA/J,UAAA,EACA+J,EAAA1H,UAAAiB,EACAyG,EAAA7d,UAAAyT,EAAA2D,EAAApX,WACAyS,SAAA,SAAAzP,EAAAC,EAAAC,GACA,OAAAgB,KAAAyB,IAAAxC,KAAApE,QAAA,GAAA0T,SAAAzP,EAAAC,EAAAC,OAGA,IAAA6a,EAAAvK,EAAA,+BAAAwK,EAAAC,GACA7G,EAAApY,KAAAmE,KAAA,GACAA,KAAApE,QAAA,GAAAif,EACA7a,KAAApE,QAAA,GAAAkf,GAEAF,EAAAjK,UAAA,EACAiK,EAAA5H,UAAAiB,EACA2G,EAAA/d,UAAAyT,EAAA2D,EAAApX,WACAyS,SAAA,SAAAzP,EAAAC,EAAAC,GAGA,OAFAC,KAAApE,QAAA,GAAA0T,SAAAzP,EAAAC,EAAAC,GACAC,KAAApE,QAAA,GAAA0T,SAAAzP,EAAAC,EAAAC,MAIA,IAAAgb,EAAA1K,EAAA,iCAAAyK,EAAAD,EAAAG,GACA/G,EAAApY,KAAAmE,KAAA,GACAA,KAAApE,QAAA,GAAAkf,EACA9a,KAAApE,QAAA,GAAAif,EACA7a,KAAApE,QAAA,GAAAof,GAEAD,EAAApK,UAAA,EACAoK,EAAA/H,UAAAiB,EACA8G,EAAAle,UAAAyT,EAAA2D,EAAApX,WACAoe,eAAA,SAAA5G,GACA,OAAArU,KAAApE,QAAA,GAAAyY,GAEA6G,eAAA,WACA,OAAAlb,KAAApE,QAAA,IAEA0T,SAAA,SAAAzP,EAAAC,EAAAC,GACA,IAAAE,EAAAD,KAAApE,QAAA,GAAA0T,SAAAzP,EAAAC,EAAAC,GACAQ,EAAAP,KAAApE,QAAA,GAAA0T,SAAAzP,EAAAC,EAAAC,GACAhE,GAAAiE,KAAApE,QAAA,GAAA0T,SAAAzP,EAAAC,EAAAC,GAAA,KACA,OAAA4U,EAAAmB,kBAAA7V,EAAAM,EAAAxE,MAGA,IAAAof,EAAA9K,EAAA,iCAAAsK,GACA1G,EAAApY,KAAAmE,KAAA,GACAA,KAAApE,QAAA,GAAA+e,GAEAQ,EAAAxK,UAAA,EACAwK,EAAAnI,UAAAiB,EACAkH,EAAAte,UAAAyT,EAAA2D,EAAApX,WACAyS,SAAA,SAAAzP,EAAAC,EAAAC,GAQA,OAPAC,KAAAob,QAAApb,KAAAqb,IAAAxb,GAAAG,KAAAsb,IAAAxb,GAAAE,KAAAub,IAAAxb,IACAC,KAAAqU,MAAArU,KAAApE,QAAA,GAAA0T,SAAAzP,EAAAC,EAAAC,GACAC,KAAAqb,GAAAxb,EACAG,KAAAsb,GAAAxb,EACAE,KAAAub,GAAAxb,GAEAC,KAAAob,QAAA,EACApb,KAAAqU,SAGA,IAAAmH,EAAAnL,EAAA,iCAAAmH,EAAA/U,EAAAkY,GACA3a,KAAAyC,IAAA,EACAzC,KAAAwX,KAAA,EACAvD,EAAApY,KAAAmE,KAAA,GACAA,KAAApE,QAAA,GAAA+e,EACA3a,KAAAwX,MACAxX,KAAAyC,OAEA+Y,EAAA7K,UAAA,EACA6K,EAAAxI,UAAAiB,EACAuH,EAAA3e,UAAAyT,EAAA2D,EAAApX,WACAyS,SAAA,SAAAzP,EAAAC,EAAAC,GACA,IAAAsU,EAAArU,KAAApE,QAAA,GAAA0T,SAAAzP,EAAAC,EAAAC,GACA,OAAAsU,EAAArU,KAAAwX,IACAxX,KAAAwX,IACGnD,EAAArU,KAAAyC,IACHzC,KAAAyC,IAEA4R,KAIA,IAAAoH,EAAApL,EAAA,iCAAAsK,GACA1G,EAAApY,KAAAmE,KAAA,GACAA,KAAApE,QAAA,GAAA+e,EACA3a,KAAA0G,SAEA+U,EAAA9K,UAAA,EACA8K,EAAAzI,UAAAiB,EACAwH,EAAA5e,UAAAyT,EAAA2D,EAAApX,WACA6e,kBAAA,WACA,OAAA1b,KAAA0G,KAAA5F,QAEAY,IAAA,SAAAiZ,EAAAgB,GACA,IACAC,EADA,IAAAxI,MAAA,GAEAwI,EAAA,GAAAjB,EACAiB,EAAA,GAAAD,EAGA,IAFA,IAAAxK,EAAA,EACAD,EAAAlR,KAAA0G,KACAyK,EAAAD,EAAApQ,QAAA,CACA,IAAAX,EAAA+Q,EAAAC,GAEA,KADAA,EACAhR,EAAA,IAAAwa,EACA,OAGA3a,KAAA0G,KAAAxD,KAAA0Y,GACAhL,EAAAC,KAAA7Q,KAAA0G,KAAA,SAAAzG,EAAAM,GACA,OAAAN,EAAA,GAAAM,EAAA,IACA,EACIN,EAAA,IAAAM,EAAA,GACJ,EAEA,KAIAsb,MAAA,WACA7b,KAAA0G,SAEA4I,SAAA,SAAAzP,EAAAC,EAAAC,GAKA,IAJA,IAAA+b,EAAA9b,KAAApE,QAAA,GAAA0T,SAAAzP,EAAAC,EAAAC,GACAgc,EAAA,EACA7K,EAAA,EACAC,EAAAnR,KAAA0G,KAAA5F,OACAoQ,EAAAC,GAAA,CACAD,IACA,GAAA4K,EAAA9b,KAAA0G,KAAAqV,KAAA,GACA,MAGA,IAAA1H,EAAA0H,EAAA,EACAtZ,EAAAzC,KAAA0G,KAAA5F,OAAA,EACAkb,EAAA3H,EAAA,IAAAA,EAAA5R,IAAA4R,EACAkB,EAAAwG,EAAA,EACAE,EAAAjc,KAAA0G,KAAA5F,OAAA,EACAob,EAAA3G,EAAA,IAAAA,EAAA0G,IAAA1G,EACA4G,EAAAnc,KAAA0G,KAAA5F,OAAA,EACA4S,EAAAqI,EAAA,IAAAA,EAAAI,IAAAJ,EACAvG,EAAAuG,EAAA,EACAK,EAAApc,KAAA0G,KAAA5F,OAAA,EACAub,EAAA7G,EAAA,IAAAA,EAAA4G,IAAA5G,EACA,GAAA0G,GAAAxI,EACA,OAAA1T,KAAA0G,KAAAwV,GAAA,GAEA,IAAAI,EAAAtc,KAAA0G,KAAAwV,GAAA,GAEAjc,GAAA6b,EAAAQ,IADAtc,KAAA0G,KAAAgN,GAAA,GACA4I,GACA,OAAA3H,EAAAmC,iBAAA9W,KAAA0G,KAAAsV,GAAA,GAAAhc,KAAA0G,KAAAwV,GAAA,GAAAlc,KAAA0G,KAAAgN,GAAA,GAAA1T,KAAA0G,KAAA2V,GAAA,GAAApc,MAGA,IAAAsc,EAAAlM,EAAA,oCAAAsK,EAAA9a,EAAAC,EAAAC,GACAC,KAAAwc,SAAA,EACAvI,EAAApY,KAAAmE,KAAA,GACAA,KAAApE,QAAA,GAAA+e,EACA3a,KAAApE,QAAA,GAAAiE,EACAG,KAAApE,QAAA,GAAAkE,EACAE,KAAApE,QAAA,GAAAmE,GAEAwc,EAAA5L,UAAA,EACA4L,EAAAvJ,UAAAiB,EACAsI,EAAA1f,UAAAyT,EAAA2D,EAAApX,WACA4f,MAAA,SAAArK,GACA,OAAApS,KAAApE,QAAA,GAAAwW,GAEAsK,MAAA,WACA,OAAA1c,KAAApE,QAAA,IAEA+gB,MAAA,SAAAvK,GACA,OAAApS,KAAApE,QAAA,GAAAwW,GAEAwK,MAAA,WACA,OAAA5c,KAAApE,QAAA,IAEAihB,MAAA,SAAAzK,GACA,OAAApS,KAAApE,QAAA,GAAAwW,GAEA0K,MAAA,WACA,OAAA9c,KAAApE,QAAA,IAEA0T,SAAA,SAAAzP,EAAAC,EAAAC,GACA,IAAAhC,EAAA8B,EAAAG,KAAApE,QAAA,GAAA0T,SAAAzP,EAAAC,EAAAC,GACA/B,EAAA8B,EAAAE,KAAApE,QAAA,GAAA0T,SAAAzP,EAAAC,EAAAC,GACA9B,EAAA8B,EAAAC,KAAApE,QAAA,GAAA0T,SAAAzP,EAAAC,EAAAC,GACA,OAAAC,KAAApE,QAAA,GAAA0T,SAAAvR,EAAAC,EAAAC,MAGA,IAAA8e,EAAA1M,EAAA,oCAAAmM,EAAA7B,GACA3a,KAAAwc,SAAA,EACAvI,EAAApY,KAAAmE,KAAA,GACAA,KAAApE,QAAA,GAAA+e,EACA3a,KAAAwc,YAEAO,EAAApM,UAAA,EACAoM,EAAA/J,UAAAiB,EACA8I,EAAAlgB,UAAAyT,EAAA2D,EAAApX,WACAyS,SAAA,SAAAzP,EAAAC,EAAAC,GACA,IAAAsU,EAAArU,KAAApE,QAAA,GAAA0T,SAAAzP,EAAAC,EAAAC,GACA,SAAAgB,KAAAkY,IAAAlY,KAAAyB,KAAA6R,EAAA,MAAArU,KAAAwc,UAAA,KAGA,IAAAQ,EAAA3M,EAAA,kCAAAsK,GACA1G,EAAApY,KAAAmE,KAAA,GACAA,KAAApE,QAAA,GAAA+e,GAEAqC,EAAArM,UAAA,EACAqM,EAAAhK,UAAAiB,EACA+I,EAAAngB,UAAAyT,EAAA2D,EAAApX,WACAyS,SAAA,SAAAzP,EAAAC,EAAAC,GACA,OAAAC,KAAApE,QAAA,GAAA0T,SAAAzP,EAAAC,EAAAC,MAGA,IAAAkd,EAAA5M,EAAA,+BAAAwK,EAAAC,GACA7G,EAAApY,KAAAmE,KAAA,GACAA,KAAApE,QAAA,GAAAif,EACA7a,KAAApE,QAAA,GAAAkf,GAEAmC,EAAAtM,UAAA,EACAsM,EAAAjK,UAAAiB,EACAgJ,EAAApgB,UAAAyT,EAAA2D,EAAApX,WACAyS,SAAA,SAAAzP,EAAAC,EAAAC,GACA,IAAAE,EAAAD,KAAApE,QAAA,GAAA0T,SAAAzP,EAAAC,EAAAC,GACAQ,EAAAP,KAAApE,QAAA,GAAA0T,SAAAzP,EAAAC,EAAAC,GACA,OAAAgB,KAAA0B,IAAAxC,EAAAM,MAGA,IAAA2c,EAAA7M,EAAA,+BAAAwK,EAAAC,GACA7G,EAAApY,KAAAmE,KAAA,GACAA,KAAApE,QAAA,GAAAif,EACA7a,KAAApE,QAAA,GAAAkf,GAEAoC,EAAAvM,UAAA,EACAuM,EAAAlK,UAAAiB,EACAiJ,EAAArgB,UAAAyT,EAAA2D,EAAApX,WACAyS,SAAA,SAAAzP,EAAAC,EAAAC,GACA,IAAAE,EAAAD,KAAApE,QAAA,GAAA0T,SAAAzP,EAAAC,EAAAC,GACAQ,EAAAP,KAAApE,QAAA,GAAA0T,SAAAzP,EAAAC,EAAAC,GACA,OAAAgB,KAAAyW,IAAAvX,EAAAM,MAGA,IAAA4c,EAAA9M,EAAA,oCAAAwK,EAAAC,GACA7G,EAAApY,KAAAmE,KAAA,GACAA,KAAApE,QAAA,GAAAif,EACA7a,KAAApE,QAAA,GAAAkf,GAEAqC,EAAAxM,UAAA,EACAwM,EAAAnK,UAAAiB,EACAkJ,EAAAtgB,UAAAyT,EAAA2D,EAAApX,WACAyS,SAAA,SAAAzP,EAAAC,EAAAC,GACA,OAAAC,KAAApE,QAAA,GAAA0T,SAAAzP,EAAAC,EAAAC,GAAAC,KAAApE,QAAA,GAAA0T,SAAAzP,EAAAC,EAAAC,MAGA,IAAAqd,EAAA/M,EAAA,iCAAAwK,EAAAC,GACA7G,EAAApY,KAAAmE,KAAA,GACAA,KAAApE,QAAA,GAAAif,EACA7a,KAAApE,QAAA,GAAAkf,GAEAsC,EAAAzM,UAAA,EACAyM,EAAApK,UAAAiB,EACAmJ,EAAAvgB,UAAAyT,EAAA2D,EAAApX,WACAyS,SAAA,SAAAzP,EAAAC,EAAAC,GACA,OAAAgB,KAAAkY,IAAAjZ,KAAApE,QAAA,GAAA0T,SAAAzP,EAAAC,EAAAC,GAAAC,KAAApE,QAAA,GAAA0T,SAAAzP,EAAAC,EAAAC,OAGA,IAAAsd,EAAAhN,EAAA,kCAAAiN,EAAAC,EAAAC,EAAA7C,GACA,MAAA6C,IACAA,EAAA,GAEA,MAAAD,IACAA,EAAA,GAEA,MAAAD,IACAA,EAAA,GAEArJ,EAAApY,KAAAmE,KAAA,GACAA,KAAApE,QAAA,GAAA+e,EACA3a,KAAAsd,KACAtd,KAAAud,KACAvd,KAAAwd,KACAxd,KAAAyd,UAAAH,EAAAC,EAAAC,IAEAH,EAAA1M,UAAA,EACA0M,EAAArK,UAAAiB,EACAoJ,EAAAxgB,UAAAyT,EAAA2D,EAAApX,WACA4gB,UAAA,SAAAC,EAAAC,EAAAC,GACA,IAAApE,EAAAzY,KAAA8c,IAAA,aAAAH,GACAjE,EAAA1Y,KAAA8c,IAAA,aAAAF,GACAjE,EAAA3Y,KAAA8c,IAAA,aAAAD,GACAxI,EAAArU,KAAA+c,IAAA,aAAAJ,GACArI,EAAAtU,KAAA+c,IAAA,aAAAH,GACArI,EAAAvU,KAAA+c,IAAA,aAAAF,GACA5d,KAAA+d,SAAA1I,EAAAD,EAAAE,EAAAmE,EAAAC,EACA1Z,KAAAge,SAAAxE,EAAAlE,EACAtV,KAAAie,SAAA5I,EAAAqE,EAAAD,EAAArE,EAAAE,EACAtV,KAAAke,SAAA7I,EAAAD,EAAAsE,EAAAD,EAAAnE,EACAtV,KAAAme,SAAA3E,EAAAE,EACA1Z,KAAAoe,UAAA3E,EAAArE,EAAAsE,EAAArE,EAAAC,EACAtV,KAAAqe,UAAAhJ,EAAAmE,EACAxZ,KAAAse,SAAAlJ,EACApV,KAAAue,SAAA9E,EAAAD,EACAxZ,KAAAsd,GAAAI,EACA1d,KAAAud,GAAAI,EACA3d,KAAAwd,GAAAI,GAEAtO,SAAA,SAAAzP,EAAAC,EAAAC,GACA,IAAAgY,EAAA/X,KAAA+d,SAAAle,EAAAG,KAAAge,SAAAle,EAAAE,KAAAie,SAAAle,EACAiY,EAAAhY,KAAAke,SAAAre,EAAAG,KAAAme,SAAAre,EAAAE,KAAAoe,SAAAre,EACAkY,EAAAjY,KAAAqe,SAAAxe,EAAAG,KAAAse,SAAAxe,EAAAE,KAAAue,SAAAxe,EACA,OAAAC,KAAApE,QAAA,GAAA0T,SAAAyI,EAAAC,EAAAC,MAGA,IAAAuG,EAAAnO,EAAA,iCAAAoO,EAAAC,EAAAC,EAAAhE,GACA,MAAAgE,IACAA,EAAA,GAEA,MAAAD,IACAA,EAAA,GAEA,MAAAD,IACAA,EAAA,GAEAxK,EAAApY,KAAAmE,KAAA,GACAA,KAAApE,QAAA,GAAA+e,EACA3a,KAAAye,KACAze,KAAA0e,KACA1e,KAAA2e,MAEAH,EAAA7N,UAAA,EACA6N,EAAAxL,UAAAiB,EACAuK,EAAA3hB,UAAAyT,EAAA2D,EAAApX,WACAyS,SAAA,SAAAzP,EAAAC,EAAAC,GACA,OAAAC,KAAApE,QAAA,GAAA0T,SAAAzP,EAAAG,KAAAye,GAAA3e,EAAAE,KAAA0e,GAAA3e,EAAAC,KAAA2e,OAGA,IAAAC,EAAAvO,EAAA,qCAAAwO,EAAAC,EAAAnE,GACA,MAAAmE,IACAA,EAAA,GAEA,MAAAD,IACAA,EAAA,GAEA5K,EAAApY,KAAAmE,KAAA,GACAA,KAAApE,QAAA,GAAA+e,EACA3a,KAAA6e,QACA7e,KAAA8e,QAEAF,EAAAjO,UAAA,EACAiO,EAAA5L,UAAAiB,EACA2K,EAAA/hB,UAAAyT,EAAA2D,EAAApX,WACAyS,SAAA,SAAAzP,EAAAC,EAAAC,GACA,OAAAC,KAAApE,QAAA,GAAA0T,SAAAzP,EAAAC,EAAAC,GAAAC,KAAA6e,MAAA7e,KAAA8e,QAGA,IAAAC,EAAA1O,EAAA,kCAAAmH,EAAA/U,EAAAuc,EAAAC,EAAAC,EAAAlE,GACA,MAAAgE,IACAA,EAAA,GAEA,MAAAvc,IACAA,EAAA,GAEA,MAAA+U,IACAA,GAAA,GAEAxX,KAAAyC,IAAA,EACAzC,KAAAwX,KAAA,EACAvD,EAAApY,KAAAmE,KAAA,GACAA,KAAApE,QAAA,GAAAqjB,EACAjf,KAAApE,QAAA,GAAAsjB,EACAlf,KAAApE,QAAA,GAAAof,EACAhb,KAAAwX,MACAxX,KAAAyC,MACAzC,KAAAgf,WAEAD,EAAApO,UAAA,EACAoO,EAAA/L,UAAAiB,EACA8K,EAAAliB,UAAAyT,EAAA2D,EAAApX,WACAyS,SAAA,SAAAzP,EAAAC,EAAAC,GACA,IAAAof,EAAAnf,KAAApE,QAAA,GAAA0T,SAAAzP,EAAAC,EAAAC,GACA,GAAAC,KAAAgf,QAAA,GACA,IAAA/e,EACA,GAAAkf,EAAAnf,KAAAwX,IAAAxX,KAAAgf,QACA,OAAAhf,KAAApE,QAAA,GAAA0T,SAAAzP,EAAAC,EAAAC,GAEA,GAAAof,EAAAnf,KAAAwX,IAAAxX,KAAAgf,QAAA,CACA,IAAAI,EAAApf,KAAAwX,IAAAxX,KAAAgf,QAEA3K,GAAA8K,EAAAC,IADApf,KAAAwX,IAAAxX,KAAAgf,QACAI,GAEA,OADAnf,EAAAoU,KAAA,IAAAA,GACAM,EAAAmB,kBAAA9V,KAAApE,QAAA,GAAA0T,SAAAzP,EAAAC,EAAAC,GAAAC,KAAApE,QAAA,GAAA0T,SAAAzP,EAAAC,EAAAC,GAAAE,GAEA,GAAAkf,EAAAnf,KAAAyC,IAAAzC,KAAAgf,QACA,OAAAhf,KAAApE,QAAA,GAAA0T,SAAAzP,EAAAC,EAAAC,GAEA,GAAAof,EAAAnf,KAAAyC,IAAAzC,KAAAgf,QAAA,CACA,IAAAK,EAAArf,KAAAyC,IAAAzC,KAAAgf,QAEAzJ,GAAA4J,EAAAE,IADArf,KAAAyC,IAAAzC,KAAAgf,QACAK,GAEA,OADApf,EAAAsV,KAAA,IAAAA,GACAZ,EAAAmB,kBAAA9V,KAAApE,QAAA,GAAA0T,SAAAzP,EAAAC,EAAAC,GAAAC,KAAApE,QAAA,GAAA0T,SAAAzP,EAAAC,EAAAC,GAAAE,GAEA,OAAAD,KAAApE,QAAA,GAAA0T,SAAAzP,EAAAC,EAAAC,GAEA,OAAAof,EAAAnf,KAAAwX,KAAA2H,EAAAnf,KAAAyC,IACAzC,KAAApE,QAAA,GAAA0T,SAAAzP,EAAAC,EAAAC,GAEAC,KAAApE,QAAA,GAAA0T,SAAAzP,EAAAC,EAAAC,MAGA,IAAAuf,EAAAjP,EAAA,oCAAAwK,EAAAC,GACA7G,EAAApY,KAAAmE,KAAA,GACAA,KAAApE,QAAA,GAAAif,EACA7a,KAAApE,QAAA,GAAAkf,GAEAwE,EAAA3O,UAAA,EACA2O,EAAAtM,UAAAiB,EACAqL,EAAAziB,UAAAyT,EAAA2D,EAAApX,WACAyS,SAAA,SAAAzP,EAAAC,EAAAC,GACA,OAAAC,KAAApE,QAAA,GAAA0T,SAAAzP,EAAAC,EAAAC,GAAAC,KAAApE,QAAA,GAAA0T,SAAAzP,EAAAC,EAAAC,MAGA,IAAAwf,EAAAlP,EAAA,mCAAAsK,EAAA6E,GACA,MAAAA,IACAA,GAAA,GAEAvL,EAAApY,KAAAmE,KAAA,GACAA,KAAApE,QAAA,GAAA+e,EACA3a,KAAAwf,WACAxf,KAAA0G,SAEA6Y,EAAA5O,UAAA,EACA4O,EAAAvM,UAAAiB,EACAsL,EAAA1iB,UAAAyT,EAAA2D,EAAApX,WACA6e,kBAAA,WACA,OAAA1b,KAAA0G,KAAA5F,QAEA+a,MAAA,WACA7b,KAAA0G,SAEAhF,IAAA,SAAA2S,GAGA,IAFA,IAAAlD,EAAA,EACAD,EAAAlR,KAAA0G,KACAyK,EAAAD,EAAApQ,QAAA,CACA,IAAAsR,EAAAlB,EAAAC,GAEA,KADAA,EACAiB,GAAAiC,EACA,OAGArU,KAAA0G,KAAAxD,KAAAmR,GACAzD,EAAAC,KAAA7Q,KAAA0G,KAAA,SAAAzG,EAAAM,GACA,OAAAN,EAAAM,GACA,EACIN,GAAAM,EACJ,EAEA,KAIAkf,SAAA,SAAAC,GACA1f,KAAA6b,QAKA,IAJA,IAAA8D,EAAA,GAAAD,EAAA,GACAP,GAAA,EACAjO,EAAA,EACAC,EAAAuO,EACAxO,EAAAC,GAAA,CACAD,IACAlR,KAAA0B,IAAAyd,GACAA,GAAAQ,IAGArQ,SAAA,SAAAzP,EAAAC,EAAAC,GAKA,IAJA,IAAA+b,EAAA9b,KAAApE,QAAA,GAAA0T,SAAAzP,EAAAC,EAAAC,GACAgc,EAAA,EACA7K,EAAA,EACAC,EAAAnR,KAAA0G,KAAA5F,OACAoQ,EAAAC,GAAA,CACAD,IACA,GAAA4K,EAAA9b,KAAA0G,KAAAqV,KACA,MAGA,IAAAC,EAAAD,EAAA,MAAAA,EAAA,EAAA/b,KAAA0G,KAAA5F,OAAA,EAAAd,KAAA0G,KAAA5F,OAAA,EAAAib,EAAA,EACAG,EAAAH,EAAA,IAAAA,EAAA/b,KAAA0G,KAAA5F,OAAA,EAAAd,KAAA0G,KAAA5F,OAAA,EAAAib,EACA,GAAAC,GAAAE,EACA,OAAAlc,KAAA0G,KAAAwV,GAEA,IAAA0D,EAAA5f,KAAA0G,KAAAsV,GACA6D,EAAA7f,KAAA0G,KAAAwV,GACAjc,GAAA6b,EAAA8D,IAAAC,EAAAD,GACA,GAAA5f,KAAAwf,SAAA,CACAvf,EAAA,EAAAA,EACA,IAAAoC,EAAAud,EACAA,EAAAC,EACAA,EAAAxd,EAGA,OADApC,KACA0U,EAAAmB,kBAAA8J,EAAAC,EAAA5f,MAGA,IAAA6f,EAAAzP,EAAA,qCAAAxQ,EAAAC,EAAAC,EAAA4a,GACA3a,KAAA/B,GAAA,EACA+B,KAAAhC,GAAA,EACAgC,KAAAjC,GAAA,EACAkW,EAAApY,KAAAmE,KAAA,GACAA,KAAApE,QAAA,GAAA+e,EACA3a,KAAAjC,GAAA8B,EACAG,KAAAhC,GAAA8B,EACAE,KAAA/B,GAAA8B,GAEA+f,EAAAnP,UAAA,EACAmP,EAAA9M,UAAAiB,EACA6L,EAAAjjB,UAAAyT,EAAA2D,EAAApX,WACAyS,SAAA,SAAAzP,EAAAC,EAAAC,GACA,OAAAC,KAAApE,QAAA,GAAA0T,SAAAzP,EAAAG,KAAAjC,GAAA+B,EAAAE,KAAAhC,GAAA+B,EAAAC,KAAA/B,OAGA,IAAA8hB,EAAA1P,EAAA,sCAAA2P,EAAArF,EAAAsF,EAAAC,EAAAC,GACAngB,KAAAggB,MAAA,EACA/L,EAAApY,KAAAmE,KAAA,GACAA,KAAApE,QAAA,GAAA+e,EACA3a,KAAAggB,QAEAhgB,KAAAogB,SADA,MAAAH,EACA,IAAAvH,EAAA,aAAApE,EAAArE,QAEAgQ,EAGAjgB,KAAAqgB,SADA,MAAAH,EACA,IAAAxH,EAAA,aAAApE,EAAArE,QAEAiQ,EAGAlgB,KAAAsgB,SADA,MAAAH,EACA,IAAAzH,EAAA,aAAApE,EAAArE,QAEAkQ,GAGAJ,EAAApP,UAAA,EACAoP,EAAA/M,UAAAiB,EACA8L,EAAAljB,UAAAyT,EAAA2D,EAAApX,WACA0jB,aAAA,SAAA7I,GACA1X,KAAAogB,SAAA1I,YACA1X,KAAAqgB,SAAA3I,YACA1X,KAAAsgB,SAAA5I,aAEA8I,aAAA,SAAAC,GACAzgB,KAAAogB,SAAAvI,QAAA4I,EACAzgB,KAAAqgB,SAAAxI,QAAA4I,EACAzgB,KAAAsgB,SAAAzI,QAAA4I,GAEAC,QAAA,SAAA7L,GACA7U,KAAAogB,SAAAvL,OACA7U,KAAAqgB,SAAAxL,OACA7U,KAAAsgB,SAAAzL,QAEAvF,SAAA,SAAAzP,EAAAC,EAAAC,GACA,IAAAqa,EAAAva,EAAAG,KAAAogB,SAAA9Q,SAAAzP,EAAA,iBAAAC,EAAA,gBAAAC,EAAA,mBAAAC,KAAAggB,MACA3F,EAAAva,EAAAE,KAAAqgB,SAAA/Q,SAAAzP,EAAA,kBAAAC,EAAA,cAAAC,EAAA,mBAAAC,KAAAggB,MACA1F,EAAAva,EAAAC,KAAAsgB,SAAAhR,SAAAzP,EAAA,gBAAAC,EAAA,kBAAAC,EAAA,mBAAAC,KAAAggB,MACA,OAAAhgB,KAAApE,QAAA,GAAA0T,SAAA8K,EAAAC,EAAAC,MAGAzH,OAAAlC,UAAA,EACAyC,MAAAzC,UAAA,EACA+D,EAAAF,IAAAF,EAAAE,IACAE,EAAAzE,OAAAqE,EAAArE,OACAyE,EAAAD,KAAAH,EAAAG,KACAE,EAAAgM,MAAA,mBACAhM,EAAAiM,eAAA,GACAjM,EAAAkM,QAAA,aACAlM,EAAA6B,gBAAA,KACA7B,EAAA8B,gBAAA,MACA9B,EAAA+B,gBAAA,KACA/B,EAAAgC,cAAA,KACAhC,EAAAiC,eAAA,EACAjC,EAAAkC,UAAA,i4NACAkJ,EAAAe,GAAA,iBACAf,EAAAgB,GAAA,gBACAhB,EAAAiB,GAAA,kBACAjB,EAAAkB,GAAA,kBACAlB,EAAAmB,GAAA,cACAnB,EAAAoB,GAAA,kBACApB,EAAAqB,GAAA,gBACArB,EAAAsB,GAAA,kBACAtB,EAAAuB,GAAA,kBAjtCA,CAktCC9lB,4CChtCK4I,EAA0B,SAAI,GAAK,WAAQ,OAAO,IAAIuI,YAAY5I,EAAA,EAA8BA,EAAA,KAEtGH,EAAA","file":"worker.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 8);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 9c27db698bd0745f6b33","import v3 from \"v3\"\r\n\r\nexport const CHUNK_SIZE         = 32\r\nexport const CHUNK_SIZE_SQUARED = CHUNK_SIZE * CHUNK_SIZE\r\nexport const CHUNK_SIZE_CUBED   = CHUNK_SIZE * CHUNK_SIZE * CHUNK_SIZE\r\n\t\r\nexport const facesPerCube     = 6\r\nexport const uniqVertsPerFace = 4\r\nexport const indicesPerFace   = 6\r\n\r\nexport const maxVerts         = 64 * 1024 // this should be 64k\r\nexport const maxQuadsPerChunk = maxVerts / uniqVertsPerFace\r\nexport const maxQuadsPerMesh  = 2400\r\n\r\nexport const quadVertexElementSize = 2\r\nexport const quadVertexByteSize = Uint32Array.BYTES_PER_ELEMENT * quadVertexElementSize\r\nexport const quadByteStride = /*geometrics.VertexArrayType*/Uint32Array.BYTES_PER_ELEMENT * 2\r\nexport const bufferByteSize = maxQuadsPerMesh * quadByteStride\r\n\r\nexport type VertexArrayType = Uint32Array\r\n\r\n\r\nexport function worldPosToChunkPos(worldPos: v3) {\r\n\treturn worldPos.clone().divideScalar(CHUNK_SIZE).floor()\r\n}\r\n\r\n\r\n// Sides\r\n\r\nexport interface SideType {\r\n\tname: string,\r\n\tid: number,\r\n\taxis: number,\r\n\taxisDelta: number,\r\n\tverts: Array<number>,\r\n\tdx: number,\r\n\tdy: number,\r\n\tdz: number,\r\n\tsize: number,\r\n\tdeltaIndex: number,\r\n\tdeltaV3?: v3,\r\n\ttangents?: Array<{ side: SideType, tangents: Array<SideType> }>,\r\n\topposite?: SideType,\r\n}\r\n\r\nconst s: { [key: string]: SideType } = {\r\n\tT: { name: \"TOP\", id: 0, axis: 1, axisDelta: 1, verts: [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0,], dx: 0, dy: 1, dz: 0, size: CHUNK_SIZE, deltaIndex: 1, },\r\n\tB: { name: \"BOTTOM\", id: 1, axis: 1, axisDelta: -1, verts: [0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1,], dx: 0, dy: -1, dz: 0, size: CHUNK_SIZE, deltaIndex: -1, },\r\n\tN: { name: \"NORTH\", id: 2, axis: 2, axisDelta: 1, verts: [1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1,], dx: 0, dy: 0, dz: 1, size: CHUNK_SIZE, deltaIndex: CHUNK_SIZE, },\r\n\tS: { name: \"SOUTH\", id: 3, axis: 2, axisDelta: -1, verts: [0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0,], dx: 0, dy: 0, dz: -1, size: CHUNK_SIZE, deltaIndex: -CHUNK_SIZE, },\r\n\tE: { name: \"EAST\", id: 4, axis: 0, axisDelta: 1, verts: [1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1,], dx: 1, dy: 0, dz: 0, size: CHUNK_SIZE, deltaIndex: CHUNK_SIZE_SQUARED, },\r\n\tW: { name: \"WEST\", id: 5, axis: 0, axisDelta: -1, verts: [0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0,], dx: -1, dy: 0, dz: 0, size: CHUNK_SIZE, deltaIndex: -CHUNK_SIZE_SQUARED, },\r\n}\r\n\r\nfor (let key in s) {\r\n\tconst side = s[key]\r\n\tside.deltaV3 = new v3(side.dx, side.dy, side.dz)\r\n}\r\n\r\ns.T.tangents = [{ side: s.N, tangents: [s.E, s.W] }, { side: s.E, tangents: [s.S, s.N] }, { side: s.S, tangents: [s.W, s.E] }, { side: s.W, tangents: [s.N, s.S] }]\r\ns.B.tangents = [{ side: s.S, tangents: [s.W, s.E] }, { side: s.E, tangents: [s.S, s.N] }, { side: s.N, tangents: [s.E, s.W] }, { side: s.W, tangents: [s.N, s.S] }]\r\ns.N.tangents = [{ side: s.E, tangents: [s.T, s.B] }, { side: s.T, tangents: [s.E, s.W] }, { side: s.W, tangents: [s.B, s.T] }, { side: s.B, tangents: [s.W, s.E] }]\r\ns.S.tangents = [{ side: s.W, tangents: [s.B, s.T] }, { side: s.T, tangents: [s.E, s.W] }, { side: s.E, tangents: [s.T, s.B] }, { side: s.B, tangents: [s.W, s.E] }]\r\ns.E.tangents = [{ side: s.S, tangents: [s.T, s.B] }, { side: s.T, tangents: [s.N, s.S] }, { side: s.N, tangents: [s.B, s.T] }, { side: s.B, tangents: [s.S, s.N] }]\r\ns.W.tangents = [{ side: s.N, tangents: [s.B, s.T] }, { side: s.T, tangents: [s.N, s.S] }, { side: s.S, tangents: [s.T, s.B] }, { side: s.B, tangents: [s.S, s.N] }]\r\n\r\ns.T.opposite = s.B\r\ns.B.opposite = s.T\r\ns.N.opposite = s.S\r\ns.S.opposite = s.N\r\ns.E.opposite = s.W\r\ns.W.opposite = s.E\r\n\r\nexport const Sides = {\r\n\tbyName: { TOP: s.T, BOTTOM: s.B, NORTH: s.N, SOUTH: s.S, EAST: s.E, WEST: s.W },\r\n\tbyId: [s.T, s.B, s.N, s.S, s.E, s.W],\r\n\tbyAxis: [[s.E, s.W], [s.T, s.B], [s.N, s.S]],\r\n\teach(callback: (side: SideType) => void) {\r\n\t\tfor (var sideId = 0; sideId < 6; sideId += 1) {\r\n\t\t\tcallback(Sides.byId[sideId])\r\n\t\t}\r\n\t},\r\n\t//findFromNormal(normal: v3) {\r\n\t//\treturn _.minBy(Sides.byId, side => {   // TODO: rewrite without lodash for worker?\r\n\t//\t\treturn Math.abs(side.dx - normal.x) + Math.abs(side.dy - normal.y) + Math.abs(side.dz - normal.z)\r\n\t//\t})\r\n\t//},\r\n}\r\n\r\n\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/common/geometrics.ts","const EPSILON = 0.000001\r\n\r\nexport default class v3 {\r\n\r\n\ta: Float32Array\r\n\r\n\tconstructor(x = 0, y = 0, z = 0) {\r\n\t\tthis.a = new Float32Array([ x, y, z ])\r\n\t}\r\n\tget x() { return this.a[0] }\r\n\tget y() { return this.a[1] }\r\n\tget z() { return this.a[2] }\r\n\tset x(v: number) { this.a[0] = v }\r\n\tset y(v: number) { this.a[1] = v }\r\n\tset z(v: number) { this.a[2] = v }\r\n\tclone() {\r\n\t\treturn new v3(this.a[0], this.a[1], this.a[2])\r\n\t}\r\n\tset(x: number, y: number, z: number) {\r\n\t\tthis.a[0] = x\r\n\t\tthis.a[1] = y\r\n\t\tthis.a[2] = z\r\n\t\treturn this\r\n\t}\r\n\tsetFrom(b: v3) {\r\n\t\tthis.a[0] = b.a[0]\r\n\t\tthis.a[1] = b.a[1]\r\n\t\tthis.a[2] = b.a[2]\r\n\t\treturn this\r\n\t}\r\n\tsetSum(b: v3, c: v3) {\r\n\t\tthis.a[0] = b.a[0] + c.a[0]\r\n\t\tthis.a[1] = b.a[1] + c.a[1]\r\n\t\tthis.a[2] = b.a[2] + c.a[2]\r\n\t\treturn this\r\n\t}\r\n\ttoString() {\r\n\t\treturn this.a[0] + ',' + this.a[1] + ',' + this.a[2]\r\n\t}\r\n\tget id() {\r\n\t\treturn this.a[0] + ',' + this.a[1] + ',' + this.a[2]\r\n\t}\r\n\r\n\t// operations involving no arguments\r\n\tlengthSqr() {\r\n\t\tconst ax = this.a[0], ay = this.a[1], az = this.a[2]\r\n\t\treturn ax * ax + ay * ay + az * az\r\n\t}\r\n\tlength() {\r\n\t\treturn Math.sqrt(this.lengthSqr())\r\n\t}\r\n\tceil() {\r\n\t\tthis.a[0] = Math.ceil(this.a[0])\r\n\t\tthis.a[1] = Math.ceil(this.a[1])\r\n\t\tthis.a[2] = Math.ceil(this.a[2])\r\n\t\treturn this\r\n\t}\r\n\tfloor() {\r\n\t\tthis.a[0] = Math.floor(this.a[0])\r\n\t\tthis.a[1] = Math.floor(this.a[1])\r\n\t\tthis.a[2] = Math.floor(this.a[2])\r\n\t\treturn this\r\n\t}\r\n\tnegate() {\r\n\t\tthis.a[0] = -(this.a[0])\r\n\t\tthis.a[1] = -(this.a[1])\r\n\t\tthis.a[2] = -(this.a[2])\r\n\t\treturn this\r\n\t}\r\n\tinvert() {\r\n\t\tthis.a[0] = 1 / this.a[0]\r\n\t\tthis.a[1] = 1 / this.a[1]\r\n\t\tthis.a[2] = 1 / this.a[2]\r\n\t\treturn this\r\n\t}\r\n\tnormalize() {\r\n\t\tconst lenSqr = this.lengthSqr()\r\n\t\tif (lenSqr > 0) {\r\n\t\t\tthis.multiplyScalar(1 / Math.sqrt(lenSqr))\r\n\t\t}\r\n\t\treturn this\r\n\t}\r\n\r\n\t// operations involving a scalar argument\r\n\tmultiplyScalar(scalar: number) {\r\n\t\tthis.a[0] *= scalar\r\n\t\tthis.a[1] *= scalar\r\n\t\tthis.a[2] *= scalar\r\n\t\treturn this\r\n\t}\r\n\tdivideScalar(scalar: number) {\r\n\t\tthis.a[0] /= scalar\r\n\t\tthis.a[1] /= scalar\r\n\t\tthis.a[2] /= scalar\r\n\t\treturn this\r\n\t}\r\n\r\n\t// operations involving a second vector\r\n\tadd(that: v3) {\r\n\t\tthis.a[0] += that.a[0]\r\n\t\tthis.a[1] += that.a[1]\r\n\t\tthis.a[2] += that.a[2]\r\n\t\treturn this\r\n\t}\r\n\tsubtract(that: v3) {\r\n\t\tthis.a[0] -= that.a[0]\r\n\t\tthis.a[1] -= that.a[1]\r\n\t\tthis.a[2] -= that.a[2]\r\n\t\treturn this\r\n\t}\r\n\tmultiply(that: v3) {\r\n\t\tthis.a[0] *= that.a[0]\r\n\t\tthis.a[1] *= that.a[1]\r\n\t\tthis.a[2] *= that.a[2]\r\n\t\treturn this\r\n\t}\r\n\tdivide(that: v3) {\r\n\t\tthis.a[0] /= that.a[0]\r\n\t\tthis.a[1] /= that.a[1]\r\n\t\tthis.a[2] /= that.a[2]\r\n\t\treturn this\r\n\t}\r\n\tdot(that: v3) {\r\n\t\treturn this.a[0] * that.a[0] + this.a[1] * that.a[1] + this.a[2] * that.a[2]\r\n\t}\r\n\tcross(that: v3) {\r\n\t\tconst ax = this.a[0], ay = this.a[1], az = this.a[2]\r\n\t\tconst bx = that.a[0], by = that.a[1], bz = that.a[2]\r\n\t\tthis.a[0] = ay * bz - az * by\r\n\t\tthis.a[1] = az * bx - ax * bz\r\n\t\tthis.a[2] = ax * by - ay * bx\r\n\t\treturn this\r\n\t}\r\n\tlerp(that: v3, t: number) {\r\n\t\tconst ax = this.a[0], ay = this.a[1], az = this.a[2]\r\n\t\tthis.a[0] = ay + t * (that.a[0] - ax)\r\n\t\tthis.a[1] = az + t * (that.a[1] - ay)\r\n\t\tthis.a[2] = ax + t * (that.a[2] - az)\r\n\t\treturn this\r\n\t}\r\n\texactEquals(that: v3) {\r\n\t\treturn this.a[0] === that.a[0] && this.a[1] === that.a[1] && this.a[2] === that.a[2]\r\n\t}\r\n\tequals(that: v3) {\r\n\t\tconst ax = this.a[0], ay = this.a[1], az = this.a[2]\r\n\t\tconst bx = that.a[0], by = that.a[1], bz = that.a[2]\r\n\t\treturn (Math.abs(ax - bx) <= EPSILON * Math.max(1.0, Math.abs(ax), Math.abs(bx)) &&\r\n\t\t\tMath.abs(ay - by) <= EPSILON * Math.max(1.0, Math.abs(ay), Math.abs(by)) &&\r\n\t\t\tMath.abs(az - bz) <= EPSILON * Math.max(1.0, Math.abs(az), Math.abs(bz)))\r\n\t}\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/common/v3.ts","export default class Pool<T> {\r\n\r\n\titems: Array<T>\r\n\r\n\tconstructor(private createCallback: () => T, private releaseCallback?: (T: T) => void) {\r\n\t\tthis.items = []\r\n\t}\r\n\tacquire(): T {\r\n\t\tif (this.items.length) {\r\n\t\t\treturn this.items.pop()\r\n\t\t}\r\n\t\treturn this.createCallback()\r\n\t}\r\n\trelease(item: T): void {\r\n\t\tif (this.releaseCallback) {\r\n\t\t\tthis.releaseCallback(item)\r\n\t\t}\r\n\t\tthis.items.push(item)\r\n\t}\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/common/Pool.ts","import * as geometrics from \"geometrics\"\r\n\r\nconst Sides = geometrics.Sides\r\n\r\nclass BlockType {\r\n\r\n\tid: number\r\n\tname: string\r\n\ttextureSides: Array<Array<number>>\r\n\r\n\tconstructor(id: number, name: string, tileIndex: number) {\r\n\t\tthis.id = id\r\n\t\tthis.name = name\r\n\t\tthis.textureSides = []\r\n\t\tSides.each(side => {\r\n\t\t\tthis.textureSides[side.id] = this.makeTextureSide(tileIndex)\r\n\t\t})\r\n\t}\r\n\tsetSideTile(side: geometrics.SideType, tileIndex: number) {\r\n\t\tthis.textureSides[side.id] = this.makeTextureSide(tileIndex)\r\n\t\treturn this\r\n\t}\r\n\tmakeTextureSide(tileIndex: number) {\r\n\t\tvar tu = tileIndex % 16\r\n\t\tvar tv = Math.floor(tileIndex / 16)\r\n\t\treturn [ tu, tv ]\r\n\t}\r\n}\r\n\r\ninterface BlockTypesType {\r\n\tbyId: Array<BlockType>,\r\n\tbyName: { [key: string]: BlockType },\r\n}\r\n\r\nconst BlockTypes: BlockTypesType = {\r\n\tbyId: [],\r\n\tbyName: {},\r\n}\r\nexport default BlockTypes\r\n\r\nfunction addBlockType(name: string, tileIndex: number) {\r\n\tvar id = BlockTypes.byId.length\r\n\tvar blockType = new BlockType(id, name, tileIndex)\r\n\tBlockTypes.byId[id] = blockType\r\n\tBlockTypes.byName[name] = blockType\r\n\treturn blockType\r\n}\r\n\r\naddBlockType(\"air\", 0)\r\naddBlockType(\"stone\", 1)\r\naddBlockType(\"dirt\", 2)\r\naddBlockType(\"grass\", 3).setSideTile(Sides.byName.TOP, 0).setSideTile(Sides.byName.BOTTOM, 2)\r\naddBlockType(\"planks\", 4)\r\naddBlockType(\"brick\", 7)\r\naddBlockType(\"cobble\", 16)\r\naddBlockType(\"bedrock\", 17)\r\naddBlockType(\"sand\", 18)\r\naddBlockType(\"gravel\", 19)\r\naddBlockType(\"wood\", 20).setSideTile(Sides.byName.TOP, 21).setSideTile(Sides.byName.BOTTOM, 21)\r\naddBlockType(\"gold_ore\", 32)\r\naddBlockType(\"iron_ore\", 33)\r\naddBlockType(\"coal_ore\", 34)\r\naddBlockType(\"mossy_cobble\", 36)\r\naddBlockType(\"obsidian\", 37)\r\naddBlockType(\"diamond_ore\", 50)\r\naddBlockType(\"redstone_ore\", 51)\r\naddBlockType(\"stone_brick\", 54)\r\naddBlockType(\"snow\", 66)\r\naddBlockType(\"ice\", 67)\r\naddBlockType(\"snowy_grass\", 68).setSideTile(Sides.byName.TOP, 66).setSideTile(Sides.byName.BOTTOM, 2)\r\naddBlockType(\"fungus\", 77).setSideTile(Sides.byName.TOP, 78).setSideTile(Sides.byName.BOTTOM, 2)\r\naddBlockType(\"mossy_stone_brick\", 100)\r\naddBlockType(\"cracked_stone_brick\", 101)\r\naddBlockType(\"sandstone\", 192).setSideTile(Sides.byName.TOP, 176).setSideTile(Sides.byName.BOTTOM, 176)\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/common/BlockTypes.ts","import * as geometrics from \"geometrics\"\r\nimport Pool from \"Pool\"\r\n\r\nfunction createPool(): Pool<geometrics.VertexArrayType> {\r\n\treturn new Pool(() => {\r\n\t\treturn new Uint32Array(geometrics.maxQuadsPerMesh * geometrics.quadVertexByteSize)\r\n\t})\r\n}\r\n\r\nexport default {\r\n\tmainPool: createPool(),\r\n\tacquire(): geometrics.VertexArrayType {\r\n\t\treturn this.mainPool.acquire()\r\n\t},\r\n\trelease(vertexArray: geometrics.VertexArrayType) {\r\n\t\tthis.mainPool.release(vertexArray)\r\n\t},\r\n\tcreatePrefilledPool(existingItems: Array<geometrics.VertexArrayType>): Pool<geometrics.VertexArrayType> {\r\n\t\tconst pool = createPool()\r\n\t\tpool.items = existingItems\r\n\t\treturn pool\r\n\t},\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/client/engine/chunk/EngineChunkVertexArrayPool.ts","import * as geometrics from \"geometrics\"\r\nimport Pool from \"Pool\"\r\nimport v3 from \"v3\"\r\n\r\nexport default class ChunkData {\r\n\r\n\tpos: v3\r\n\tid: string\r\n\tblocks: Uint8Array\r\n\tchunkLoaderTag: number\r\n\tchunkLoaderUnloading: boolean\r\n\r\n\tconstructor() {\r\n\t\tthis.pos = new v3()\r\n\t\tthis.id = \"NaN,NaN,NaN\"\r\n\t\tthis.blocks = new Uint8Array(geometrics.CHUNK_SIZE_CUBED)\r\n\t}\r\n\tsetChunkPos(chunkPos: v3) {\r\n\t\tthis.pos.setFrom(chunkPos)\r\n\t\tthis.id = chunkPos.toString()\r\n\t}\r\n\r\n\tstatic pool: Pool<ChunkData> = new Pool(() => {\r\n\t\treturn new ChunkData()\r\n\t})\r\n}\r\n\r\n//export const pool = new Pool(() => new ChunkData(), () => {})\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/client/ChunkData.ts","import DebugFrameLogger from \"../DebugFrameLogger\"\r\n\r\n\r\n/*\r\n\tUSAGE\r\n\t=====\r\n\r\n\t// main script\r\n\r\n\tconst taskId = WorkerManager.queueTask(\r\n\t\t\"taskType1\",\r\n\t\t() => { // onStart\r\n\t\t\tconst payload: WorkerPayload = { \"foo\": \"bar\", \"array\": myUInt8Array }\r\n\t\t\tconst transferableObjects: Array<any> = [ myUInt8Array ]\r\n\t\t\treturn { payload, transferableObjects }\r\n\t\t},\r\n\t\t(payload: WorkerPayload) => {\r\n\t\t\tconsole.log(payload)\r\n\t\t}\r\n\t)\r\n\r\n\t// worker script\r\n\r\n\tWorkerObligation({\r\n\t\t\"taskType1\": (requestPayload, responseCallback) => {\r\n\t\t\tconst responsePayload: WorkerPayload = { \"foo\": \"bar\", \"array\": myUInt8Array }\r\n\t\t\tconst transferableObjects: Array<any> = [ myUInt8Array ]\r\n\t\t\tresponseCallback(responsePayload, transferableObjects)\r\n\t\t},\r\n\t\t\"taskType1.cancel\": () => {}, // unimplemented\r\n\t})\r\n\r\n*/\r\n\r\nexport type WorkerPayload = { taskId?: number, taskType?: string, [key: string]: any }\r\nexport type WorkerOnStart = () => { requestPayload: WorkerPayload, transferableObjects: Array<any> } | undefined\r\nexport type WorkerOnComplete = (responsePayload: WorkerPayload) => void\r\n\r\nexport class WorkerController {\r\n\r\n\tactiveTaskId: number\r\n\tactiveTaskType: string\r\n\tonResponse: WorkerOnComplete\r\n\r\n\tconstructor(public worker: Worker, public workerId: number) {\r\n\t\tthis.worker.addEventListener('message', (e: MessageEvent) => {\r\n\t\t\tconst responsePayload: WorkerPayload = e.data\r\n\t\t\tif (responsePayload.taskId !== this.activeTaskId) { return } // old job? ignore response\r\n\t\t\tif (!this.onResponse) { return } // already called onResponse once? ignore response\r\n\r\n\t\t\t// clear this.onResponse before calling it, since it may start this worker again\r\n\t\t\tconst onResponse = this.onResponse\r\n\t\t\tthis.onResponse = undefined\r\n\t\t\tonResponse(responsePayload)\r\n\t\t})\r\n\t}\r\n\tstart(taskId: number, taskType: string, requestPayload: WorkerPayload, transferableObjects: Array<any>, onResponse: WorkerOnComplete) {\r\n\t\tthis.onResponse = onResponse\r\n\t\tthis.activeTaskId = taskId\r\n\t\tthis.activeTaskType = taskType\r\n\t\trequestPayload.taskId = taskId\r\n\t\trequestPayload.taskType = taskType\r\n\t\tthis.worker.postMessage(requestPayload, transferableObjects) // transfer with \"Transferable Objects\"\r\n\t}\r\n\tcancel() {\r\n\t\t// this may safely be ignored by the worker\r\n\t\tthis.worker.postMessage({ cancelTask: this.activeTaskId })\r\n\t}\r\n}\r\n\r\n\r\n\r\n// WorkerManager\r\n// =============\r\n\r\ntype Task = {\r\n\ttaskId: number,\r\n\ttaskType: string,\r\n\tassignedWorkerId?: number,\r\n\tcancelled?: boolean,\r\n\tonStart: WorkerOnStart,\r\n\tonComplete: WorkerOnComplete,\r\n\tonCancelled: WorkerOnComplete,\r\n}\r\n\r\nlet taskIdCounter: number = 0\r\nconst activeTasksByWorkerId: { [key: number]: Task } = {}\r\nlet workerControllers: Array<WorkerController> = []\r\nconst inactiveWorkerControllers: Array<WorkerController> = []\r\nconst queuedTasks: Array<Task> = []\r\n\r\n// initialize workers\r\nexport function init(workerControllers_: Array<WorkerController>) {\r\n\tworkerControllers = workerControllers_\r\n\tworkerControllers.forEach(workerController => {\r\n\t\tinactiveWorkerControllers.push(workerController)\r\n\t})\r\n}\r\n\r\nexport function queueTask(taskType: string, onStart: WorkerOnStart, onComplete: WorkerOnComplete, onCancelled: WorkerOnComplete) {\r\n\ttaskIdCounter += 1\r\n\tconst taskId = taskIdCounter // unique taskId\r\n\tconst task: Task = { taskId, taskType, onStart, onComplete, onCancelled }\r\n\tqueuedTasks.push(task)\r\n\tprocessQueue()\r\n\treturn taskId\r\n}\r\n\r\nfunction processQueue() {\r\n\twhile (inactiveWorkerControllers.length > 0 && queuedTasks.length > 0) {\r\n\t\tconst task = queuedTasks.shift()\r\n\t\tconst worker = inactiveWorkerControllers.pop()\r\n\t\ttask.assignedWorkerId = worker.workerId\r\n\t\tstartWorker(worker, task)\r\n\t}\r\n}\r\n\r\nfunction startWorker(worker: WorkerController, task: Task) {\r\n\t//DebugFrameLogger(\"WorkerManager.startWorker\")\r\n\r\n\tconst startResponse = task.onStart()\r\n\tif (!startResponse) { return } // task was cancelled by onStart\r\n\tconst { requestPayload, transferableObjects } = startResponse\r\n\r\n\tactiveTasksByWorkerId[task.taskId] = task\r\n\r\n\tworker.start(task.taskId, task.taskType, requestPayload, transferableObjects, (responsePayload: WorkerPayload) => {\r\n\t\t//DebugFrameLogger(\"WorkerManager worker response\")\r\n\t\tdelete activeTasksByWorkerId[task.taskId]\r\n\t\tinactiveWorkerControllers.push(worker)\r\n\t\tprocessQueue() // now that this worker's free, assign another task to it if one is available!\r\n\t\tif (task.cancelled) {\r\n\t\t\ttask.onCancelled(responsePayload)\r\n\t\t}\r\n\t\telse {\r\n\t\t\ttask.onComplete(responsePayload)\r\n\t\t}\r\n\t})\r\n}\r\n\r\nexport function cancelTask(taskId: number): boolean {\r\n\t// if the task is still in the queue, simply remove it (we never called onStart, so according to our contract, we don't need to call onComplete)\r\n\t// aka: const taskFromQueue = _.remove(queuedTasks, (task: Task) => task.taskId === taskId)\r\n\tlet taskFromQueue\r\n\tfor (let i = 0; i < queuedTasks.length; i += 1) {\r\n\t\tlet task = queuedTasks[i]\r\n\t\tif (task.taskId === taskId) {\r\n\t\t\ttaskFromQueue = task\r\n\t\t\tqueuedTasks.splice(i, 1)\r\n\t\t\tbreak\r\n\t\t}\r\n\t}\r\n\tif (taskFromQueue) {\r\n\t\treturn true\r\n\t}\r\n\t// otherwise, we need to stop an active worker...\r\n\tconst task = activeTasksByWorkerId[taskId]\r\n\tif (task) {\r\n\t\tconst workerController: WorkerController = workerControllers[task.assignedWorkerId]\r\n\t\tworkerController.cancel() // fire off the cancel message and continue waiting for a reply... (since we don't want to overload a worker that's still working)\r\n\t\ttask.cancelled = true // we will ignore the reply\r\n\t}\r\n\telse {\r\n\t\tdebugger\r\n\t}\r\n\treturn false\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/client/worker/WorkerManager.ts","import * as geometrics from \"geometrics\"\r\nimport BlockTypes from \"BlockTypes\"\r\nimport BlockPos from \"BlockPos\"\r\nimport * as EngineChunkQuadWriter from \"./EngineChunkQuadWriter\"\r\nimport EngineChunkVertexArrayPool from \"./EngineChunkVertexArrayPool\"\r\nimport v3 from \"v3\"\r\nimport Pool from \"Pool\"\r\nimport EngineChunk from \"client/engine/chunk/EngineChunk\";\r\n\r\n\r\nconst occludedBrightnesses = [1, 0.7, 0.7, 0.6, 0.5, 0.5]\r\n//const occludedBrightnesses = [1, 0.5, 0.5, 0.2, 0.1, 0.1] // HIGH CONTRAST MODE\r\n\r\nconst edgeOccludingBlockPos = new BlockPos(undefined, new v3(0, 0, 0))\t // optimization: keep these around for repeated calls to calculateVertexColours\r\nconst cornerOccludingBlockPos = new BlockPos(undefined, new v3(0, 0, 0))\t // optimization: keep these around for repeated calls to calculateVertexColours\r\n\r\nfunction calculateVertexColours(airBlockPos: BlockPos, side: geometrics.SideType) {\r\n\r\n\t// determine ambient occlusion\r\n\tconst brightnesses = [0, 0, 0, 0]\r\n\r\n\t// check for occlusion at right angles to the block's normal\r\n\tfor (let tangentIndex = 0; tangentIndex < 4; tangentIndex += 1) {\r\n\t\tconst tangentSide = side.tangents[tangentIndex].side\r\n\r\n\t\tedgeOccludingBlockPos.setAdjacentToBlockPos(airBlockPos, tangentSide)\r\n\t\tif (!edgeOccludingBlockPos.blockDataSource) { continue }\r\n\r\n\t\tif (!edgeOccludingBlockPos.isTransparent()) {\r\n\t\t\tbrightnesses[tangentIndex] += 2\r\n\t\t\tbrightnesses[(tangentIndex + 1) % 4] += 2\r\n\t\t}\r\n\r\n\t\t// right angle again to find the diagonal\r\n\t\t// n.b. anisotropy warning: it's possible that the edge occluding block is unloaded, but the diagonal is loaded, and we are only turning right!\r\n\t\tconst diagonalTangentSide = side.tangents[(tangentIndex + 1) % 4].side\r\n\r\n\t\tcornerOccludingBlockPos.setAdjacentToBlockPos(edgeOccludingBlockPos, diagonalTangentSide)\r\n\t\tif (!cornerOccludingBlockPos.blockDataSource) { continue }\r\n\r\n\t\tif (!cornerOccludingBlockPos.isTransparent()) {\r\n\t\t\tbrightnesses[(tangentIndex + 1) % 4] += 1\r\n\t\t}\r\n\t}\r\n\r\n\tfor (let i = 0; i < 4; i += 1) {\r\n\t\tbrightnesses[i] = occludedBrightnesses[brightnesses[i]]\r\n\t}\r\n\r\n\treturn brightnesses\r\n}\r\n\r\n\r\n\r\nclass ChunkPrewriter {\r\n\r\n\tquadCount: number\r\n\tvertexArrays: Array<geometrics.VertexArrayType>\r\n\tcurrentVertexArray: geometrics.VertexArrayType\r\n\r\n\tconstructor(private blockData: Uint8Array, private quadIdsByBlockAndSide: Uint16Array, private vertexArrayPool: Pool<geometrics.VertexArrayType>) {\r\n\t\tthis.quadCount = 0\r\n\t\tthis.vertexArrays = []\r\n\t\tthis.currentVertexArray = undefined\r\n\t}\r\n\taddVertexArray() {\r\n\t\tvar vertexArray: geometrics.VertexArrayType = new Uint32Array(this.vertexArrayPool.acquire())\r\n\t\tthis.vertexArrays.push(vertexArray)\r\n\t\treturn vertexArray\r\n\t}\r\n\taddQuad(blockPos: BlockPos, side: geometrics.SideType, uvs: Array<number>, brightnesses: Array<number>) {\r\n\t\tvar quadId = this.quadCount\r\n\t\tthis.quadCount += 1\r\n\t\tif (this.quadCount > this.vertexArrays.length * geometrics.maxQuadsPerMesh) {\r\n\t\t\tthis.currentVertexArray = this.addVertexArray()\r\n\t\t}\r\n\t\tEngineChunkQuadWriter.drawQuad(this.currentVertexArray, quadId % geometrics.maxQuadsPerMesh, blockPos, side, uvs, brightnesses)\r\n\t\tthis.quadIdsByBlockAndSide[blockPos.i * 6 + side.id] = quadId + 1 // add one so we can use 0 as an indicator that no quad was written\r\n\t}\r\n\r\n\r\n\tdrawInternalChunkQuads() {\r\n\t\tvar solidBlockPos = new BlockPos(undefined, new v3(0, 0, 0), this.blockData)\r\n\t\tvar airBlockPos = new BlockPos(undefined, new v3(0, 0, 0), this.blockData)\r\n\r\n\t\tsolidBlockPos.eachBlockInChunk(() => {\r\n\t\t\t\r\n\t\t\tif (!solidBlockPos.isTransparent()) {\r\n\r\n\t\t\t\tgeometrics.Sides.each(side => {\r\n\r\n\t\t\t\t\tairBlockPos.setAdjacentToBlockPos(solidBlockPos, side)\r\n\r\n\t\t\t\t\tif (airBlockPos.blockDataSource) { // still within the same chunk\r\n\r\n\t\t\t\t\t\tvar adjacentIsTransparent = airBlockPos.isTransparent()\r\n\t\t\t\t\t\tif (adjacentIsTransparent) {\r\n\r\n\t\t\t\t\t\t\tvar blockType = BlockTypes.byId[this.blockData[solidBlockPos.i]]\r\n\t\t\t\t\t\t\tvar uvs = blockType.textureSides[side.id]\r\n\r\n\t\t\t\t\t\t\t// determine vertex colours (AO)\r\n\t\t\t\t\t\t\tvar brightnesses = calculateVertexColours(airBlockPos, side)\r\n\r\n\t\t\t\t\t\t\tthis.addQuad(solidBlockPos, side, uvs, brightnesses)\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n\r\n}\r\n\r\nexport default {\r\n\tdrawInternalChunkQuads(\r\n\t\tblockData: Uint8Array,\r\n\t\tquadIdsByBlockAndSide: Uint16Array,\r\n\t\treusableVertexArrays: Array<geometrics.VertexArrayType> = []\r\n\t): {\r\n\t\tquadCount: number,\r\n\t\tvertexArrays: Array<geometrics.VertexArrayType>,\r\n\t\tunusedVertexArrays: Array<geometrics.VertexArrayType>,\r\n\t} {\r\n\r\n\t\tconst vertexArrayPool = EngineChunkVertexArrayPool.createPrefilledPool(reusableVertexArrays)\r\n\r\n\t\tconst prewriter = new ChunkPrewriter(blockData, quadIdsByBlockAndSide, vertexArrayPool)\r\n\t\tprewriter.drawInternalChunkQuads()\r\n\t\tconst quadCount = prewriter.quadCount\r\n\t\tconst vertexArrays = prewriter.vertexArrays\r\n\t\tconst unusedVertexArrays = vertexArrayPool.items\r\n\r\n\t\treturn { quadCount, vertexArrays, unusedVertexArrays }\r\n\t},\r\n\r\n\tunstitchChunk(chunk: EngineChunk, side: geometrics.SideType) {\r\n\t\tconst blockPos = new BlockPos()\r\n\t\tblockPos.eachBlockOnFace(chunk, side, () => {\r\n\t\t\tchunk.removeQuad(blockPos, side)\r\n\t\t})\r\n\t},\r\n\r\n\tstitchChunks(newCenterChunk: EngineChunk) {\r\n\t\t// requirements:\r\n\t\t//   - add quads on both sides of the 6 adjacent \"face\" neighbour chunks, if required (i.e. solid and air boundary)\r\n\t\t//   - update AO on both sides of the 6 adjacent \"face\" neighbour chunks, for faces which are perpendicular\r\n\t\t//   (adjacent to the 6 adjacent \"face\" neighbour chunks are the 12 \"edge\" chunks, which share an edge with the center chunk)\r\n\t\t//   - update AO for the \"edge\" chunks for all blocks along the edge which face toward the center chunk on either axis\r\n\t\t//   (adjacent to the 12 \"edge\" chunks are 8 \"corner\" chunks, which share a corner with the center chunk)\r\n\t\t//   - update AO for the \"corner\" chunks's single corner blocks, which face toward the center chunk on any axis\r\n\t\t//   (e.g. consider the grass block at (0, 31, 0) : the air block above it is in chunk (0,1,0), but AO also depends on blocks in chunks (-1,1,0), (0,1,-1) AND (-1,1,-1))\r\n\t\t\r\n\t\t// the following strategy explores all adjacent chunks once in a 3x3x3 cube, but is anisotropic:\r\n\t\t//   - first, xyz explores a \"tie fighter\" shape\r\n\t\t//   - next, yz adds an \"I beam\", leaving an \"upright bagel with cream cheese\" shape\r\n\t\t//   - finally, z fills in the last two spots\r\n\t\t// as more chunks get filled in, these anisotropic AO errors should disappear; with the camera far away from the edges of the loading chunks, this should not affect the player\r\n\r\n\t\tconst aoAirBlockPos = new BlockPos(undefined, new v3(0, 0, 0))\t // optimization\r\n\t\t\r\n\t\tfunction fixAO(solidBlockPos: BlockPos, side: geometrics.SideType) {\r\n\t\t\tconst quadId = solidBlockPos.getQuadId(side)\r\n\t\t\tif (quadId >= 0) {\r\n\t\t\t\tconst blockTypeId = solidBlockPos.getBlockData()\r\n\t\t\t\tconst blockType = BlockTypes.byId[blockTypeId]\r\n\t\t\t\tconst uvs = blockType.textureSides[side.id]\r\n\t\t\t\taoAirBlockPos.setAdjacentToBlockPos(solidBlockPos, side)\r\n\t\t\t\tconst brightnesses = calculateVertexColours(aoAirBlockPos, side)\r\n\t\t\t\tsolidBlockPos.engineChunk.updateQuadAO(solidBlockPos, side, uvs, brightnesses)\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfunction addFace(solidBlockPos: BlockPos, airBlockPos: BlockPos, side: geometrics.SideType) {\r\n\t\t\t//console.log(`addFace for ${solidBlockPos.toString()} (${solidBlockPos.engineChunk.chunkData.pos.toString()}) facing ${side.name}: i.e. ${airBlockPos.toString()} (${airBlockPos.engineChunk.chunkData.pos.toString()})`)\r\n\t\t\tconst blockTypeId = solidBlockPos.getBlockData()\r\n\t\t\tconst blockType = BlockTypes.byId[blockTypeId]\r\n\t\t\tconst uvs = blockType.textureSides[side.id]\r\n\t\t\tconst brightnesses = calculateVertexColours(airBlockPos, side)\r\n\t\t\tsolidBlockPos.engineChunk.addQuad(solidBlockPos, side, uvs, brightnesses)\r\n\t\t}\r\n\t\t\r\n\t\tconst nearBlockPos = new BlockPos()\r\n\t\tconst farBlockPos = new BlockPos()\r\n\r\n\t\t// for each face...\r\n\t\tfor (let axis1 = 0; axis1 < 3; axis1 += 1) {\r\n\t\t\tfor (let sideIndex1 = 0; sideIndex1 < 2; sideIndex1 += 1) {\r\n\t\t\t\tconst side1 = geometrics.Sides.byAxis[axis1][sideIndex1]\r\n\t\t\t\tconst faceNeighbourChunk = newCenterChunk.neighboursBySideId[side1.id]\r\n\t\t\t\tif (faceNeighbourChunk) {\r\n\r\n\t\t\t\t\t//console.log(`stitching ${newCenterChunk.id} on ${side1.name} to ${faceNeighbourChunk.id}`)\r\n\r\n\t\t\t\t\t// add quads and update perpendicular AO\r\n\t\t\t\t\tnearBlockPos.eachBlockOnFace(newCenterChunk, side1, () => {\r\n\t\t\t\t\t\tfarBlockPos.setAdjacentToBlockPos(nearBlockPos, side1)\r\n\r\n\t\t\t\t\t\t// add quads\r\n\t\t\t\t\t\tconst nearIsTransparent = nearBlockPos.isTransparent()\r\n\t\t\t\t\t\tconst farIsTransparent = farBlockPos.isTransparent()\r\n\t\t\t\t\t\tif (!nearIsTransparent && farIsTransparent) {\r\n\t\t\t\t\t\t\t// add quad at nearBlockPos facing side1\r\n\t\t\t\t\t\t\taddFace(nearBlockPos, farBlockPos, side1)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if (!farIsTransparent && nearIsTransparent) {\r\n\t\t\t\t\t\t\t// add quad at farBlockPos facing side1.opposite\r\n\t\t\t\t\t\t\taddFace(farBlockPos, nearBlockPos, side1.opposite) // problem?\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// update AO\r\n\t\t\t\t\t\tfor (let i = 0; i < side1.tangents.length; i += 1) {\r\n\t\t\t\t\t\t\tconst tangentSide = side1.tangents[i].side\r\n\t\t\t\t\t\t\tfixAO(nearBlockPos, tangentSide)\r\n\t\t\t\t\t\t\tfixAO(farBlockPos, tangentSide)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\r\n\t\t\t\t\t// for each edge...\r\n\t\t\t\t\tfor (let axis2 = axis1 + 1; axis2 < 3; axis2 += 1) {\r\n\t\t\t\t\t\tfor (let sideIndex2 = 0; sideIndex2 < 2; sideIndex2 += 1) {\r\n\t\t\t\t\t\t\tconst side2 = geometrics.Sides.byAxis[axis2][sideIndex2]\r\n\t\t\t\t\t\t\tconst edgeNeighbourChunk = faceNeighbourChunk.neighboursBySideId[side2.id]\r\n\t\t\t\t\t\t\tif (edgeNeighbourChunk) {\r\n\r\n\t\t\t\t\t\t\t\t// update AO of blocks along edge of edgeNeighbourChunk\r\n\t\t\t\t\t\t\t\tfarBlockPos.eachBlockOnEdge(edgeNeighbourChunk, side1, side2, () => {\r\n\t\t\t\t\t\t\t\t\tfixAO(farBlockPos, side1.opposite)\r\n\t\t\t\t\t\t\t\t\tfixAO(farBlockPos, side2.opposite)\r\n\t\t\t\t\t\t\t\t\tconst tangentAxis = 3 - side1.axis - side2.axis\r\n\t\t\t\t\t\t\t\t\tfixAO(farBlockPos, geometrics.Sides.byAxis[tangentAxis][0])\r\n\t\t\t\t\t\t\t\t\tfixAO(farBlockPos, geometrics.Sides.byAxis[tangentAxis][1])\r\n\t\t\t\t\t\t\t\t})\r\n\r\n\t\t\t\t\t\t\t\t// for each corner...\r\n\t\t\t\t\t\t\t\tif (axis2 !== 2) {\r\n\t\t\t\t\t\t\t\t\tconst axis3 = 2 // the only remaining axis\r\n\t\t\t\t\t\t\t\t\tfor (let sideIndex3 = 0; sideIndex3 < 2; sideIndex3 += 1) {\r\n\t\t\t\t\t\t\t\t\t\tconst side3 = geometrics.Sides.byAxis[axis3][sideIndex3]\r\n\t\t\t\t\t\t\t\t\t\tconst cornerNeighbourChunk = edgeNeighbourChunk.neighboursBySideId[side3.id]\r\n\t\t\t\t\t\t\t\t\t\tif (cornerNeighbourChunk) {\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t// update AO of single block at corner of cornerNeighbourChunk\r\n\t\t\t\t\t\t\t\t\t\t\tfarBlockPos.setBlockOnCorner(cornerNeighbourChunk, side1, side2, side3)\r\n\t\t\t\t\t\t\t\t\t\t\tfixAO(farBlockPos, side1.opposite)\r\n\t\t\t\t\t\t\t\t\t\t\tfixAO(farBlockPos, side2.opposite)\r\n\t\t\t\t\t\t\t\t\t\t\tfixAO(farBlockPos, side3.opposite)\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/client/engine/chunk/EngineChunkBuilder.ts","import * as WorkerObligation from \"./worker/WorkerObligation\"\r\nimport TaskDrawInternalVerts from \"./worker/TaskDrawInternalVerts\"\r\nimport TaskGenerateAndMeshChunk from \"./worker/TaskGenerateAndMeshChunk\"\r\n\r\n//importScripts('https://unpkg.com/lodash@4.17.4/lodash.js')\r\n\r\nWorkerObligation.registerTaskHandlers([\r\n\tTaskDrawInternalVerts,\r\n\tTaskGenerateAndMeshChunk,\r\n])\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/client/worker.ts","export type WorkerPayload = { taskId?: number, taskType?: string, [key: string]: any }\r\nexport type ResponseCallback = (responsePayload: WorkerPayload, transferableObjects: Array<any>) => void\r\nexport interface TaskHandler { id: string, work: (requestPayload: WorkerPayload, responseCallback: ResponseCallback) => void }\r\n\r\nexport function registerTaskHandlers(taskHandlersArray: Array<TaskHandler>) {\r\n\tconst ctx: Worker = self as any\r\n\tlet activeTaskId: number\r\n\tlet activeTaskType: string\r\n\r\n\tconst taskHandlersByType: { [key: string]: TaskHandler } = {}\r\n\ttaskHandlersArray.forEach(taskHandler => { taskHandlersByType[taskHandler.id] = taskHandler })\r\n\r\n\tctx.addEventListener(\"message\", (event) => {\r\n\t\tconst requestPayload: WorkerPayload = event.data\r\n\r\n\t\tif (requestPayload.cancelTask) {\r\n\t\t\t//console.log(\"worker task cancelled (but unable to stop non-incremental task)\")\r\n\t\t}\r\n\t\telse if (activeTaskId) {\r\n\t\t\tconsole.error(`Worker was messaged to start a new task before finishing the previous task!?`)\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// start a new task!\r\n\t\t\tactiveTaskId = requestPayload.taskId\r\n\t\t\tactiveTaskType = requestPayload.taskType\r\n\r\n\t\t\tconst taskHandler = taskHandlersByType[activeTaskType]\r\n\t\t\ttaskHandler.work(requestPayload, (responsePayload, transferableObjects) => {\r\n\t\t\t\tresponsePayload.taskId = activeTaskId\r\n\t\t\t\tactiveTaskId = undefined\r\n\t\t\t\tactiveTaskType = undefined\r\n\t\t\t\tctx.postMessage(responsePayload, transferableObjects)\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t})\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/client/worker/WorkerObligation.ts","import ChunkData from \"../ChunkData\"\r\nimport * as WorkerManager from \"./WorkerManager\"\r\nimport * as WorkerObligation from \"./WorkerObligation\"\r\nimport * as geometrics from \"geometrics\"\r\nimport v3 from \"v3\"\r\nimport EngineChunkBuilder from \"../engine/chunk/EngineChunkBuilder\"\r\nimport EngineChunkVertexArrayPool from \"../engine/chunk/EngineChunkVertexArrayPool\"\r\nimport Pool from \"Pool\"\r\n\r\nconst TASK_TYPE_ID = \"TaskDrawInternalVerts\"\r\n\r\nexport default {\r\n\tid: TASK_TYPE_ID,\r\n\tcancel(taskId: number) {\r\n\t\tWorkerManager.cancelTask(taskId)\r\n\t},\r\n\tqueue(\r\n\t\tchunkData: ChunkData,\r\n\t\tquadIdsByBlockAndSidePool: Pool<Uint16Array>,\r\n\t\tonComplete: (quadCount: number, vertexArrays: Array<geometrics.VertexArrayType>, quadIdsByBlockAndSide: Uint16Array) => void\r\n\t) {\r\n\t\tconst taskId = WorkerManager.queueTask(\r\n\t\t\tTASK_TYPE_ID,\r\n\t\t\t() => {\r\n\r\n\t\t\t\tconst quadIdsByBlockAndSide = quadIdsByBlockAndSidePool.acquire()\r\n\t\t\t\tconst initialVertexArrays = [ EngineChunkVertexArrayPool.acquire() ]\r\n\r\n\t\t\t\tconst requestPayload = {\r\n\t\t\t\t\tblockData: chunkData.blocks.buffer,\r\n\t\t\t\t\tquadIdsByBlockAndSide: quadIdsByBlockAndSide.buffer,\r\n\t\t\t\t\tinitialVertexArrays: initialVertexArrays.map(a => a.buffer),\r\n\t\t\t\t}\r\n\t\t\t\tconst transferableObjects = [\r\n\t\t\t\t\tchunkData.blocks.buffer,\r\n\t\t\t\t\tquadIdsByBlockAndSide.buffer,\r\n\t\t\t\t\t...(initialVertexArrays.map(a => a.buffer))\r\n\t\t\t\t]\r\n\t\t\t\treturn { requestPayload, transferableObjects }\r\n\t\t\t},\r\n\t\t\t(completePayload: WorkerManager.WorkerPayload) => {\r\n\r\n\t\t\t\tchunkData.blocks = new Uint8Array(completePayload.blockData)\r\n\r\n\t\t\t\tconst unusedVertexArrays = completePayload.unusedVertexArrays.map(buffer => new Uint32Array(buffer))\r\n\t\t\t\tunusedVertexArrays.forEach(vertexArray => {\r\n\t\t\t\t\tEngineChunkVertexArrayPool.release(vertexArray)\r\n\t\t\t\t})\r\n\r\n\t\t\t\tonComplete(\r\n\t\t\t\t\t<number>completePayload.quadCount,\r\n\t\t\t\t\tcompletePayload.vertexArrays.map(buffer => new Uint32Array(buffer)),\r\n\t\t\t\t\tnew Uint16Array(completePayload.quadIdsByBlockAndSide)\r\n\t\t\t\t)\r\n\r\n\t\t\t},\r\n\t\t\t(cancelledPayload: WorkerManager.WorkerPayload) => {\r\n\t\t\t\tchunkData.blocks = new Uint8Array(cancelledPayload.blockData)\r\n\t\t\t\tChunkData.pool.release(chunkData) // the only reason this task is cancelled is if we're unloading the chunk\r\n\r\n\t\t\t\tconst cancelledQuadIdsByBlockAndSide = new Uint16Array(cancelledPayload.quadIdsByBlockAndSide)\r\n\t\t\t\tconst unusedVertexArrays = cancelledPayload.unusedVertexArrays.map(buffer => new Uint32Array(buffer))\r\n\t\t\t\tunusedVertexArrays.forEach(vertexArray => {\r\n\t\t\t\t\tEngineChunkVertexArrayPool.release(vertexArray)\r\n\t\t\t\t})\r\n\t\t\t\tconst vertexArrays = cancelledPayload.vertexArrays.map(buffer => new Uint32Array(buffer))\r\n\t\t\t\tvertexArrays.forEach(vertexArray => {\r\n\t\t\t\t\tEngineChunkVertexArrayPool.release(vertexArray)\r\n\t\t\t\t})\r\n\t\t\t\tquadIdsByBlockAndSidePool.release(cancelledQuadIdsByBlockAndSide)\r\n\t\t\t}\r\n\t\t)\r\n\t\treturn taskId\r\n\t},\r\n\twork(requestPayload, responseCallback) {\r\n\t\t// get request\r\n\t\tconst blockData: Uint8Array = new Uint8Array(requestPayload.blockData)\r\n\t\tconst quadIdsByBlockAndSide: Uint16Array = new Uint16Array(requestPayload.quadIdsByBlockAndSide)\r\n\t\tconst initialVertexArrays: Array<geometrics.VertexArrayType> = requestPayload.initialVertexArrays.map(buffer => new Uint32Array(buffer))\r\n\r\n\t\t// process request\r\n\t\tquadIdsByBlockAndSide.fill(0)\r\n\t\tconst { quadCount, vertexArrays, unusedVertexArrays } = EngineChunkBuilder.drawInternalChunkQuads(blockData, quadIdsByBlockAndSide, initialVertexArrays)\r\n\r\n\t\t// respond\r\n\t\tconst responsePayload: WorkerObligation.WorkerPayload = {\r\n\t\t\tblockData: blockData.buffer,\r\n\t\t\tquadCount,\r\n\t\t\tvertexArrays: vertexArrays.map(arr => arr.buffer),\r\n\t\t\tquadIdsByBlockAndSide: quadIdsByBlockAndSide.buffer,\r\n\t\t\tunusedVertexArrays: unusedVertexArrays.map(arr => arr.buffer),\r\n\t\t}\r\n\t\tconst transferableObjects: Array<any> = [\r\n\t\t\tblockData.buffer,\r\n\t\t\tquadIdsByBlockAndSide.buffer,\r\n\t\t\t...(vertexArrays.map(arr => arr.buffer)),\r\n\t\t\t...(unusedVertexArrays.map(arr => arr.buffer)),\r\n\t\t]\r\n\t\tresponseCallback(responsePayload, transferableObjects)\r\n\t},\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/client/worker/TaskDrawInternalVerts.ts","import * as geometrics from \"geometrics\"\r\nimport v3 from \"v3\"\r\nimport BlockTypes from \"./BlockTypes\"\r\nimport EngineChunk from \"client/engine/chunk/EngineChunk\"\r\n\r\nexport default class BlockPos {\r\n\r\n\tengineChunk: EngineChunk\r\n\tpos: v3\r\n\tblockDataOverride: Uint8Array\r\n\ti: number\r\n\r\n\tconstructor(engineChunk?: EngineChunk, pos?: v3, blockDataOverride?: Uint8Array) {\r\n\t\tthis.engineChunk = engineChunk\r\n\t\tthis.pos = pos ? pos.clone() : new v3()\r\n\t\tthis.blockDataOverride = blockDataOverride\r\n\t\tthis.recalculateIndex()\r\n\t}\r\n\tclone() {\r\n\t\treturn new BlockPos(this.engineChunk, this.pos)\r\n\t}\r\n\trecalculateIndex() {\r\n\t\tconst a = this.pos.a\r\n\t\tthis.i = a[0] * geometrics.CHUNK_SIZE_SQUARED + a[2] * geometrics.CHUNK_SIZE + a[1]\r\n\t}\r\n\tget blockDataSource(): Uint8Array {\r\n\t\treturn this.engineChunk ? this.engineChunk.chunkData.blocks : this.blockDataOverride\r\n\t}\r\n\r\n\tgetQuadId(side: geometrics.SideType) {\r\n\t\treturn (this.engineChunk ? this.engineChunk.quadIdsByBlockAndSide[this.i * 6 + side.id] - 1 : -1)\r\n\t}\r\n\tgetWorldPoint(outV3: v3) {\r\n\t\toutV3.setFrom(this.engineChunk.worldPos).multiplyScalar(geometrics.CHUNK_SIZE).add(this.pos)\r\n\t}\r\n\tgetBlockData() {\r\n\t\tif (this.engineChunk) {\r\n\t\t\treturn this.engineChunk.chunkData.blocks[this.i]\r\n\t\t}\r\n\t\telse if (this.blockDataOverride) {\r\n\t\t\treturn this.blockDataOverride[this.i]\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn 0\r\n\t\t}\r\n\t}\r\n\tgetBlockType() {\r\n\t\treturn BlockTypes.byId[this.getBlockData()]\r\n\t}\r\n\tisOpaque() {\r\n\t\treturn this.getBlockData() !== 0\r\n\t}\r\n\tisTransparent() {\r\n\t\treturn this.getBlockData() === 0\r\n\t}\r\n\t//setBlockData(newBlockData) {\r\n\t//\tthis.chunk.alterOneBlock(this, newBlockData)\r\n\t//}\r\n\tsetAdjacentToBlockPos(refBlockPos: BlockPos, side: geometrics.SideType) {\r\n\t\tthis.pos.setFrom(refBlockPos.pos)\r\n\t\tthis.engineChunk = refBlockPos.engineChunk\r\n\t\tthis.blockDataOverride = refBlockPos.blockDataOverride\r\n\t\tlet newAxisPos = refBlockPos.pos.a[side.axis] + side.axisDelta\r\n\t\tlet newIndex = refBlockPos.i + side.deltaIndex\r\n\t\tif (newAxisPos < 0 || newAxisPos >= geometrics.CHUNK_SIZE) {\r\n\t\t\tif (this.engineChunk) {\r\n\t\t\t\tif (this.engineChunk.neighboursBySideId) {\r\n\t\t\t\t\tconst neighbourChunk = this.engineChunk.neighboursBySideId[side.id]\r\n\t\t\t\t\tthis.engineChunk = neighbourChunk\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.engineChunk = undefined\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.blockDataOverride = undefined\r\n\t\t\t}\r\n\t\t\tnewAxisPos += geometrics.CHUNK_SIZE * -side.axisDelta\r\n\t\t\tnewIndex += geometrics.CHUNK_SIZE * -side.deltaIndex\r\n\t\t}\r\n\t\tthis.pos.a[side.axis] = newAxisPos\r\n\t\tthis.i = newIndex\r\n\t}\r\n\t/*getAdjacentBlockPos(side) {\r\n\t\tvar neighbourChunk = this.chunk.neighboursBySideId[side.id]\r\n\t\tif (side === geometrics.Sides.TOP) {\r\n\t\t\tif (this.pos.a[1] === geometrics.CHUNK_SIZE - 1) {\r\n\t\t\t\treturn neighbourChunk ? new BlockPos( neighbourChunk, this.pos.a[0], 0, this.pos.a[2] ) : BlockPos.badPos\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (side === geometrics.Sides.BOTTOM) {\r\n\t\t\tif (this.pos.a[1] === 0) {\r\n\t\t\t\treturn neighbourChunk ? new BlockPos( neighbourChunk, this.pos.a[0], geometrics.CHUNK_SIZE - 1, this.pos.a[2] ) : BlockPos.badPos\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (side === geometrics.Sides.NORTH) {\r\n\t\t\tif (this.pos.a[2] === geometrics.CHUNK_SIZE - 1) {\r\n\t\t\t\treturn neighbourChunk ? new BlockPos( neighbourChunk, this.pos.a[0], this.pos.a[1], 0 ) : BlockPos.badPos\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (side === geometrics.Sides.SOUTH) {\r\n\t\t\tif (this.pos.a[2] === 0) {\r\n\t\t\t\treturn neighbourChunk ? new BlockPos( neighbourChunk, this.pos.a[0], this.pos.a[1], geometrics.CHUNK_SIZE - 1 ) : BlockPos.badPos\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (side === geometrics.Sides.EAST) {\r\n\t\t\tif (this.pos.a[0] === geometrics.CHUNK_SIZE - 1) {\r\n\t\t\t\treturn neighbourChunk ? new BlockPos( neighbourChunk, 0, this.pos.a[1], this.pos.a[2] ) : BlockPos.badPos\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (side === geometrics.Sides.WEST) {\r\n\t\t\tif (this.pos.a[0] === 0) {\r\n\t\t\t\treturn neighbourChunk ? new BlockPos( neighbourChunk, geometrics.CHUNK_SIZE - 1, this.pos.a[1], this.pos.a[2] ) : BlockPos.badPos\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn new BlockPos(this.chunk, this.pos.a[0] + side.dx, this.pos.a[1] + side.dy, this.pos.a[2] + side.dz)\r\n\t}*/\r\n\tadd(dx: number, dy: number, dz: number) {\r\n\t\tif (dy > 0) {\r\n\t\t\tthis.pos.a[1] += dy\r\n\t\t\twhile (this.pos.a[1] > geometrics.CHUNK_SIZE-1) {\r\n\t\t\t\tthis.engineChunk = this.engineChunk.neighboursBySideId[ geometrics.Sides.byName.TOP.id ]\r\n\t\t\t\tthis.pos.a[1] -= geometrics.CHUNK_SIZE\r\n\t\t\t\tif (!this.engineChunk) { return }\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (dy < 0) {\r\n\t\t\tthis.pos.a[1] += dy\r\n\t\t\twhile (this.pos.a[1] < 0) {\r\n\t\t\t\tthis.engineChunk = this.engineChunk.neighboursBySideId[ geometrics.Sides.byName.BOTTOM.id ]\r\n\t\t\t\tthis.pos.a[1] += geometrics.CHUNK_SIZE\r\n\t\t\t\tif (!this.engineChunk) { return }\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (dz > 0) {\r\n\t\t\tthis.pos.a[2] += dz\r\n\t\t\twhile (this.pos.a[2] > geometrics.CHUNK_SIZE-1) {\r\n\t\t\t\tthis.engineChunk = this.engineChunk.neighboursBySideId[ geometrics.Sides.byName.NORTH.id ]\r\n\t\t\t\tthis.pos.a[2] -= geometrics.CHUNK_SIZE\r\n\t\t\t\tif (!this.engineChunk) { return }\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (dz < 0) {\r\n\t\t\tthis.pos.a[2] += dz\r\n\t\t\twhile (this.pos.a[2] < 0) {\r\n\t\t\t\tthis.engineChunk = this.engineChunk.neighboursBySideId[ geometrics.Sides.byName.SOUTH.id ]\r\n\t\t\t\tthis.pos.a[2] += geometrics.CHUNK_SIZE\r\n\t\t\t\tif (!this.engineChunk) { return }\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (dx > 0) {\r\n\t\t\tthis.pos.a[0] += dx\r\n\t\t\twhile (this.pos.a[0] > geometrics.CHUNK_SIZE-1) {\r\n\t\t\t\tthis.engineChunk = this.engineChunk.neighboursBySideId[ geometrics.Sides.byName.EAST.id ]\r\n\t\t\t\tthis.pos.a[0] -= geometrics.CHUNK_SIZE\r\n\t\t\t\tif (!this.engineChunk) { return }\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (dx < 0) {\r\n\t\t\tthis.pos.a[0] += dx\r\n\t\t\twhile (this.pos.a[0] < 0) {\r\n\t\t\t\tthis.engineChunk = this.engineChunk.neighboursBySideId[ geometrics.Sides.byName.WEST.id ]\r\n\t\t\t\tthis.pos.a[0] += geometrics.CHUNK_SIZE\r\n\t\t\t\tif (!this.engineChunk) { return }\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.recalculateIndex()\r\n\t}\r\n\r\n\teachBlockInChunk(callback: () => void) {\r\n\t\tconst a = this.pos.a\r\n\t\tthis.i = 0\r\n\t\tfor (a[0] = 0; a[0] < geometrics.CHUNK_SIZE; a[0] += 1) {\r\n\t\t\tfor (a[2] = 0; a[2] < geometrics.CHUNK_SIZE; a[2] += 1) {\r\n\t\t\t\tfor (a[1] = 0; a[1] < geometrics.CHUNK_SIZE; a[1] += 1) {\r\n\t\t\t\t\tcallback()\r\n\t\t\t\t\tthis.i += 1\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\teachBlockOnFace(chunk: EngineChunk, side: geometrics.SideType, callback: () => void) {\r\n\t\tthis.engineChunk = chunk\r\n\t\tconst a = this.pos.a\r\n\t\tconst freeAxis1 = side.axis === 0 ? 1 : 0\r\n\t\tconst freeAxis2 = side.axis === 2 ? 1 : 2\r\n\t\ta[side.axis] = side.axisDelta === 1 ? geometrics.CHUNK_SIZE - 1 : 0 // locked axis\r\n\t\tfor (a[freeAxis1] = 0; a[freeAxis1] < geometrics.CHUNK_SIZE; a[freeAxis1] += 1) {\r\n\t\t\tfor (a[freeAxis2] = 0; a[freeAxis2] < geometrics.CHUNK_SIZE; a[freeAxis2] += 1) {\r\n\t\t\t\tthis.recalculateIndex()\r\n\t\t\t\tcallback()\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\teachBlockOnEdge(chunk: EngineChunk, side1: geometrics.SideType, side2: geometrics.SideType, callback: () => void) {\r\n\t\tthis.engineChunk = chunk\r\n\t\tconst a = this.pos.a\r\n\t\tconst freeAxis = side1.axis !== 0 && side2.axis !== 0 ? 0 : side1.axis !== 1 && side2.axis !== 1 ? 1 : 2\r\n\t\ta[side1.axis] = side1.axisDelta === 1 ? geometrics.CHUNK_SIZE - 1 : 0\r\n\t\ta[side2.axis] = side2.axisDelta === 1 ? geometrics.CHUNK_SIZE - 1 : 0\r\n\t\tfor (a[freeAxis] = 0; a[freeAxis] < geometrics.CHUNK_SIZE; a[freeAxis] += 1) {\r\n\t\t\tthis.recalculateIndex()\r\n\t\t\tcallback()\r\n\t\t}\r\n\t}\r\n\tsetBlockOnCorner(chunk: EngineChunk, side1: geometrics.SideType, side2: geometrics.SideType, side3: geometrics.SideType) {\r\n\t\tthis.engineChunk = chunk\r\n\t\tconst a = this.pos.a\r\n\t\ta[side1.axis] = side1.axisDelta === 1 ? geometrics.CHUNK_SIZE - 1 : 0\r\n\t\ta[side2.axis] = side2.axisDelta === 1 ? geometrics.CHUNK_SIZE - 1 : 0\r\n\t\ta[side3.axis] = side3.axisDelta === 1 ? geometrics.CHUNK_SIZE - 1 : 0\r\n\t\tthis.recalculateIndex()\r\n\t}\r\n\r\n\ttoString() {\r\n\t\treturn `BlockPos(${this.pos.toString()} @ ${this.engineChunk ? this.engineChunk.chunkData.pos.toString() : \"no-chunk\"})`\r\n\t}\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/common/BlockPos.ts","import * as geometrics from \"geometrics\"\r\nimport BlockPos from \"BlockPos\"\r\n\r\n\r\nexport function drawQuad(vertexArray: geometrics.VertexArrayType, quadId: number, blockPos: BlockPos, side: geometrics.SideType, uvs: Array<number>, brightnesses: Array<number>) {\r\n\r\n\tconst flipQuad: number = (brightnesses[0] + brightnesses[2] < brightnesses[1] + brightnesses[3]) ? 1 : 0 // 1 bit\r\n\r\n\tconst s: number = side.id // 3 bits because 0..5\r\n\r\n\tconst x: number = blockPos.pos.a[0] // 5 bits because 0..31\r\n\tconst y: number = blockPos.pos.a[1] // 5 bits because 0..31\r\n\tconst z: number = blockPos.pos.a[2] // 5 bits because 0..31\r\n\tconst packedPos: number = (x) | (y << 5) | (z << 10) // 15 bits\r\n\tconst packedTransform: number = packedPos | (s << 15) | (flipQuad << 18) // 19 bits\r\n\r\n\tconst packedInt0: number = packedTransform\r\n\r\n\tconst brightCorner0: number = Math.floor(brightnesses[0] * 15) // 4 bits\r\n\tconst brightCorner1: number = Math.floor(brightnesses[1] * 15) // 4 bits\r\n\tconst brightCorner2: number = Math.floor(brightnesses[2] * 15) // 4 bits\r\n\tconst brightCorner3: number = Math.floor(brightnesses[3] * 15) // 4 bits\r\n\tconst brightCorners: number = (brightCorner0) | (brightCorner1 << 4) | (brightCorner2 << 8) | (brightCorner3 << 12)\r\n\tconst u0: number = uvs[0] // 4 bits because 0..15\r\n\tconst v0: number = uvs[1] // 4 bits because 0..15\r\n\tconst packedInt1: number = (brightCorners) | (u0 << 16) | (v0 << 20) // 24 bits\r\n\r\n\tlet vertexArrayCursor = quadId * geometrics.quadVertexElementSize\r\n\tvertexArray[vertexArrayCursor + 0] = packedInt0\r\n\tvertexArray[vertexArrayCursor + 1] = packedInt1\r\n}\r\n\r\nexport function clearQuad(vertexArray: geometrics.VertexArrayType, quadId: number) {\r\n\tlet vertexArrayCursor = quadId * geometrics.quadVertexElementSize\r\n\r\n\t// TODO: make the quad degenerate\r\n\tconst invalidSideId = 6\r\n\tvertexArray[vertexArrayCursor + 0] = invalidSideId << 15\r\n\tvertexArray[vertexArrayCursor + 1] = 0\r\n}\r\n\r\nexport function updateQuadAO(vertexArray: geometrics.VertexArrayType, quadId: number, blockPos: BlockPos, side: geometrics.SideType, uvs: Array<number>, brightnesses: Array<number>): boolean {\r\n\tlet changed = false\r\n\t// TODO: optimize?\r\n\tchanged = true\r\n\tdrawQuad(vertexArray, quadId, blockPos, side, uvs, brightnesses)\r\n\treturn changed\r\n}\r\n\r\nexport function getVertexOrderAfterQuadFlipping(brightnesses: Array<number>) {\r\n\tif (brightnesses[0] + brightnesses[2] < brightnesses[1] + brightnesses[3]) {\r\n\t\treturn [1, 2, 3, 0]\r\n\t}\r\n\telse {\r\n\t\treturn [0, 1, 2, 3]\r\n\t}\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/client/engine/chunk/EngineChunkQuadWriter.ts","import v3 from \"v3\"\r\nimport ChunkData from \"../ChunkData\"\r\nimport * as WorkerManager from \"./WorkerManager\"\r\nimport * as WorkerObligation from \"./WorkerObligation\"\r\nimport * as ChunkGeneration from \"../singleplayer/ChunkGeneration\"\r\nimport * as geometrics from \"geometrics\"\r\nimport EngineChunkBuilder from \"../engine/chunk/EngineChunkBuilder\"\r\nimport EngineChunkVertexArrayPool from \"../engine/chunk/EngineChunkVertexArrayPool\"\r\nimport EngineChunkQuadLookupPool from \"../engine/chunk/EngineChunkQuadLookupPool\"\r\nimport Pool from \"Pool\"\r\n\r\nconst TASK_TYPE_ID = \"TaskGenerateAndMeshChunk\"\r\n\r\nexport default {\r\n\tid: TASK_TYPE_ID,\r\n\tcancel(taskId: number) {\r\n\t\tWorkerManager.cancelTask(taskId)\r\n\t},\r\n\tqueue(chunkPos: v3, onComplete: (chunkData: ChunkData, quadCount: number, vertexArrays: Array<geometrics.VertexArrayType>, quadIdsByBlockAndSide: Uint16Array) => void) {\r\n\t\tconst chunkId = chunkPos.toString()\r\n\t\tlet chunkData\r\n\r\n\t\tconst taskId = WorkerManager.queueTask(\r\n\t\t\tTASK_TYPE_ID,\r\n\t\t\t() => {\r\n\t\t\t\t// this allocation is deferred until the task starts, because the onCancelled handler (below) doesn't get called if the task is cancelled before it starts)\r\n\t\t\t\tchunkData = ChunkData.pool.acquire() // n.b. chunkData may contain old data, so make sure to set everything!\r\n\t\t\t\tchunkData.setChunkPos(chunkPos)\r\n\r\n\t\t\t\tconst quadIdsByBlockAndSide = EngineChunkQuadLookupPool.acquire()\r\n\t\t\t\tconst initialVertexArrays = [EngineChunkVertexArrayPool.acquire()]\r\n\r\n\t\t\t\tconst requestPayload = {\r\n\t\t\t\t\tchunkPos: [chunkPos.a[0], chunkPos.a[1], chunkPos.a[2]],\r\n\t\t\t\t\tblockData: chunkData.blocks.buffer,\r\n\t\t\t\t\tquadIdsByBlockAndSide: quadIdsByBlockAndSide.buffer,\r\n\t\t\t\t\tinitialVertexArrays: initialVertexArrays.map(a => a.buffer),\r\n\t\t\t\t}\r\n\t\t\t\tconst transferableObjects = [\r\n\t\t\t\t\tchunkData.blocks.buffer,\r\n\t\t\t\t\tquadIdsByBlockAndSide.buffer,\r\n\t\t\t\t\t...(initialVertexArrays.map(a => a.buffer)),\r\n\t\t\t\t]\r\n\t\t\t\treturn { requestPayload, transferableObjects }\r\n\t\t\t},\r\n\t\t\t(completePayload: WorkerManager.WorkerPayload) => {\r\n\t\t\t\tchunkData.blocks = new Uint8Array(completePayload.blockData)\r\n\r\n\t\t\t\tconst unusedVertexArrays = completePayload.unusedVertexArrays.map(buffer => new Uint32Array(buffer))\r\n\t\t\t\tunusedVertexArrays.forEach(vertexArray => {\r\n\t\t\t\t\tEngineChunkVertexArrayPool.release(vertexArray)\r\n\t\t\t\t})\r\n\r\n\t\t\t\tconst quadCount = <number>completePayload.quadCount\r\n\t\t\t\tconst vertexArrays = completePayload.vertexArrays.map(buffer => new Uint32Array(buffer))\r\n\t\t\t\tconst quadIdsByBlockAndSide = new Uint16Array(completePayload.quadIdsByBlockAndSide)\r\n\r\n\t\t\t\tonComplete(chunkData, quadCount, vertexArrays, quadIdsByBlockAndSide)\r\n\t\t\t},\r\n\t\t\t(cancelledPayload: WorkerManager.WorkerPayload) => {\r\n\t\t\t\tchunkData.blocks = new Uint8Array(cancelledPayload.blockData)\r\n\t\t\t\tChunkData.pool.release(chunkData)\r\n\r\n\t\t\t\tconst cancelledQuadIdsByBlockAndSide = new Uint16Array(cancelledPayload.quadIdsByBlockAndSide)\r\n\t\t\t\tEngineChunkQuadLookupPool.release(cancelledQuadIdsByBlockAndSide)\r\n\r\n\t\t\t\tconst unusedVertexArrays = cancelledPayload.unusedVertexArrays.map(buffer => new Uint32Array(buffer))\r\n\t\t\t\tunusedVertexArrays.forEach(vertexArray => {\r\n\t\t\t\t\tEngineChunkVertexArrayPool.release(vertexArray)\r\n\t\t\t\t})\r\n\r\n\t\t\t\tconst vertexArrays = cancelledPayload.vertexArrays.map(buffer => new Uint32Array(buffer))\r\n\t\t\t\tvertexArrays.forEach(vertexArray => {\r\n\t\t\t\t\tEngineChunkVertexArrayPool.release(vertexArray)\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t)\r\n\t\treturn taskId\r\n\t},\r\n\twork(requestPayload, responseCallback) {\r\n\t\t// get request\r\n\t\tconst chunkPosRaw: Array<number> = requestPayload.chunkPos\r\n\t\tconst chunkPos = new v3(chunkPosRaw[0], chunkPosRaw[1], chunkPosRaw[2])\r\n\t\tconst blockData: Uint8Array = new Uint8Array(requestPayload.blockData)\r\n\t\tconst quadIdsByBlockAndSide: Uint16Array = new Uint16Array(requestPayload.quadIdsByBlockAndSide)\r\n\t\tconst initialVertexArrays: Array<geometrics.VertexArrayType> = requestPayload.initialVertexArrays.map(buffer => new Uint32Array(buffer))\r\n\r\n\t\t// process request\r\n\t\tChunkGeneration.generateChunk(chunkPos, blockData)\r\n\t\tquadIdsByBlockAndSide.fill(0)\r\n\t\tconst { quadCount, vertexArrays, unusedVertexArrays } = EngineChunkBuilder.drawInternalChunkQuads(blockData, quadIdsByBlockAndSide, initialVertexArrays)\r\n\r\n\t\t// respond\r\n\t\tconst responsePayload: WorkerObligation.WorkerPayload = {\r\n\t\t\tblockData: blockData.buffer,\r\n\t\t\tquadCount,\r\n\t\t\tvertexArrays: vertexArrays.map(arr => arr.buffer),\r\n\t\t\tquadIdsByBlockAndSide: quadIdsByBlockAndSide.buffer,\r\n\t\t\tunusedVertexArrays: unusedVertexArrays.map(arr => arr.buffer),\r\n\t\t}\r\n\t\tconst transferableObjects: Array<any> = [\r\n\t\t\tblockData.buffer,\r\n\t\t\tquadIdsByBlockAndSide.buffer,\r\n\t\t\t...(vertexArrays.map(arr => arr.buffer)),\r\n\t\t\t...(unusedVertexArrays.map(arr => arr.buffer)),\r\n\t\t]\r\n\t\tresponseCallback(responsePayload, transferableObjects)\r\n\t},\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/client/worker/TaskGenerateAndMeshChunk.ts","import { CHUNK_SIZE } from \"geometrics\"\r\nimport v3 from \"v3\"\r\nimport BlockTypes from \"BlockTypes\"\r\n//import * as noise from \"noise\"\r\nimport { libnoise } from \"libnoise\" // https://github.com/DropechoStudios/libnoise/tree/master/Sources/libnoise/generator\r\n\r\nconst quality = libnoise.QualityMode.MEDIUM\r\n// Perlin(frequency : Float, lacunarity : Float, persistence : Float, octaves : Int, seed : Int, quality : QualityMode)\r\nconst perlin0 = new libnoise.generator.Perlin(.01, 2.0, 0.5, 8, 123, quality)\r\n// RidgedMultifractal(frequency : Float, lacunarity : Float, octaves : Int, seed : Int, quality : QualityMode)\r\nconst ridged0 = new libnoise.generator.RidgedMultifractal(.01, 2.0, 8, 123, quality)\r\n\r\nconst sampleVector = new v3()\r\n\r\nexport function generateChunk(chunkPos: v3, chunkBlocks: Uint8Array) {\r\n\tvar chunkBlockIndex = 0\r\n\tfor (var x = 0; x < CHUNK_SIZE; x += 1) {\r\n\t\tfor (var z = 0; z < CHUNK_SIZE; z += 1) {\r\n\t\t\tsampleVector.y = 0\r\n\t\t\tsampleVector.x = x + chunkPos.x * CHUNK_SIZE\r\n\t\t\tsampleVector.z = z + chunkPos.z * CHUNK_SIZE\r\n\r\n\t\t\tconst scale = 3\r\n\t\t\tconst groundHeight = Math.floor(ridged0.getValue(-10 + sampleVector.x / scale, -10 + sampleVector.y / scale, sampleVector.z / scale) * 50 - 50)\r\n\r\n\t\t\tfor (var y = 0; y < CHUNK_SIZE; y += 1) {\r\n\t\t\t\tsampleVector.y = y + chunkPos.y * CHUNK_SIZE\r\n\r\n\t\t\t\tconst depth = groundHeight - sampleVector.y\r\n\r\n\t\t\t\tlet blockData\r\n\r\n\t\t\t\tif (depth < 0) {\r\n\t\t\t\t\tblockData = BlockTypes.byName.air.id\r\n\t\t\t\t}\r\n\t\t\t\telse if (depth < 1) {\r\n\t\t\t\t\tif (sampleVector.y > 0) {\r\n\t\t\t\t\t\tblockData = BlockTypes.byName.snow.id\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (sampleVector.y > -40) {\r\n\t\t\t\t\t\tblockData = BlockTypes.byName.stone.id\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (sampleVector.y > -60) {\r\n\t\t\t\t\t\tblockData = BlockTypes.byName.dirt.id\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tblockData = BlockTypes.byName.grass.id\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse if (depth < 2) {\r\n\t\t\t\t\tif (sampleVector.y > 0) {\r\n\t\t\t\t\t\tblockData = BlockTypes.byName.snow.id\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (sampleVector.y > -40) {\r\n\t\t\t\t\t\tblockData = BlockTypes.byName.stone.id\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (sampleVector.y > -60) {\r\n\t\t\t\t\t\tblockData = BlockTypes.byName.dirt.id\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tblockData = BlockTypes.byName.dirt.id\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tblockData = BlockTypes.byName.stone.id\r\n\t\t\t\t}\r\n\r\n\t\t\t\tchunkBlocks[chunkBlockIndex] = blockData\r\n\t\t\t\tchunkBlockIndex += 1\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n}\r\n\r\n/*\r\nconst fbm1 = new noise.FBM3(250).setFractal(2, 0.5, 1.1)\r\nconst fbm2 = new noise.FBM3(80)\r\nconst fbm3 = new noise.FBM3(250)\r\nconst warp1 = new noise.NoiseWarp3d(1, fbm1)\r\nconst warp2 = new noise.NoiseWarp3d(100, fbm1)\r\nconst cell1 = new noise.CellNoise(0.02)\r\n\r\nconst biomeSizeFactor = 5\r\n\r\nconst sampleVector = new v3()\r\nconst biomeVector = new v3()\r\nconst workVector = new v3()\r\n\r\nexport default {\r\n\tgenerateChunk(chunkPos: v3, chunkBlocks: Uint8Array) {\r\n\r\n\t\tvar chunkBlockIndex = 0\r\n\t\tfor (var x = 0; x < CHUNK_SIZE; x += 1) {\r\n\t\t\tfor (var z = 0; z < CHUNK_SIZE; z += 1) {\r\n\t\t\t\tsampleVector.y = 0\r\n\t\t\t\tsampleVector.x = x + chunkPos.x * CHUNK_SIZE\r\n\t\t\t\tsampleVector.z = z + chunkPos.z * CHUNK_SIZE\r\n\r\n\t\t\t\tbiomeVector.setFrom(sampleVector)\r\n\r\n\t\t\t\twarp2.warp3(biomeVector)\r\n\r\n\r\n\t\t\t\tvar cellNoise = cell1.sample2sqr(biomeVector.x / biomeSizeFactor, biomeVector.z / biomeSizeFactor)\r\n\t\t\t\tvar v_dist = cellNoise[0]\r\n\t\t\t\tvar v_closest = cellNoise[1]\r\n\r\n\r\n\t\t\t\tfor (var y = 0; y < CHUNK_SIZE; y += 1) {\r\n\t\t\t\t\tsampleVector.y = y + chunkPos.y * CHUNK_SIZE + 30\r\n\r\n\r\n\t\t\t\t\tvar blockData = BlockTypes.byName.air.id\r\n\r\n\t\t\t\t\tif (sampleVector.y < -10) {\r\n\t\t\t\t\t\tblockData = BlockTypes.byName.obsidian.id\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (sampleVector.y < 50) {\r\n\t\t\t\t\t\tblockData = this.terrainGen(sampleVector, v_dist, v_closest)\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tchunkBlocks[chunkBlockIndex] = blockData\r\n\t\t\t\t\tchunkBlockIndex += 1\r\n\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\tterrainGen(pos: v3, v_dist: number, v_closest: number) {\r\n\r\n\t\tconst normalized_v_closest = (v_closest + 1.5) % 1\r\n\r\n\t\tvar biomeBlockTypes = [\r\n\t\t\tBlockTypes.byName.stone.id,\r\n\t\t\tBlockTypes.byName.dirt.id,\r\n\t\t\tBlockTypes.byName.sand.id,\r\n\t\t\tBlockTypes.byName.gravel.id,\r\n\t\t\tBlockTypes.byName.snow.id,\r\n\t\t\tBlockTypes.byName.ice.id,\r\n\t\t\tBlockTypes.byName.sandstone.id,\r\n\t\t\tBlockTypes.byName.grass.id,\r\n\t\t]\r\n\r\n\t\tvar biomeSolidBlock = biomeBlockTypes[Math.floor(normalized_v_closest * biomeBlockTypes.length)]\r\n\r\n\t\tworkVector.setFrom(pos)\r\n\r\n\t\twarp1.warp3(workVector)\r\n\r\n\t\tvar sample1 = fbm1.sample2(workVector)\r\n\t\tsample1 += fbm2.sample3(workVector) * 0.5\r\n\t\tsample1 += fbm3.sample3(workVector) * 0.25\r\n\r\n\t\t//sample1 *= 1 - v_dist\r\n\r\n\t\tsample1 = Math.pow(sample1, 2)\r\n\r\n\r\n\t\t//var sample2 = fbm2.sample(workVector)\r\n\t\t//var sample3 = fbm3.sample(workVector)\r\n\r\n\t\t//var lerped = sample1 * (sample3) + sample2 * (1 - sample3)\r\n\r\n\t\tif (sample1 > pos.y / 25) {\r\n\t\t\treturn biomeSolidBlock\r\n\t\t}\r\n\r\n\t\treturn BlockTypes.byName.air.id\r\n\t},\r\n}\r\n*/\n\n\n// WEBPACK FOOTER //\n// ./src/client/singleplayer/ChunkGeneration.ts","// Generated by Haxe 4.0.0\n(function ($hx_exports) { \"use strict\";\n$hx_exports[\"libnoise\"] = $hx_exports[\"libnoise\"] || {};\n$hx_exports[\"libnoise\"][\"operator\"] = $hx_exports[\"libnoise\"][\"operator\"] || {};\n;$hx_exports[\"libnoise\"][\"generator\"] = $hx_exports[\"libnoise\"][\"generator\"] || {};\nfunction $extend(from, fields) {\n\tfunction Inherit() {} Inherit.prototype = from; var proto = new Inherit();\n\tfor (var name in fields) proto[name] = fields[name];\n\tif( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;\n\treturn proto;\n}\nMath.__name__ = true;\nvar haxe_ds_ArraySort = function() { };\nhaxe_ds_ArraySort.__name__ = true;\nhaxe_ds_ArraySort.sort = function(a,cmp) {\n\thaxe_ds_ArraySort.rec(a,cmp,0,a.length);\n};\nhaxe_ds_ArraySort.rec = function(a,cmp,from,to) {\n\tvar middle = from + to >> 1;\n\tif(to - from < 12) {\n\t\tif(to <= from) {\n\t\t\treturn;\n\t\t}\n\t\tvar _g1 = from + 1;\n\t\tvar _g = to;\n\t\twhile(_g1 < _g) {\n\t\t\tvar i = _g1++;\n\t\t\tvar j = i;\n\t\t\twhile(j > from) {\n\t\t\t\tif(cmp(a[j],a[j - 1]) < 0) {\n\t\t\t\t\thaxe_ds_ArraySort.swap(a,j - 1,j);\n\t\t\t\t} else {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t--j;\n\t\t\t}\n\t\t}\n\t\treturn;\n\t}\n\thaxe_ds_ArraySort.rec(a,cmp,from,middle);\n\thaxe_ds_ArraySort.rec(a,cmp,middle,to);\n\thaxe_ds_ArraySort.doMerge(a,cmp,from,middle,to,middle - from,to - middle);\n};\nhaxe_ds_ArraySort.doMerge = function(a,cmp,from,pivot,to,len1,len2) {\n\tvar first_cut;\n\tvar second_cut;\n\tvar len11;\n\tvar len22;\n\tif(len1 == 0 || len2 == 0) {\n\t\treturn;\n\t}\n\tif(len1 + len2 == 2) {\n\t\tif(cmp(a[pivot],a[from]) < 0) {\n\t\t\thaxe_ds_ArraySort.swap(a,pivot,from);\n\t\t}\n\t\treturn;\n\t}\n\tif(len1 > len2) {\n\t\tlen11 = len1 >> 1;\n\t\tfirst_cut = from + len11;\n\t\tsecond_cut = haxe_ds_ArraySort.lower(a,cmp,pivot,to,first_cut);\n\t\tlen22 = second_cut - pivot;\n\t} else {\n\t\tlen22 = len2 >> 1;\n\t\tsecond_cut = pivot + len22;\n\t\tfirst_cut = haxe_ds_ArraySort.upper(a,cmp,from,pivot,second_cut);\n\t\tlen11 = first_cut - from;\n\t}\n\thaxe_ds_ArraySort.rotate(a,cmp,first_cut,pivot,second_cut);\n\tvar new_mid = first_cut + len22;\n\thaxe_ds_ArraySort.doMerge(a,cmp,from,first_cut,new_mid,len11,len22);\n\thaxe_ds_ArraySort.doMerge(a,cmp,new_mid,second_cut,to,len1 - len11,len2 - len22);\n};\nhaxe_ds_ArraySort.rotate = function(a,cmp,from,mid,to) {\n\tif(from == mid || mid == to) {\n\t\treturn;\n\t}\n\tvar n = haxe_ds_ArraySort.gcd(to - from,mid - from);\n\twhile(n-- != 0) {\n\t\tvar val = a[from + n];\n\t\tvar shift = mid - from;\n\t\tvar p1 = from + n;\n\t\tvar p2 = from + n + shift;\n\t\twhile(p2 != from + n) {\n\t\t\ta[p1] = a[p2];\n\t\t\tp1 = p2;\n\t\t\tif(to - p2 > shift) {\n\t\t\t\tp2 += shift;\n\t\t\t} else {\n\t\t\t\tp2 = from + (shift - (to - p2));\n\t\t\t}\n\t\t}\n\t\ta[p1] = val;\n\t}\n};\nhaxe_ds_ArraySort.gcd = function(m,n) {\n\twhile(n != 0) {\n\t\tvar t = m % n;\n\t\tm = n;\n\t\tn = t;\n\t}\n\treturn m;\n};\nhaxe_ds_ArraySort.upper = function(a,cmp,from,to,val) {\n\tvar len = to - from;\n\tvar half;\n\tvar mid;\n\twhile(len > 0) {\n\t\thalf = len >> 1;\n\t\tmid = from + half;\n\t\tif(cmp(a[val],a[mid]) < 0) {\n\t\t\tlen = half;\n\t\t} else {\n\t\t\tfrom = mid + 1;\n\t\t\tlen = len - half - 1;\n\t\t}\n\t}\n\treturn from;\n};\nhaxe_ds_ArraySort.lower = function(a,cmp,from,to,val) {\n\tvar len = to - from;\n\tvar half;\n\tvar mid;\n\twhile(len > 0) {\n\t\thalf = len >> 1;\n\t\tmid = from + half;\n\t\tif(cmp(a[mid],a[val]) < 0) {\n\t\t\tfrom = mid + 1;\n\t\t\tlen = len - half - 1;\n\t\t} else {\n\t\t\tlen = half;\n\t\t}\n\t}\n\treturn from;\n};\nhaxe_ds_ArraySort.swap = function(a,i,j) {\n\tvar tmp = a[i];\n\ta[i] = a[j];\n\ta[j] = tmp;\n};\nvar js__$Boot_HaxeError = function(val) {\n\tError.call(this);\n\tthis.val = val;\n\tthis.message = String(val);\n\tif(Error.captureStackTrace) {\n\t\tError.captureStackTrace(this,js__$Boot_HaxeError);\n\t}\n};\njs__$Boot_HaxeError.__name__ = true;\njs__$Boot_HaxeError.wrap = function(val) {\n\tif((val instanceof Error)) {\n\t\treturn val;\n\t} else {\n\t\treturn new js__$Boot_HaxeError(val);\n\t}\n};\njs__$Boot_HaxeError.__super__ = Error;\njs__$Boot_HaxeError.prototype = $extend(Error.prototype,{\n});\nvar js_Boot = function() { };\njs_Boot.__name__ = true;\njs_Boot.__string_rec = function(o,s) {\n\tif(o == null) {\n\t\treturn \"null\";\n\t}\n\tif(s.length >= 5) {\n\t\treturn \"<...>\";\n\t}\n\tvar t = typeof(o);\n\tif(t == \"function\" && (o.__name__ || o.__ename__)) {\n\t\tt = \"object\";\n\t}\n\tswitch(t) {\n\tcase \"function\":\n\t\treturn \"<function>\";\n\tcase \"object\":\n\t\tif(o instanceof Array) {\n\t\t\tif(o.__enum__) {\n\t\t\t\tif(o.length == 2) {\n\t\t\t\t\treturn o[0];\n\t\t\t\t}\n\t\t\t\tvar str = o[0] + \"(\";\n\t\t\t\ts += \"\\t\";\n\t\t\t\tvar _g1 = 2;\n\t\t\t\tvar _g = o.length;\n\t\t\t\twhile(_g1 < _g) {\n\t\t\t\t\tvar i = _g1++;\n\t\t\t\t\tif(i != 2) {\n\t\t\t\t\t\tstr += \",\" + js_Boot.__string_rec(o[i],s);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstr += js_Boot.__string_rec(o[i],s);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn str + \")\";\n\t\t\t}\n\t\t\tvar l = o.length;\n\t\t\tvar i1;\n\t\t\tvar str1 = \"[\";\n\t\t\ts += \"\\t\";\n\t\t\tvar _g11 = 0;\n\t\t\tvar _g2 = l;\n\t\t\twhile(_g11 < _g2) {\n\t\t\t\tvar i2 = _g11++;\n\t\t\t\tstr1 += (i2 > 0 ? \",\" : \"\") + js_Boot.__string_rec(o[i2],s);\n\t\t\t}\n\t\t\tstr1 += \"]\";\n\t\t\treturn str1;\n\t\t}\n\t\tvar tostr;\n\t\ttry {\n\t\t\ttostr = o.toString;\n\t\t} catch( e ) {\n\t\t\treturn \"???\";\n\t\t}\n\t\tif(tostr != null && tostr != Object.toString && typeof(tostr) == \"function\") {\n\t\t\tvar s2 = o.toString();\n\t\t\tif(s2 != \"[object Object]\") {\n\t\t\t\treturn s2;\n\t\t\t}\n\t\t}\n\t\tvar k = null;\n\t\tvar str2 = \"{\\n\";\n\t\ts += \"\\t\";\n\t\tvar hasp = o.hasOwnProperty != null;\n\t\tfor( var k in o ) {\n\t\tif(hasp && !o.hasOwnProperty(k)) {\n\t\t\tcontinue;\n\t\t}\n\t\tif(k == \"prototype\" || k == \"__class__\" || k == \"__super__\" || k == \"__interfaces__\" || k == \"__properties__\") {\n\t\t\tcontinue;\n\t\t}\n\t\tif(str2.length != 2) {\n\t\t\tstr2 += \", \\n\";\n\t\t}\n\t\tstr2 += s + k + \" : \" + js_Boot.__string_rec(o[k],s);\n\t\t}\n\t\ts = s.substring(1);\n\t\tstr2 += \"\\n\" + s + \"}\";\n\t\treturn str2;\n\tcase \"string\":\n\t\treturn o;\n\tdefault:\n\t\treturn String(o);\n\t}\n};\nvar libnoise_ModuleBase = $hx_exports[\"libnoise\"][\"ModuleBase\"] = function(count) {\n\tif(count > 0) {\n\t\tvar this1 = new Array(count);\n\t\tthis.modules = this1;\n\t}\n};\nlibnoise_ModuleBase.__name__ = true;\nlibnoise_ModuleBase.prototype = {\n\tget: function(index) {\n\t\treturn this.modules[index];\n\t}\n\t,set: function(index,value) {\n\t\treturn this.modules[index] = value;\n\t}\n\t,length: function() {\n\t\treturn this.modules.length;\n\t}\n\t,getValue: function(x,y,z) {\n\t\tthrow new js__$Boot_HaxeError(\"ModuleBase.getValue is an abstract method\");\n\t}\n};\nvar libnoise_QualityMode = { __ename__ : true, __constructs__ : [\"LOW\",\"MEDIUM\",\"HIGH\"] };\nlibnoise_QualityMode.LOW = [\"LOW\",0];\nlibnoise_QualityMode.LOW.__enum__ = libnoise_QualityMode;\nlibnoise_QualityMode.MEDIUM = [\"MEDIUM\",1];\nlibnoise_QualityMode.MEDIUM.__enum__ = libnoise_QualityMode;\nlibnoise_QualityMode.HIGH = [\"HIGH\",2];\nlibnoise_QualityMode.HIGH.__enum__ = libnoise_QualityMode;\nvar libnoise_E_$QualityMode = $hx_exports[\"libnoise\"][\"QualityMode\"] = function() { };\nlibnoise_E_$QualityMode.__name__ = true;\nvar libnoise_Utils = $hx_exports[\"libnoise\"][\"Utils\"] = function() { };\nlibnoise_Utils.__name__ = true;\nlibnoise_Utils.GradientCoherentNoise3D = function(x,y,z,seed,quality) {\n\tvar x0 = x > 0.0 ? x | 0 : (x | 0) - 1;\n\tvar x1 = x0 + 1;\n\tvar y0 = y > 0.0 ? y | 0 : (y | 0) - 1;\n\tvar y1 = y0 + 1;\n\tvar z0 = z > 0.0 ? z | 0 : (z | 0) - 1;\n\tvar z1 = z0 + 1;\n\tvar xs = 0.0;\n\tvar ys = 0.0;\n\tvar zs = 0.0;\n\tswitch(quality[1]) {\n\tcase 0:\n\t\txs = x - x0;\n\t\tys = y - y0;\n\t\tzs = z - z0;\n\t\tbreak;\n\tcase 1:\n\t\tvar value = x - x0;\n\t\txs = value * value * (3.0 - 2.0 * value);\n\t\tvar value1 = y - y0;\n\t\tys = value1 * value1 * (3.0 - 2.0 * value1);\n\t\tvar value2 = z - z0;\n\t\tzs = value2 * value2 * (3.0 - 2.0 * value2);\n\t\tbreak;\n\tcase 2:\n\t\txs = libnoise_Utils.MapQuinticSCurve(x - x0);\n\t\tys = libnoise_Utils.MapQuinticSCurve(y - y0);\n\t\tzs = libnoise_Utils.MapQuinticSCurve(z - z0);\n\t\tbreak;\n\t}\n\tvar n0 = libnoise_Utils.GradientNoise3D(x,y,z,x0,y0,z0,seed);\n\tvar n1 = libnoise_Utils.GradientNoise3D(x,y,z,x1,y0,z0,seed);\n\tvar ix0 = libnoise_Utils.InterpolateLinear(n0,n1,xs);\n\tn0 = libnoise_Utils.GradientNoise3D(x,y,z,x0,y1,z0,seed);\n\tn1 = libnoise_Utils.GradientNoise3D(x,y,z,x1,y1,z0,seed);\n\tvar ix1 = libnoise_Utils.InterpolateLinear(n0,n1,xs);\n\tvar iy0 = libnoise_Utils.InterpolateLinear(ix0,ix1,ys);\n\tn0 = libnoise_Utils.GradientNoise3D(x,y,z,x0,y0,z1,seed);\n\tn1 = libnoise_Utils.GradientNoise3D(x,y,z,x1,y0,z1,seed);\n\tix0 = libnoise_Utils.InterpolateLinear(n0,n1,xs);\n\tn0 = libnoise_Utils.GradientNoise3D(x,y,z,x0,y1,z1,seed);\n\tn1 = libnoise_Utils.GradientNoise3D(x,y,z,x1,y1,z1,seed);\n\tix1 = libnoise_Utils.InterpolateLinear(n0,n1,xs);\n\tvar iy1 = libnoise_Utils.InterpolateLinear(ix0,ix1,ys);\n\treturn libnoise_Utils.InterpolateLinear(iy0,iy1,zs);\n};\nlibnoise_Utils.GradientNoise3D = function(fx,fy,fz,ix,iy,iz,seed) {\n\tvar i = libnoise_Utils.GeneratorNoiseX * ix + libnoise_Utils.GeneratorNoiseY * iy + libnoise_Utils.GeneratorNoiseZ * iz + libnoise_Utils.GeneratorSeed * seed & -1;\n\ti ^= i >> libnoise_Utils.GeneratorShift;\n\ti &= 255;\n\tvar xvg = libnoise_Utils.Randoms[i << 2];\n\tvar yvg = libnoise_Utils.Randoms[(i << 2) + 1];\n\tvar zvg = libnoise_Utils.Randoms[(i << 2) + 2];\n\tvar xvp = fx - ix;\n\tvar yvp = fy - iy;\n\tvar zvp = fz - iz;\n\treturn (xvg * xvp + yvg * yvp + zvg * zvp) * 2.12;\n};\nlibnoise_Utils.InterpolateCubic = function(a,b,c,d,position) {\n\tvar p = d - c - (a - b);\n\tvar q = a - b - p;\n\tvar r = c - a;\n\tvar s = b;\n\treturn p * position * position * position + q * position * position + r * position + s;\n};\nlibnoise_Utils.InterpolateLinear = function(a,b,position) {\n\treturn (1.0 - position) * a + position * b;\n};\nlibnoise_Utils.fmod = function(a,b) {\n\treturn a - (a / b | 0) * b;\n};\nlibnoise_Utils.MakeInt32Range = function(value) {\n\tif(value >= 1073741824.0) {\n\t\treturn 2.0 * (value - (value / 1073741824.0 | 0) * 1073741824.0) - 1073741824.0;\n\t}\n\tif(value <= -1073741824.0) {\n\t\treturn 2.0 * (value - (value / 1073741824.0 | 0) * 1073741824.0) + 1073741824.0;\n\t}\n\treturn value;\n};\nlibnoise_Utils.MapCubicSCurve = function(value) {\n\treturn value * value * (3.0 - 2.0 * value);\n};\nlibnoise_Utils.MapQuinticSCurve = function(value) {\n\tvar a3 = value * value * value;\n\tvar a4 = a3 * value;\n\tvar a5 = a4 * value;\n\treturn 6.0 * a5 - 15.0 * a4 + 10.0 * a3;\n};\nlibnoise_Utils.ValueNoise3D = function(x,y,z,seed) {\n\treturn 1.0 - libnoise_Utils.ValueNoise3DInt(x,y,z,seed) / 1073741824.0;\n};\nlibnoise_Utils.ValueNoise3DInt = function(x,y,z,seed) {\n\tvar n = libnoise_Utils.GeneratorNoiseX * x + libnoise_Utils.GeneratorNoiseY * y + libnoise_Utils.GeneratorNoiseZ * z + libnoise_Utils.GeneratorSeed * seed & 2147483647;\n\tn = n >> 13 ^ n;\n\treturn n * (n * n * 60493 + 19990303) + 1376312589 & 2147483647;\n};\nlibnoise_Utils.Clamp = function(value,min,max) {\n\tif(value < min) {\n\t\treturn min;\n\t} else if(value > max) {\n\t\treturn max;\n\t} else {\n\t\treturn value;\n\t}\n};\nvar libnoise_generator_Billow = $hx_exports[\"libnoise\"][\"generator\"][\"Billow\"] = function(frequency,lacunarity,persistence,octaves,seed,quality) {\n\tthis.frequency = frequency;\n\tthis.lacunarity = lacunarity;\n\tthis.persistence = persistence;\n\tthis.octaves = octaves;\n\tthis.seed = seed;\n\tthis.quality = quality;\n\tlibnoise_ModuleBase.call(this,0);\n};\nlibnoise_generator_Billow.__name__ = true;\nlibnoise_generator_Billow.__super__ = libnoise_ModuleBase;\nlibnoise_generator_Billow.prototype = $extend(libnoise_ModuleBase.prototype,{\n\tgetValue: function(x,y,z) {\n\t\tvar value = 0.0;\n\t\tvar curp = 1.0;\n\t\tx *= this.frequency;\n\t\ty *= this.frequency;\n\t\tz *= this.frequency;\n\t\tvar _g1 = 0;\n\t\tvar _g = this.octaves;\n\t\twhile(_g1 < _g) {\n\t\t\tvar i = _g1++;\n\t\t\tvar nx = libnoise_Utils.MakeInt32Range(x);\n\t\t\tvar ny = libnoise_Utils.MakeInt32Range(y);\n\t\t\tvar nz = libnoise_Utils.MakeInt32Range(z);\n\t\t\tvar _seed = this.seed + i & -1;\n\t\t\tvar signal = libnoise_Utils.GradientCoherentNoise3D(nx,ny,nz,_seed,this.quality);\n\t\t\tsignal = 2.0 * Math.abs(signal) - 1.0;\n\t\t\tvalue += signal * curp;\n\t\t\tx *= this.lacunarity;\n\t\t\ty *= this.lacunarity;\n\t\t\tz *= this.lacunarity;\n\t\t\tcurp *= this.persistence;\n\t\t}\n\t\treturn value + 0.5;\n\t}\n});\nvar libnoise_generator_Checker = $hx_exports[\"libnoise\"][\"generator\"][\"Checker\"] = function() {\n\tlibnoise_ModuleBase.call(this,0);\n};\nlibnoise_generator_Checker.__name__ = true;\nlibnoise_generator_Checker.__super__ = libnoise_ModuleBase;\nlibnoise_generator_Checker.prototype = $extend(libnoise_ModuleBase.prototype,{\n\tgetValue: function(x,y,z) {\n\t\tvar ix = Math.floor(libnoise_Utils.MakeInt32Range(x)) | 0;\n\t\tvar iy = Math.floor(libnoise_Utils.MakeInt32Range(y)) | 0;\n\t\tvar iz = Math.floor(libnoise_Utils.MakeInt32Range(z)) | 0;\n\t\tif((((ix & 1 ^ iy) & 1 ^ iz) & 1) != 0) {\n\t\t\treturn -1.0;\n\t\t} else {\n\t\t\treturn 1.0;\n\t\t}\n\t}\n});\nvar libnoise_generator_Const = $hx_exports[\"libnoise\"][\"generator\"][\"Const\"] = function(value) {\n\tlibnoise_ModuleBase.call(this,0);\n\tthis.value = value;\n};\nlibnoise_generator_Const.__name__ = true;\nlibnoise_generator_Const.__super__ = libnoise_ModuleBase;\nlibnoise_generator_Const.prototype = $extend(libnoise_ModuleBase.prototype,{\n\tgetValue: function(x,y,z) {\n\t\treturn this.value;\n\t}\n});\nvar libnoise_generator_Cylinder = $hx_exports[\"libnoise\"][\"generator\"][\"Cylinder\"] = function(frequency) {\n\tthis.frequency = 1.0;\n\tlibnoise_ModuleBase.call(this,0);\n\tthis.frequency = frequency;\n};\nlibnoise_generator_Cylinder.__name__ = true;\nlibnoise_generator_Cylinder.__super__ = libnoise_ModuleBase;\nlibnoise_generator_Cylinder.prototype = $extend(libnoise_ModuleBase.prototype,{\n\tgetValue: function(x,y,z) {\n\t\tx *= this.frequency;\n\t\tz *= this.frequency;\n\t\tvar dfc = Math.sqrt(x * x + z * z);\n\t\tvar dfss = dfc - Math.floor(dfc);\n\t\tvar dfls = 1.0 - dfss;\n\t\tvar nd = Math.min(dfss,dfls);\n\t\treturn 1.0 - nd * 4.0;\n\t}\n});\nvar libnoise_generator_Perlin = $hx_exports[\"libnoise\"][\"generator\"][\"Perlin\"] = function(frequency,lacunarity,persistence,octaves,seed,quality) {\n\tthis.frequency = frequency;\n\tthis.lacunarity = lacunarity;\n\tthis.persistence = persistence;\n\tthis.octaves = octaves;\n\tthis.seed = seed;\n\tthis.quality = quality;\n\tlibnoise_ModuleBase.call(this,0);\n};\nlibnoise_generator_Perlin.__name__ = true;\nlibnoise_generator_Perlin.__super__ = libnoise_ModuleBase;\nlibnoise_generator_Perlin.prototype = $extend(libnoise_ModuleBase.prototype,{\n\tgetValue: function(x,y,z) {\n\t\tvar value = 0.0;\n\t\tvar cp = 1.0;\n\t\tx *= this.frequency;\n\t\ty *= this.frequency;\n\t\tz *= this.frequency;\n\t\tvar _g1 = 0;\n\t\tvar _g = this.octaves;\n\t\twhile(_g1 < _g) {\n\t\t\tvar i = _g1++;\n\t\t\tvar nx = libnoise_Utils.MakeInt32Range(x);\n\t\t\tvar ny = libnoise_Utils.MakeInt32Range(y);\n\t\t\tvar nz = libnoise_Utils.MakeInt32Range(z);\n\t\t\tvar _seed = this.seed + i & -1;\n\t\t\tvar signal = libnoise_Utils.GradientCoherentNoise3D(nx,ny,nz,_seed,this.quality);\n\t\t\tvalue += signal * cp;\n\t\t\tx *= this.lacunarity;\n\t\t\ty *= this.lacunarity;\n\t\t\tz *= this.lacunarity;\n\t\t\tcp *= this.persistence;\n\t\t}\n\t\treturn value;\n\t}\n});\nvar libnoise_generator_RidgedMultifractal = $hx_exports[\"libnoise\"][\"generator\"][\"RidgedMultifractal\"] = function(frequency,lacunarity,octaves,seed,quality) {\n\tvar this1 = new Array(30);\n\tthis.weights = this1;\n\tthis.frequency = frequency;\n\tthis.lacunarity = lacunarity;\n\tthis.octaves = octaves;\n\tthis.seed = seed;\n\tthis.quality = quality;\n\tthis.updateWeights();\n\tlibnoise_ModuleBase.call(this,0);\n};\nlibnoise_generator_RidgedMultifractal.__name__ = true;\nlibnoise_generator_RidgedMultifractal.__super__ = libnoise_ModuleBase;\nlibnoise_generator_RidgedMultifractal.prototype = $extend(libnoise_ModuleBase.prototype,{\n\tgetValue: function(x,y,z) {\n\t\tx *= this.frequency;\n\t\ty *= this.frequency;\n\t\tz *= this.frequency;\n\t\tvar value = 0.0;\n\t\tvar weight = 1.0;\n\t\tvar offset = 1.0;\n\t\tvar gain = 2.0;\n\t\tvar _g1 = 0;\n\t\tvar _g = this.octaves;\n\t\twhile(_g1 < _g) {\n\t\t\tvar i = _g1++;\n\t\t\tvar nx = libnoise_Utils.MakeInt32Range(x);\n\t\t\tvar ny = libnoise_Utils.MakeInt32Range(y);\n\t\t\tvar nz = libnoise_Utils.MakeInt32Range(z);\n\t\t\tvar _seed = this.seed + i & 2147483647;\n\t\t\tvar signal = libnoise_Utils.GradientCoherentNoise3D(nx,ny,nz,_seed,this.quality);\n\t\t\tsignal = Math.abs(signal);\n\t\t\tsignal = offset - signal;\n\t\t\tsignal *= signal;\n\t\t\tsignal *= weight;\n\t\t\tweight = signal * gain;\n\t\t\tif(weight > 1.0) {\n\t\t\t\tweight = 1.0;\n\t\t\t} else if(weight < 0) {\n\t\t\t\tweight = 0;\n\t\t\t} else {\n\t\t\t\tweight = weight;\n\t\t\t}\n\t\t\tvalue += signal * this.weights[i];\n\t\t\tx *= this.lacunarity;\n\t\t\ty *= this.lacunarity;\n\t\t\tz *= this.lacunarity;\n\t\t}\n\t\treturn value * 1.25 - 1.0;\n\t}\n\t,updateWeights: function() {\n\t\tvar f = 1.0;\n\t\tvar _g1 = 0;\n\t\tvar _g = this.weights.length;\n\t\twhile(_g1 < _g) {\n\t\t\tvar i = _g1++;\n\t\t\tthis.weights[i] = Math.pow(f,-1.0);\n\t\t\tf *= this.lacunarity;\n\t\t}\n\t}\n});\nvar libnoise_generator_Sphere = $hx_exports[\"libnoise\"][\"generator\"][\"Sphere\"] = function(frequency) {\n\tthis.frequency = 1.0;\n\tlibnoise_ModuleBase.call(this,0);\n\tthis.frequency = frequency;\n};\nlibnoise_generator_Sphere.__name__ = true;\nlibnoise_generator_Sphere.__super__ = libnoise_ModuleBase;\nlibnoise_generator_Sphere.prototype = $extend(libnoise_ModuleBase.prototype,{\n\tgetValue: function(x,y,z) {\n\t\tx *= this.frequency;\n\t\ty *= this.frequency;\n\t\tz *= this.frequency;\n\t\tvar dfc = Math.sqrt(x * x + y * y + z * z);\n\t\tvar dfss = dfc - Math.floor(dfc);\n\t\tvar dfls = 1.0 - dfss;\n\t\tvar nd = Math.min(dfss,dfls);\n\t\treturn 1.0 - nd * 4.0;\n\t}\n});\nvar libnoise_generator_Voronoi = $hx_exports[\"libnoise\"][\"generator\"][\"Voronoi\"] = function(frequency,displacement,seed,distance) {\n\tthis.frequency = frequency;\n\tthis.displacement = displacement;\n\tthis.seed = seed;\n\tthis.distance = distance;\n\tlibnoise_ModuleBase.call(this,0);\n};\nlibnoise_generator_Voronoi.__name__ = true;\nlibnoise_generator_Voronoi.__super__ = libnoise_ModuleBase;\nlibnoise_generator_Voronoi.prototype = $extend(libnoise_ModuleBase.prototype,{\n\tgetValue: function(x,y,z) {\n\t\tx *= this.frequency;\n\t\ty *= this.frequency;\n\t\tz *= this.frequency;\n\t\tvar xi = x > 0.0 ? x | 0 : x - 1 | 0;\n\t\tvar iy = y > 0.0 ? y | 0 : y - 1 | 0;\n\t\tvar iz = z > 0.0 ? z | 0 : z - 1 | 0;\n\t\tvar md = 2147483647.0;\n\t\tvar xc = 0;\n\t\tvar yc = 0;\n\t\tvar zc = 0;\n\t\tvar _g1 = iz - 2;\n\t\tvar _g = iz + 3;\n\t\twhile(_g1 < _g) {\n\t\t\tvar zcu = _g1++;\n\t\t\tvar _g3 = iy - 2;\n\t\t\tvar _g2 = iy + 3;\n\t\t\twhile(_g3 < _g2) {\n\t\t\t\tvar ycu = _g3++;\n\t\t\t\tvar _g5 = xi - 2;\n\t\t\t\tvar _g4 = xi + 3;\n\t\t\t\twhile(_g5 < _g4) {\n\t\t\t\t\tvar xcu = _g5++;\n\t\t\t\t\tvar xp = xcu + (1.0 - libnoise_Utils.ValueNoise3DInt(xcu,ycu,zcu,this.seed) / 1073741824.0);\n\t\t\t\t\tvar yp = ycu + (1.0 - libnoise_Utils.ValueNoise3DInt(xcu,ycu,zcu,this.seed + 1) / 1073741824.0);\n\t\t\t\t\tvar zp = zcu + (1.0 - libnoise_Utils.ValueNoise3DInt(xcu,ycu,zcu,this.seed + 2) / 1073741824.0);\n\t\t\t\t\tvar xd = xp - x;\n\t\t\t\t\tvar yd = yp - y;\n\t\t\t\t\tvar zd = zp - z;\n\t\t\t\t\tvar d = xd * xd + yd * yd + zd * zd;\n\t\t\t\t\tif(d < md) {\n\t\t\t\t\t\tmd = d;\n\t\t\t\t\t\txc = xp;\n\t\t\t\t\t\tyc = yp;\n\t\t\t\t\t\tzc = zp;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tvar v;\n\t\tif(this.distance) {\n\t\t\tvar xd1 = xc - x;\n\t\t\tvar yd1 = yc - y;\n\t\t\tvar zd1 = zc - z;\n\t\t\tv = Math.sqrt(xd1 * xd1 + yd1 * yd1 + zd1 * zd1) * 1.7320508075688772935 - 1.0;\n\t\t} else {\n\t\t\tv = 0.0;\n\t\t}\n\t\treturn v + this.displacement * (1.0 - libnoise_Utils.ValueNoise3DInt(Math.floor(xc) | 0,Math.floor(yc) | 0,Math.floor(zc) | 0,0) / 1073741824.0);\n\t}\n});\nvar libnoise_operator_Abs = $hx_exports[\"libnoise\"][\"operator\"][\"Abs\"] = function(input) {\n\tlibnoise_ModuleBase.call(this,1);\n\tthis.modules[0] = input;\n};\nlibnoise_operator_Abs.__name__ = true;\nlibnoise_operator_Abs.__super__ = libnoise_ModuleBase;\nlibnoise_operator_Abs.prototype = $extend(libnoise_ModuleBase.prototype,{\n\tgetValue: function(x,y,z) {\n\t\treturn Math.abs(this.modules[0].getValue(x,y,z));\n\t}\n});\nvar libnoise_operator_Add = $hx_exports[\"libnoise\"][\"operator\"][\"Add\"] = function(lhs,rhs) {\n\tlibnoise_ModuleBase.call(this,2);\n\tthis.modules[0] = lhs;\n\tthis.modules[1] = rhs;\n};\nlibnoise_operator_Add.__name__ = true;\nlibnoise_operator_Add.__super__ = libnoise_ModuleBase;\nlibnoise_operator_Add.prototype = $extend(libnoise_ModuleBase.prototype,{\n\tgetValue: function(x,y,z) {\n\t\tvar val1 = this.modules[0].getValue(x,y,z);\n\t\tvar val2 = this.modules[1].getValue(x,y,z);\n\t\treturn val1 + val2;\n\t}\n});\nvar libnoise_operator_Blend = $hx_exports[\"libnoise\"][\"operator\"][\"Blend\"] = function(rhs,lhs,controller) {\n\tlibnoise_ModuleBase.call(this,3);\n\tthis.modules[0] = rhs;\n\tthis.modules[1] = lhs;\n\tthis.modules[2] = controller;\n};\nlibnoise_operator_Blend.__name__ = true;\nlibnoise_operator_Blend.__super__ = libnoise_ModuleBase;\nlibnoise_operator_Blend.prototype = $extend(libnoise_ModuleBase.prototype,{\n\tset_controller: function(value) {\n\t\treturn this.modules[2] = value;\n\t}\n\t,get_controller: function() {\n\t\treturn this.modules[2];\n\t}\n\t,getValue: function(x,y,z) {\n\t\tvar a = this.modules[0].getValue(x,y,z);\n\t\tvar b = this.modules[1].getValue(x,y,z);\n\t\tvar c = (this.modules[2].getValue(x,y,z) + 1.0) / 2.0;\n\t\treturn libnoise_Utils.InterpolateLinear(a,b,c);\n\t}\n});\nvar libnoise_operator_Cache = $hx_exports[\"libnoise\"][\"operator\"][\"Cache\"] = function(input) {\n\tlibnoise_ModuleBase.call(this,1);\n\tthis.modules[0] = input;\n};\nlibnoise_operator_Cache.__name__ = true;\nlibnoise_operator_Cache.__super__ = libnoise_ModuleBase;\nlibnoise_operator_Cache.prototype = $extend(libnoise_ModuleBase.prototype,{\n\tgetValue: function(x,y,z) {\n\t\tif(!(this.cached && this.cx == x && this.cy == y && this.cz == z)) {\n\t\t\tthis.value = this.modules[0].getValue(x,y,z);\n\t\t\tthis.cx = x;\n\t\t\tthis.cy = y;\n\t\t\tthis.cz = z;\n\t\t}\n\t\tthis.cached = true;\n\t\treturn this.value;\n\t}\n});\nvar libnoise_operator_Clamp = $hx_exports[\"libnoise\"][\"operator\"][\"Clamp\"] = function(min,max,input) {\n\tthis.max = 1.0;\n\tthis.min = -1.0;\n\tlibnoise_ModuleBase.call(this,1);\n\tthis.modules[0] = input;\n\tthis.min = min;\n\tthis.max = max;\n};\nlibnoise_operator_Clamp.__name__ = true;\nlibnoise_operator_Clamp.__super__ = libnoise_ModuleBase;\nlibnoise_operator_Clamp.prototype = $extend(libnoise_ModuleBase.prototype,{\n\tgetValue: function(x,y,z) {\n\t\tvar value = this.modules[0].getValue(x,y,z);\n\t\tif(value < this.min) {\n\t\t\treturn this.min;\n\t\t} else if(value > this.max) {\n\t\t\treturn this.max;\n\t\t} else {\n\t\t\treturn value;\n\t\t}\n\t}\n});\nvar libnoise_operator_Curve = $hx_exports[\"libnoise\"][\"operator\"][\"Curve\"] = function(input) {\n\tlibnoise_ModuleBase.call(this,1);\n\tthis.modules[0] = input;\n\tthis.data = [];\n};\nlibnoise_operator_Curve.__name__ = true;\nlibnoise_operator_Curve.__super__ = libnoise_ModuleBase;\nlibnoise_operator_Curve.prototype = $extend(libnoise_ModuleBase.prototype,{\n\tcontrolPointCount: function() {\n\t\treturn this.data.length;\n\t}\n\t,add: function(input,output) {\n\t\tvar this1 = new Array(2);\n\t\tvar vec = this1;\n\t\tvec[0] = input;\n\t\tvec[1] = output;\n\t\tvar _g = 0;\n\t\tvar _g1 = this.data;\n\t\twhile(_g < _g1.length) {\n\t\t\tvar v = _g1[_g];\n\t\t\t++_g;\n\t\t\tif(v[0] == input) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tthis.data.push(vec);\n\t\thaxe_ds_ArraySort.sort(this.data,function(a,b) {\n\t\t\tif(a[0] < b[0]) {\n\t\t\t\treturn -1;\n\t\t\t} else if(a[0] == b[0]) {\n\t\t\t\treturn 0;\n\t\t\t} else {\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t});\n\t}\n\t,clear: function() {\n\t\tthis.data = [];\n\t}\n\t,getValue: function(x,y,z) {\n\t\tvar smv = this.modules[0].getValue(x,y,z);\n\t\tvar ip = 0;\n\t\tvar _g1 = 0;\n\t\tvar _g = this.data.length;\n\t\twhile(_g1 < _g) {\n\t\t\tvar i = _g1++;\n\t\t\tif(smv < this.data[ip++][0]) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tvar value = ip - 2;\n\t\tvar max = this.data.length - 1;\n\t\tvar i0 = value < 0 ? 0 : value > max ? max : value;\n\t\tvar value1 = ip - 1;\n\t\tvar max1 = this.data.length - 1;\n\t\tvar i1 = value1 < 0 ? 0 : value1 > max1 ? max1 : value1;\n\t\tvar max2 = this.data.length - 1;\n\t\tvar i2 = ip < 0 ? 0 : ip > max2 ? max2 : ip;\n\t\tvar value2 = ip + 1;\n\t\tvar max3 = this.data.length - 1;\n\t\tvar i3 = value2 < 0 ? 0 : value2 > max3 ? max3 : value2;\n\t\tif(i1 == i2) {\n\t\t\treturn this.data[i1][1];\n\t\t}\n\t\tvar ip0 = this.data[i1][0];\n\t\tvar ip1 = this.data[i2][0];\n\t\tvar a = (smv - ip0) / (ip1 - ip0);\n\t\treturn libnoise_Utils.InterpolateCubic(this.data[i0][1],this.data[i1][1],this.data[i2][1],this.data[i3][1],a);\n\t}\n});\nvar libnoise_operator_Displace = $hx_exports[\"libnoise\"][\"operator\"][\"Displace\"] = function(input,x,y,z) {\n\tthis.exponent = 1.0;\n\tlibnoise_ModuleBase.call(this,4);\n\tthis.modules[0] = input;\n\tthis.modules[1] = x;\n\tthis.modules[2] = y;\n\tthis.modules[3] = z;\n};\nlibnoise_operator_Displace.__name__ = true;\nlibnoise_operator_Displace.__super__ = libnoise_ModuleBase;\nlibnoise_operator_Displace.prototype = $extend(libnoise_ModuleBase.prototype,{\n\tset_X: function(val) {\n\t\treturn this.modules[1] = val;\n\t}\n\t,get_X: function() {\n\t\treturn this.modules[1];\n\t}\n\t,set_Y: function(val) {\n\t\treturn this.modules[2] = val;\n\t}\n\t,get_Y: function() {\n\t\treturn this.modules[2];\n\t}\n\t,set_Z: function(val) {\n\t\treturn this.modules[3] = val;\n\t}\n\t,get_Z: function() {\n\t\treturn this.modules[3];\n\t}\n\t,getValue: function(x,y,z) {\n\t\tvar dx = x + this.modules[1].getValue(x,y,z);\n\t\tvar dy = y + this.modules[2].getValue(x,y,z);\n\t\tvar dz = z + this.modules[3].getValue(x,y,z);\n\t\treturn this.modules[0].getValue(dx,dy,dz);\n\t}\n});\nvar libnoise_operator_Exponent = $hx_exports[\"libnoise\"][\"operator\"][\"Exponent\"] = function(exponent,input) {\n\tthis.exponent = 1.0;\n\tlibnoise_ModuleBase.call(this,1);\n\tthis.modules[0] = input;\n\tthis.exponent = exponent;\n};\nlibnoise_operator_Exponent.__name__ = true;\nlibnoise_operator_Exponent.__super__ = libnoise_ModuleBase;\nlibnoise_operator_Exponent.prototype = $extend(libnoise_ModuleBase.prototype,{\n\tgetValue: function(x,y,z) {\n\t\tvar value = this.modules[0].getValue(x,y,z);\n\t\treturn Math.pow(Math.abs((value + 1) / 2.0),this.exponent) * 2 - 1;\n\t}\n});\nvar libnoise_operator_Invert = $hx_exports[\"libnoise\"][\"operator\"][\"Invert\"] = function(input) {\n\tlibnoise_ModuleBase.call(this,1);\n\tthis.modules[0] = input;\n};\nlibnoise_operator_Invert.__name__ = true;\nlibnoise_operator_Invert.__super__ = libnoise_ModuleBase;\nlibnoise_operator_Invert.prototype = $extend(libnoise_ModuleBase.prototype,{\n\tgetValue: function(x,y,z) {\n\t\treturn -this.modules[0].getValue(x,y,z);\n\t}\n});\nvar libnoise_operator_Max = $hx_exports[\"libnoise\"][\"operator\"][\"Max\"] = function(lhs,rhs) {\n\tlibnoise_ModuleBase.call(this,2);\n\tthis.modules[0] = lhs;\n\tthis.modules[1] = rhs;\n};\nlibnoise_operator_Max.__name__ = true;\nlibnoise_operator_Max.__super__ = libnoise_ModuleBase;\nlibnoise_operator_Max.prototype = $extend(libnoise_ModuleBase.prototype,{\n\tgetValue: function(x,y,z) {\n\t\tvar a = this.modules[0].getValue(x,y,z);\n\t\tvar b = this.modules[1].getValue(x,y,z);\n\t\treturn Math.max(a,b);\n\t}\n});\nvar libnoise_operator_Min = $hx_exports[\"libnoise\"][\"operator\"][\"Min\"] = function(lhs,rhs) {\n\tlibnoise_ModuleBase.call(this,2);\n\tthis.modules[0] = lhs;\n\tthis.modules[1] = rhs;\n};\nlibnoise_operator_Min.__name__ = true;\nlibnoise_operator_Min.__super__ = libnoise_ModuleBase;\nlibnoise_operator_Min.prototype = $extend(libnoise_ModuleBase.prototype,{\n\tgetValue: function(x,y,z) {\n\t\tvar a = this.modules[0].getValue(x,y,z);\n\t\tvar b = this.modules[1].getValue(x,y,z);\n\t\treturn Math.min(a,b);\n\t}\n});\nvar libnoise_operator_Multiply = $hx_exports[\"libnoise\"][\"operator\"][\"Multiply\"] = function(lhs,rhs) {\n\tlibnoise_ModuleBase.call(this,2);\n\tthis.modules[0] = lhs;\n\tthis.modules[1] = rhs;\n};\nlibnoise_operator_Multiply.__name__ = true;\nlibnoise_operator_Multiply.__super__ = libnoise_ModuleBase;\nlibnoise_operator_Multiply.prototype = $extend(libnoise_ModuleBase.prototype,{\n\tgetValue: function(x,y,z) {\n\t\treturn this.modules[0].getValue(x,y,z) * this.modules[1].getValue(x,y,z);\n\t}\n});\nvar libnoise_operator_Power = $hx_exports[\"libnoise\"][\"operator\"][\"Power\"] = function(lhs,rhs) {\n\tlibnoise_ModuleBase.call(this,2);\n\tthis.modules[0] = lhs;\n\tthis.modules[1] = rhs;\n};\nlibnoise_operator_Power.__name__ = true;\nlibnoise_operator_Power.__super__ = libnoise_ModuleBase;\nlibnoise_operator_Power.prototype = $extend(libnoise_ModuleBase.prototype,{\n\tgetValue: function(x,y,z) {\n\t\treturn Math.pow(this.modules[0].getValue(x,y,z),this.modules[1].getValue(x,y,z));\n\t}\n});\nvar libnoise_operator_Rotate = $hx_exports[\"libnoise\"][\"operator\"][\"Rotate\"] = function(rx,ry,rz,input) {\n\tif(rz == null) {\n\t\trz = 0.0;\n\t}\n\tif(ry == null) {\n\t\try = 0.0;\n\t}\n\tif(rx == null) {\n\t\trx = 0.0;\n\t}\n\tlibnoise_ModuleBase.call(this,1);\n\tthis.modules[0] = input;\n\tthis.rx = rx;\n\tthis.ry = ry;\n\tthis.rz = rz;\n\tthis.setAngles(rx,ry,rz);\n};\nlibnoise_operator_Rotate.__name__ = true;\nlibnoise_operator_Rotate.__super__ = libnoise_ModuleBase;\nlibnoise_operator_Rotate.prototype = $extend(libnoise_ModuleBase.prototype,{\n\tsetAngles: function(_rx,_ry,_rz) {\n\t\tvar xc = Math.cos(_rx * 0.01745329251);\n\t\tvar yc = Math.cos(_ry * 0.01745329251);\n\t\tvar zc = Math.cos(_rz * 0.01745329251);\n\t\tvar xs = Math.sin(_rx * 0.01745329251);\n\t\tvar ys = Math.sin(_ry * 0.01745329251);\n\t\tvar zs = Math.sin(_rz * 0.01745329251);\n\t\tthis.x1Matrix = ys * xs * zs + yc * zc;\n\t\tthis.y1Matrix = xc * zs;\n\t\tthis.z1Matrix = ys * zc - yc * xs * zs;\n\t\tthis.x2Matrix = ys * xs * zc - yc * zs;\n\t\tthis.y2Matrix = xc * zc;\n\t\tthis.z2Matrix = -yc * xs * zc - ys * zs;\n\t\tthis.x3Matrix = -ys * xc;\n\t\tthis.y3Matrix = xs;\n\t\tthis.z3Matrix = yc * xc;\n\t\tthis.rx = _rx;\n\t\tthis.ry = _ry;\n\t\tthis.rz = _rz;\n\t}\n\t,getValue: function(x,y,z) {\n\t\tvar nx = this.x1Matrix * x + this.y1Matrix * y + this.z1Matrix * z;\n\t\tvar ny = this.x2Matrix * x + this.y2Matrix * y + this.z2Matrix * z;\n\t\tvar nz = this.x3Matrix * x + this.y3Matrix * y + this.z3Matrix * z;\n\t\treturn this.modules[0].getValue(nx,ny,nz);\n\t}\n});\nvar libnoise_operator_Scale = $hx_exports[\"libnoise\"][\"operator\"][\"Scale\"] = function(sx,sy,sz,input) {\n\tif(sz == null) {\n\t\tsz = 1.0;\n\t}\n\tif(sy == null) {\n\t\tsy = 1.0;\n\t}\n\tif(sx == null) {\n\t\tsx = 1.0;\n\t}\n\tlibnoise_ModuleBase.call(this,1);\n\tthis.modules[0] = input;\n\tthis.sx = sx;\n\tthis.sy = sy;\n\tthis.sz = sz;\n};\nlibnoise_operator_Scale.__name__ = true;\nlibnoise_operator_Scale.__super__ = libnoise_ModuleBase;\nlibnoise_operator_Scale.prototype = $extend(libnoise_ModuleBase.prototype,{\n\tgetValue: function(x,y,z) {\n\t\treturn this.modules[0].getValue(x * this.sx,y * this.sy,z * this.sz);\n\t}\n});\nvar libnoise_operator_ScaleBias = $hx_exports[\"libnoise\"][\"operator\"][\"ScaleBias\"] = function(scale,bias,input) {\n\tif(bias == null) {\n\t\tbias = 0.0;\n\t}\n\tif(scale == null) {\n\t\tscale = 1.0;\n\t}\n\tlibnoise_ModuleBase.call(this,1);\n\tthis.modules[0] = input;\n\tthis.scale = scale;\n\tthis.bias = bias;\n};\nlibnoise_operator_ScaleBias.__name__ = true;\nlibnoise_operator_ScaleBias.__super__ = libnoise_ModuleBase;\nlibnoise_operator_ScaleBias.prototype = $extend(libnoise_ModuleBase.prototype,{\n\tgetValue: function(x,y,z) {\n\t\treturn this.modules[0].getValue(x,y,z) * this.scale + this.bias;\n\t}\n});\nvar libnoise_operator_Select = $hx_exports[\"libnoise\"][\"operator\"][\"Select\"] = function(min,max,fallOff,inputA,inputB,controller) {\n\tif(fallOff == null) {\n\t\tfallOff = 0.0;\n\t}\n\tif(max == null) {\n\t\tmax = 1.0;\n\t}\n\tif(min == null) {\n\t\tmin = -1.0;\n\t}\n\tthis.max = 1.0;\n\tthis.min = -1.0;\n\tlibnoise_ModuleBase.call(this,3);\n\tthis.modules[0] = inputA;\n\tthis.modules[1] = inputB;\n\tthis.modules[2] = controller;\n\tthis.min = min;\n\tthis.max = max;\n\tthis.fallOff = fallOff;\n};\nlibnoise_operator_Select.__name__ = true;\nlibnoise_operator_Select.__super__ = libnoise_ModuleBase;\nlibnoise_operator_Select.prototype = $extend(libnoise_ModuleBase.prototype,{\n\tgetValue: function(x,y,z) {\n\t\tvar cv = this.modules[2].getValue(x,y,z);\n\t\tif(this.fallOff > 0) {\n\t\t\tvar a;\n\t\t\tif(cv < this.min - this.fallOff) {\n\t\t\t\treturn this.modules[0].getValue(x,y,z);\n\t\t\t}\n\t\t\tif(cv < this.min + this.fallOff) {\n\t\t\t\tvar lc = this.min - this.fallOff;\n\t\t\t\tvar uc = this.min + this.fallOff;\n\t\t\t\tvar value = (cv - lc) / (uc - lc);\n\t\t\t\ta = value * value * (3.0 - 2.0 * value);\n\t\t\t\treturn libnoise_Utils.InterpolateLinear(this.modules[0].getValue(x,y,z),this.modules[1].getValue(x,y,z),a);\n\t\t\t}\n\t\t\tif(cv < this.max - this.fallOff) {\n\t\t\t\treturn this.modules[1].getValue(x,y,z);\n\t\t\t}\n\t\t\tif(cv < this.max + this.fallOff) {\n\t\t\t\tvar lc1 = this.max - this.fallOff;\n\t\t\t\tvar uc1 = this.max + this.fallOff;\n\t\t\t\tvar value1 = (cv - lc1) / (uc1 - lc1);\n\t\t\t\ta = value1 * value1 * (3.0 - 2.0 * value1);\n\t\t\t\treturn libnoise_Utils.InterpolateLinear(this.modules[1].getValue(x,y,z),this.modules[0].getValue(x,y,z),a);\n\t\t\t}\n\t\t\treturn this.modules[0].getValue(x,y,z);\n\t\t}\n\t\tif(cv < this.min || cv > this.max) {\n\t\t\treturn this.modules[0].getValue(x,y,z);\n\t\t}\n\t\treturn this.modules[1].getValue(x,y,z);\n\t}\n});\nvar libnoise_operator_Subtract = $hx_exports[\"libnoise\"][\"operator\"][\"Subtract\"] = function(lhs,rhs) {\n\tlibnoise_ModuleBase.call(this,2);\n\tthis.modules[0] = lhs;\n\tthis.modules[1] = rhs;\n};\nlibnoise_operator_Subtract.__name__ = true;\nlibnoise_operator_Subtract.__super__ = libnoise_ModuleBase;\nlibnoise_operator_Subtract.prototype = $extend(libnoise_ModuleBase.prototype,{\n\tgetValue: function(x,y,z) {\n\t\treturn this.modules[0].getValue(x,y,z) - this.modules[1].getValue(x,y,z);\n\t}\n});\nvar libnoise_operator_Terrace = $hx_exports[\"libnoise\"][\"operator\"][\"Terrace\"] = function(input,inverted) {\n\tif(inverted == null) {\n\t\tinverted = false;\n\t}\n\tlibnoise_ModuleBase.call(this,1);\n\tthis.modules[0] = input;\n\tthis.inverted = inverted;\n\tthis.data = [];\n};\nlibnoise_operator_Terrace.__name__ = true;\nlibnoise_operator_Terrace.__super__ = libnoise_ModuleBase;\nlibnoise_operator_Terrace.prototype = $extend(libnoise_ModuleBase.prototype,{\n\tcontrolPointCount: function() {\n\t\treturn this.data.length;\n\t}\n\t,clear: function() {\n\t\tthis.data = [];\n\t}\n\t,add: function(value) {\n\t\tvar _g = 0;\n\t\tvar _g1 = this.data;\n\t\twhile(_g < _g1.length) {\n\t\t\tvar val = _g1[_g];\n\t\t\t++_g;\n\t\t\tif(val == value) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tthis.data.push(value);\n\t\thaxe_ds_ArraySort.sort(this.data,function(a,b) {\n\t\t\tif(a < b) {\n\t\t\t\treturn -1;\n\t\t\t} else if(a == b) {\n\t\t\t\treturn 0;\n\t\t\t} else {\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t});\n\t}\n\t,generate: function(steps) {\n\t\tthis.clear();\n\t\tvar ts = 2.0 / (steps - 1.0);\n\t\tvar cv = -1.0;\n\t\tvar _g1 = 0;\n\t\tvar _g = steps;\n\t\twhile(_g1 < _g) {\n\t\t\tvar i = _g1++;\n\t\t\tthis.add(cv);\n\t\t\tcv += ts;\n\t\t}\n\t}\n\t,getValue: function(x,y,z) {\n\t\tvar smv = this.modules[0].getValue(x,y,z);\n\t\tvar ip = 0;\n\t\tvar _g1 = 0;\n\t\tvar _g = this.data.length;\n\t\twhile(_g1 < _g) {\n\t\t\tvar i = _g1++;\n\t\t\tif(smv < this.data[ip++]) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tvar i0 = ip - 1 < 0 ? 0 : ip - 1 > this.data.length - 1 ? this.data.length - 1 : ip - 1;\n\t\tvar i1 = ip < 0 ? 0 : ip > this.data.length - 1 ? this.data.length - 1 : ip;\n\t\tif(i0 == i1) {\n\t\t\treturn this.data[i1];\n\t\t}\n\t\tvar v0 = this.data[i0];\n\t\tvar v1 = this.data[i1];\n\t\tvar a = (smv - v0) / (v1 - v0);\n\t\tif(this.inverted) {\n\t\t\ta = 1.0 - a;\n\t\t\tvar t = v0;\n\t\t\tv0 = v1;\n\t\t\tv1 = t;\n\t\t}\n\t\ta *= a;\n\t\treturn libnoise_Utils.InterpolateLinear(v0,v1,a);\n\t}\n});\nvar libnoise_operator_Translate = $hx_exports[\"libnoise\"][\"operator\"][\"Translate\"] = function(x,y,z,input) {\n\tthis.dz = 1.0;\n\tthis.dy = 1.0;\n\tthis.dx = 1.0;\n\tlibnoise_ModuleBase.call(this,1);\n\tthis.modules[0] = input;\n\tthis.dx = x;\n\tthis.dy = y;\n\tthis.dz = z;\n};\nlibnoise_operator_Translate.__name__ = true;\nlibnoise_operator_Translate.__super__ = libnoise_ModuleBase;\nlibnoise_operator_Translate.prototype = $extend(libnoise_ModuleBase.prototype,{\n\tgetValue: function(x,y,z) {\n\t\treturn this.modules[0].getValue(x + this.dx,y + this.dy,z + this.dz);\n\t}\n});\nvar libnoise_operator_Turbulence = $hx_exports[\"libnoise\"][\"operator\"][\"Turbulence\"] = function(power,input,distortX,distortY,distortZ) {\n\tthis.power = 1.0;\n\tlibnoise_ModuleBase.call(this,1);\n\tthis.modules[0] = input;\n\tthis.power = power;\n\tif(distortX == null) {\n\t\tthis.xDistort = new libnoise_generator_Perlin(1.0,2.0,0.5,6,123,libnoise_QualityMode.MEDIUM);\n\t} else {\n\t\tthis.xDistort = distortX;\n\t}\n\tif(distortY == null) {\n\t\tthis.yDistort = new libnoise_generator_Perlin(1.0,2.0,0.5,6,123,libnoise_QualityMode.MEDIUM);\n\t} else {\n\t\tthis.yDistort = distortY;\n\t}\n\tif(distortZ == null) {\n\t\tthis.zDistort = new libnoise_generator_Perlin(1.0,2.0,0.5,6,123,libnoise_QualityMode.MEDIUM);\n\t} else {\n\t\tthis.zDistort = distortZ;\n\t}\n};\nlibnoise_operator_Turbulence.__name__ = true;\nlibnoise_operator_Turbulence.__super__ = libnoise_ModuleBase;\nlibnoise_operator_Turbulence.prototype = $extend(libnoise_ModuleBase.prototype,{\n\tsetFrequency: function(frequency) {\n\t\tthis.xDistort.frequency = frequency;\n\t\tthis.yDistort.frequency = frequency;\n\t\tthis.zDistort.frequency = frequency;\n\t}\n\t,setRoughness: function(roughness) {\n\t\tthis.xDistort.octaves = roughness;\n\t\tthis.yDistort.octaves = roughness;\n\t\tthis.zDistort.octaves = roughness;\n\t}\n\t,setSeed: function(seed) {\n\t\tthis.xDistort.seed = seed;\n\t\tthis.yDistort.seed = seed;\n\t\tthis.zDistort.seed = seed;\n\t}\n\t,getValue: function(x,y,z) {\n\t\tvar xd = x + this.xDistort.getValue(x + 0.189422607421875,y + 0.99371337890625,z + 0.4781646728515625) * this.power;\n\t\tvar yd = y + this.yDistort.getValue(x + 0.4046478271484375,y + 0.276611328125,z + 0.9230499267578125) * this.power;\n\t\tvar zd = z + this.zDistort.getValue(x + 0.82122802734375,y + 0.1710968017578125,z + 0.6842803955078125) * this.power;\n\t\treturn this.modules[0].getValue(xd,yd,zd);\n\t}\n});\nString.__name__ = true;\nArray.__name__ = true;\nlibnoise_E_$QualityMode.LOW = libnoise_QualityMode.LOW;\nlibnoise_E_$QualityMode.MEDIUM = libnoise_QualityMode.MEDIUM;\nlibnoise_E_$QualityMode.HIGH = libnoise_QualityMode.HIGH;\nlibnoise_Utils.SQRT3 = 1.7320508075688772935;\nlibnoise_Utils.OctavesMaximum = 30;\nlibnoise_Utils.Deg2Rad = 0.01745329251;\nlibnoise_Utils.GeneratorNoiseX = 1619;\nlibnoise_Utils.GeneratorNoiseY = 31337;\nlibnoise_Utils.GeneratorNoiseZ = 6971;\nlibnoise_Utils.GeneratorSeed = 1013;\nlibnoise_Utils.GeneratorShift = 8;\nlibnoise_Utils.Randoms = [-0.763874,-0.596439,-0.246489,0.0,0.396055,0.904518,-0.158073,0.0,-0.499004,-0.8665,-0.0131631,0.0,0.468724,-0.824756,0.316346,0.0,0.829598,0.43195,0.353816,0.0,-0.454473,0.629497,-0.630228,0.0,-0.162349,-0.869962,-0.465628,0.0,0.932805,0.253451,0.256198,0.0,-0.345419,0.927299,-0.144227,0.0,-0.715026,-0.293698,-0.634413,0.0,-0.245997,0.717467,-0.651711,0.0,-0.967409,-0.250435,-0.037451,0.0,0.901729,0.397108,-0.170852,0.0,0.892657,-0.0720622,-0.444938,0.0,0.0260084,-0.0361701,0.999007,0.0,0.949107,-0.19486,0.247439,0.0,0.471803,-0.807064,-0.355036,0.0,0.879737,0.141845,0.453809,0.0,0.570747,0.696415,0.435033,0.0,-0.141751,-0.988233,-0.0574584,0.0,-0.58219,-0.0303005,0.812488,0.0,-0.60922,0.239482,-0.755975,0.0,0.299394,-0.197066,-0.933557,0.0,-0.851615,-0.220702,-0.47544,0.0,0.848886,0.341829,-0.403169,0.0,-0.156129,-0.687241,0.709453,0.0,-0.665651,0.626724,0.405124,0.0,0.595914,-0.674582,0.43569,0.0,0.171025,-0.509292,0.843428,0.0,0.78605,0.536414,-0.307222,0.0,0.18905,-0.791613,0.581042,0.0,-0.294916,0.844994,0.446105,0.0,0.342031,-0.58736,-0.7335,0.0,0.57155,0.7869,0.232635,0.0,0.885026,-0.408223,0.223791,0.0,-0.789518,0.571645,0.223347,0.0,0.774571,0.31566,0.548087,0.0,-0.79695,-0.0433603,-0.602487,0.0,-0.142425,-0.473249,-0.869339,0.0,-0.0698838,0.170442,0.982886,0.0,0.687815,-0.484748,0.540306,0.0,0.543703,-0.534446,-0.647112,0.0,0.97186,0.184391,-0.146588,0.0,0.707084,0.485713,-0.513921,0.0,0.942302,0.331945,0.043348,0.0,0.499084,0.599922,0.625307,0.0,-0.289203,0.211107,0.9337,0.0,0.412433,-0.71667,-0.56239,0.0,0.87721,-0.082816,0.47291,0.0,-0.420685,-0.214278,0.881538,0.0,0.752558,-0.0391579,0.657361,0.0,0.0765725,-0.996789,0.0234082,0.0,-0.544312,-0.309435,-0.779727,0.0,-0.455358,-0.415572,0.787368,0.0,-0.874586,0.483746,0.0330131,0.0,0.245172,-0.0838623,0.965846,0.0,0.382293,-0.432813,0.81641,0.0,-0.287735,-0.905514,0.311853,0.0,-0.667704,0.704955,-0.239186,0.0,0.717885,-0.464002,-0.518983,0.0,0.976342,-0.214895,0.0240053,0.0,-0.0733096,-0.921136,0.382276,0.0,-0.986284,0.151224,-0.0661379,0.0,-0.899319,-0.429671,0.0812908,0.0,0.652102,-0.724625,0.222893,0.0,0.203761,0.458023,-0.865272,0.0,-0.030396,0.698724,-0.714745,0.0,-0.460232,0.839138,0.289887,0.0,-0.0898602,0.837894,0.538386,0.0,-0.731595,0.0793784,0.677102,0.0,-0.447236,-0.788397,0.422386,0.0,0.186481,0.645855,-0.740335,0.0,-0.259006,0.935463,0.240467,0.0,0.445839,0.819655,-0.359712,0.0,0.349962,0.755022,-0.554499,0.0,-0.997078,-0.0359577,0.0673977,0.0,-0.431163,-0.147516,-0.890133,0.0,0.299648,-0.63914,0.708316,0.0,0.397043,0.566526,-0.722084,0.0,-0.502489,0.438308,-0.745246,0.0,0.0687235,0.354097,0.93268,0.0,-0.0476651,-0.462597,0.885286,0.0,-0.221934,0.900739,-0.373383,0.0,-0.956107,-0.225676,0.186893,0.0,-0.187627,0.391487,-0.900852,0.0,-0.224209,-0.315405,0.92209,0.0,-0.730807,-0.537068,0.421283,0.0,-0.0353135,-0.816748,0.575913,0.0,-0.941391,0.176991,-0.287153,0.0,-0.154174,0.390458,0.90762,0.0,-0.283847,0.533842,0.796519,0.0,-0.482737,-0.850448,0.209052,0.0,-0.649175,0.477748,0.591886,0.0,0.885373,-0.405387,-0.227543,0.0,-0.147261,0.181623,-0.972279,0.0,0.0959236,-0.115847,-0.988624,0.0,-0.89724,-0.191348,0.397928,0.0,0.903553,-0.428461,-0.00350461,0.0,0.849072,-0.295807,-0.437693,0.0,0.65551,0.741754,-0.141804,0.0,0.61598,-0.178669,0.767232,0.0,0.0112967,0.932256,-0.361623,0.0,-0.793031,0.258012,0.551845,0.0,0.421933,0.454311,0.784585,0.0,-0.319993,0.0401618,-0.946568,0.0,-0.81571,0.551307,-0.175151,0.0,-0.377644,0.00322313,0.925945,0.0,0.129759,-0.666581,-0.734052,0.0,0.601901,-0.654237,-0.457919,0.0,-0.927463,-0.0343576,-0.372334,0.0,-0.438663,-0.868301,-0.231578,0.0,-0.648845,-0.749138,-0.133387,0.0,0.507393,-0.588294,0.629653,0.0,0.726958,0.623665,0.287358,0.0,0.411159,0.367614,-0.834151,0.0,0.806333,0.585117,-0.0864016,0.0,0.263935,-0.880876,0.392932,0.0,0.421546,-0.201336,0.884174,0.0,-0.683198,-0.569557,-0.456996,0.0,-0.117116,-0.0406654,-0.992285,0.0,-0.643679,-0.109196,-0.757465,0.0,-0.561559,-0.62989,0.536554,0.0,0.0628422,0.104677,-0.992519,0.0,0.480759,-0.2867,-0.828658,0.0,-0.228559,-0.228965,-0.946222,0.0,-0.10194,-0.65706,-0.746914,0.0,0.0689193,-0.678236,0.731605,0.0,0.401019,-0.754026,0.52022,0.0,-0.742141,0.547083,-0.387203,0.0,-0.00210603,-0.796417,-0.604745,0.0,0.296725,-0.409909,-0.862513,0.0,-0.260932,-0.798201,0.542945,0.0,-0.641628,0.742379,0.192838,0.0,-0.186009,-0.101514,0.97729,0.0,0.106711,-0.962067,0.251079,0.0,-0.743499,0.30988,-0.592607,0.0,-0.795853,-0.605066,-0.0226607,0.0,-0.828661,-0.419471,-0.370628,0.0,0.0847218,-0.489815,-0.8677,0.0,-0.381405,0.788019,-0.483276,0.0,0.282042,-0.953394,0.107205,0.0,0.530774,0.847413,0.0130696,0.0,0.0515397,0.922524,0.382484,0.0,-0.631467,-0.709046,0.313852,0.0,0.688248,0.517273,0.508668,0.0,0.646689,-0.333782,-0.685845,0.0,-0.932528,-0.247532,-0.262906,0.0,0.630609,0.68757,-0.359973,0.0,0.577805,-0.394189,0.714673,0.0,-0.887833,-0.437301,-0.14325,0.0,0.690982,0.174003,0.701617,0.0,-0.866701,0.0118182,0.498689,0.0,-0.482876,0.727143,0.487949,0.0,-0.577567,0.682593,-0.447752,0.0,0.373768,0.0982991,0.922299,0.0,0.170744,0.964243,-0.202687,0.0,0.993654,-0.035791,-0.106632,0.0,0.587065,0.4143,-0.695493,0.0,-0.396509,0.26509,-0.878924,0.0,-0.0866853,0.83553,-0.542563,0.0,0.923193,0.133398,-0.360443,0.0,0.00379108,-0.258618,0.965972,0.0,0.239144,0.245154,-0.939526,0.0,0.758731,-0.555871,0.33961,0.0,0.295355,0.309513,0.903862,0.0,0.0531222,-0.91003,-0.411124,0.0,0.270452,0.0229439,-0.96246,0.0,0.563634,0.0324352,0.825387,0.0,0.156326,0.147392,0.976646,0.0,-0.0410141,0.981824,0.185309,0.0,-0.385562,-0.576343,-0.720535,0.0,0.388281,0.904441,0.176702,0.0,0.945561,-0.192859,-0.262146,0.0,0.844504,0.520193,0.127325,0.0,0.0330893,0.999121,-0.0257505,0.0,-0.592616,-0.482475,-0.644999,0.0,0.539471,0.631024,-0.557476,0.0,0.655851,-0.027319,-0.754396,0.0,0.274465,0.887659,0.369772,0.0,-0.123419,0.975177,-0.183842,0.0,-0.223429,0.708045,0.66989,0.0,-0.908654,0.196302,0.368528,0.0,-0.95759,-0.00863708,0.288005,0.0,0.960535,0.030592,0.276472,0.0,-0.413146,0.907537,0.0754161,0.0,-0.847992,0.350849,-0.397259,0.0,0.614736,0.395841,0.68221,0.0,-0.503504,-0.666128,-0.550234,0.0,-0.268833,-0.738524,-0.618314,0.0,0.792737,-0.60001,-0.107502,0.0,-0.637582,0.508144,-0.579032,0.0,0.750105,0.282165,-0.598101,0.0,-0.351199,-0.392294,-0.850155,0.0,0.250126,-0.960993,-0.118025,0.0,-0.732341,0.680909,-0.0063274,0.0,-0.760674,-0.141009,0.633634,0.0,0.222823,-0.304012,0.926243,0.0,0.209178,0.505671,0.836984,0.0,0.757914,-0.56629,-0.323857,0.0,-0.782926,-0.339196,0.52151,0.0,-0.462952,0.585565,0.665424,0.0,0.61879,0.194119,-0.761194,0.0,0.741388,-0.276743,0.611357,0.0,0.707571,0.702621,0.0752872,0.0,0.156562,0.819977,0.550569,0.0,-0.793606,0.440216,0.42,0.0,0.234547,0.885309,-0.401517,0.0,0.132598,0.80115,-0.58359,0.0,-0.377899,-0.639179,0.669808,0.0,-0.865993,-0.396465,0.304748,0.0,-0.624815,-0.44283,0.643046,0.0,-0.485705,0.825614,-0.287146,0.0,-0.971788,0.175535,0.157529,0.0,-0.456027,0.392629,0.798675,0.0,-0.0104443,0.521623,-0.853112,0.0,-0.660575,-0.74519,0.091282,0.0,-0.0157698,-0.307475,-0.951425,0.0,-0.603467,-0.250192,0.757121,0.0,0.506876,0.25006,0.824952,0.0,0.255404,0.966794,0.00884498,0.0,0.466764,-0.874228,-0.133625,0.0,0.475077,-0.0682351,-0.877295,0.0,-0.224967,-0.938972,-0.260233,0.0,-0.377929,-0.814757,-0.439705,0.0,-0.305847,0.542333,-0.782517,0.0,0.26658,-0.902905,-0.337191,0.0,0.0275773,0.322158,-0.946284,0.0,0.0185422,0.716349,0.697496,0.0,-0.20483,0.978416,0.0273371,0.0,-0.898276,0.373969,0.230752,0.0,-0.00909378,0.546594,0.837349,0.0,0.6602,-0.751089,0.000959236,0.0,0.855301,-0.303056,0.420259,0.0,0.797138,0.0623013,-0.600574,0.0,0.48947,-0.866813,0.0951509,0.0,0.251142,0.674531,0.694216,0.0,-0.578422,-0.737373,-0.348867,0.0,-0.254689,-0.514807,0.818601,0.0,0.374972,0.761612,0.528529,0.0,0.640303,-0.734271,-0.225517,0.0,-0.638076,0.285527,0.715075,0.0,0.772956,-0.15984,-0.613995,0.0,0.798217,-0.590628,0.118356,0.0,-0.986276,-0.0578337,-0.154644,0.0,-0.312988,-0.94549,0.0899272,0.0,-0.497338,0.178325,0.849032,0.0,-0.101136,-0.981014,0.165477,0.0,-0.521688,0.0553434,-0.851339,0.0,-0.786182,-0.583814,0.202678,0.0,-0.565191,0.821858,-0.0714658,0.0,0.437895,0.152598,-0.885981,0.0,-0.92394,0.353436,-0.14635,0.0,0.212189,-0.815162,-0.538969,0.0,-0.859262,0.143405,-0.491024,0.0,0.991353,0.112814,0.0670273,0.0,0.0337884,-0.979891,-0.196654,0.0];\nlibnoise_operator_Turbulence.X0 = 0.189422607421875;\nlibnoise_operator_Turbulence.Y0 = 0.99371337890625;\nlibnoise_operator_Turbulence.Z0 = 0.4781646728515625;\nlibnoise_operator_Turbulence.X1 = 0.4046478271484375;\nlibnoise_operator_Turbulence.Y1 = 0.276611328125;\nlibnoise_operator_Turbulence.Z1 = 0.9230499267578125;\nlibnoise_operator_Turbulence.X2 = 0.82122802734375;\nlibnoise_operator_Turbulence.Y2 = 0.1710968017578125;\nlibnoise_operator_Turbulence.Z2 = 0.6842803955078125;\n})(exports);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/libnoise/artifacts/js/libnoise.js\n// module id = 15\n// module chunks = 0","import * as geometrics from \"geometrics\"\r\nimport Pool from \"Pool\"\r\n\r\nconst pool: Pool<Uint16Array> = new Pool(() => { return new Uint16Array(geometrics.CHUNK_SIZE_CUBED * geometrics.facesPerCube) })\r\n\r\nexport default pool\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/client/engine/chunk/EngineChunkQuadLookupPool.ts"],"sourceRoot":""}